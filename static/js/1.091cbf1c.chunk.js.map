{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/remove.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["isCheckBoxInput","element","type","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","isNameInFieldArray","names","name","_toConsumableArray","some","current","substring","search","getNodeParentName","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","omit","source","copy","Object","assign","HookFormContext","React","useFormContext","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","arguments","length","createGetter","prop","defineProperty","isEmptyObject","keys","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","useSubscribe","props","_updateSubscription","_ref","disabled","subject","subscribe","next","callback","updateSubscriptionProps","skipEarlySubscription","useController","methods","_props$control","control","shouldUnregister","_React$useState3","_formValues","_defaultValues","_React$useState4","_slicedToArray","setInputStateValue","_ref2","_ref2$control","_React$useState","_formState","_React$useState2","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_subjects","state","useFormState","values","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_names","array","_stateFlags","action","unregister","onChange","event","target","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","_defineProperty","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","_step","_iterator","_createForOfIteratorHelper","s","n","done","refs","err","e","f","isFunction","cloneObject","Set","createSubject","_observers","observers","_i2","_observers2","observer","subscription","tearDowns","add","push","_i","_tearDowns","teardown","createSubscription","subscriber","closed","createSubscriber","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","_i3","_keys","val1","includes","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isFileInput","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckboxFunction","isString","isWeb","window","document","live","contains","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","defaultResult","validResult","getCheckboxValue","options","option","map","attributes","getFieldValueAs","_ref6","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","every","files","selectedOptions","_ref7","getResolverOptions","criteriaMode","shouldUseNativeValidation","_step4","_iterator4","hasValidation","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","fieldName","join","foundError","pop","deepMerge","targetValue","sourceValue","_a","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","skipValidation","isBlurEvent","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","validateField","_ref8","_asyncToGenerator","_regeneratorRuntime","mark","_callee","inputValue","_field$_f","inputRef","setCustomValidty","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","_ref9","exceedMax","exceedMin","maxOutput","minOutput","valueNumber","valueDate","maxLengthOutput","minLengthOutput","_exceedMax","_exceedMin","_getValueAndMessage","patternValue","_message","validateError","validationResult","_validateError","wrap","_context","prev","abrupt","bind","maxLengthMessage","minLengthMessage","maxType","minType","parseFloat","match","sent","t0","t1","t2","t3","t4","t5","stop","_x","_x2","_x3","_x4","apply","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","watch","unMount","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","_len","args","_key","clearTimeout","setTimeout","isFieldWatched","watchAll","has","_updateValid","_ref10","_callee2","shouldSkipRender","_context2","resolver","_executeSchema","executeBuildInValidation","_x5","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","_ref11","_callee3","previousFieldError","shouldUpdateValid","updatedFormState","_context3","delayError","_x6","_x7","_x8","_x9","_x10","_ref12","_callee4","_context4","context","_x11","executeSchemaAndUpdateState","_ref13","_callee5","_yield$_executeSchema","_iterator5","_step5","_name2","_error","_context5","_x12","_ref14","_callee6","shouldOnlyCheckValid","_name3","fieldReference","fieldError","_args6","_context6","valid","_x13","_x14","_removeUnmounted","_step6","_iterator6","getValues","_getWatch","isGlobal","_getFieldArray","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","concat","setValue","isFieldArray","handleChange","_ref16","_callee7","_error2","shouldSkipValidation","isWatched","_yield$_executeSchema2","previousErrorLookupResult","errorLookupResult","_context7","deps","_x15","_ref17","_callee9","fieldNames","_args9","_context9","Promise","all","_ref18","_callee8","_context8","_x17","shouldFocus","_x16","clearErrors","inputName","setError","info","_step7","_iterator7","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","_ref20","_x18","toString","fieldRef","querySelectorAll","handleSubmit","onValid","onInvalid","_ref21","_callee10","hasNoPromiseError","_yield$_executeSchema3","_context10","preventDefault","persist","finish","_x19","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","_step8","_iterator8","closest","keepSubmitCount","keepIsSubmitted","entries","_ref22","_ref23","keepErrors","setFocus","useForm","_formControl","_React$useState7","_React$useState8"],"mappings":"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","file":"static/js/1.091cbf1c.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}