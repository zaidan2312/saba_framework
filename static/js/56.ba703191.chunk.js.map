{"version":3,"sources":["views/apps/permission_endpoint/index.js","views/apps/permission_endpoint/DropDown.js","@core/components/widgets/stats/StatsHorizontal.js","@core/components/breadcrumbs/index.js"],"names":["List","_ref","_store$dataSummary2","_store$dataSummary3","_ref$filtersCustomAdd","filtersCustomAdd","_ref$lookupMode","lookupMode","_ref$lookupMode_field","lookupMode_fieldName","_ref$lookupMode_dropd","lookupMode_dropdown","_ref$lookupMode_isMul","lookupMode_isMulti","lookupMode_onChange","lookupMode_defaultValue","lookupMode_isM2MDefValFromGrid","lookupMode_defaultFilter","t","useTranslation","dispatch","useDispatch","store","useSelector","state","storeName","_useState","useState","_useState2","_slicedToArray","useEffect","_store$dataSummary","getApiSummaryData","dataSummary","length","isLoadingSummary","getAlwaysGrid","getSummaryData","colors","_jsx","DropDown","_jsxs","Fragment","children","className","Breadcrumbs","title","pageTitle","data","Row","map","item","index","_item$count_format","Col","StatsHorizontal","color","statTitle","concat","icon","Icon","baseClassName","fontSize","renderStats","Skeleton","sx","bgcolor","animation","height","width","count_format","count","Table","_store$selectedData","isLoading","getDataList","Select","theme","selectThemeColors","defaultValue","dataDropdown","filter","el","value","isMulti","onChange","e","options","classnames","selectedData","id","classNamePrefix","cardColor","stats","countTextColor","_ref$countTextStyle","countTextStyle","_ref$titleStyle","titleStyle","statsMargin","_ref$solidColor","solidColor","_ref$cardStyle","cardStyle","_ref$titleOnTop","titleOnTop","cardColorFix","Card","_objectSpread","style","inverse","CardBody","_defineProperty","BreadCrumbs","props","mb","subtitle","Breadcrumb","BreadcrumbItem","tag","Link","to","Wrapper","link","isLastItem","active"],"mappings":"yRA8JeA,UAvIF,SAAHC,GAUH,IAADC,EAAAC,EAAAC,EAAAH,EATJI,wBAAgB,IAAAD,EAAG,GAAEA,EAAAE,EAAAL,EACrBM,kBAAU,IAAAD,GAAQA,EAAAE,EAAAP,EAClBQ,4BAAoB,IAAAD,EAAG,GAAEA,EAAAE,EAAAT,EACzBU,2BAAmB,IAAAD,GAAQA,EAAAE,EAAAX,EAC3BY,0BAAkB,IAAAD,GAAQA,EAC1BE,EAAmBb,EAAnBa,oBACAC,EAAuBd,EAAvBc,wBACAC,EAA8Bf,EAA9Be,+BACAC,EAAwBhB,EAAxBgB,yBAEQC,EAAMC,cAAND,EACFE,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAK,OAAKA,EAAMC,gBAC3CC,EAAoCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BE,EAAA,GAAeA,EAAA,GAQhCE,qBAAU,WAAO,IAADC,EAEZC,sBAC+B,KAAb,QAAjBD,EAAAT,EAAMW,mBAAW,IAAAF,OAAA,EAAjBA,EAAmBG,UAChBZ,EAAMa,kBAAoBC,kBAE9BhB,EAASiB,yBAAe,OAEzB,CAACjB,EAA2B,QAAnBlB,EAAEoB,EAAMW,mBAAW,IAAA/B,OAAA,EAAjBA,EAAmBgC,SAEjC,IAAMI,EAAS,CACb,UACA,UACA,UACA,SACA,OACA,aAGF,OAAQ3B,EAoFN4B,cAACC,UAAQ,CACP/B,qBAAsBA,EACtBK,oBAAqBA,EACrBC,wBAAyBA,EACzBF,mBAAoBA,EACpBG,+BAAgCA,IAxFlCyB,eAACC,WAAQ,CAAAC,SAAA,CACPJ,cAAA,OAAKK,UAAU,qBAAoBD,UAC/BpC,GACAgC,cAACM,IAAW,CACVC,MAAO5B,EAAE6B,aACTC,KAAM,CAAC,CAAEF,MAAO5B,EAAE,gBAAkB,CAAE4B,MAAO5B,EAAE6B,mBAkBrDN,eAAA,OAAKG,UAAU,gBAAeD,SAAA,CAC3BX,sBAAsBzB,GACrBgC,cAACU,IAAG,CAAAN,SACgB,QADhBxC,EACDmB,EAAMW,mBAAW,IAAA9B,OAAA,EAAjBA,EAAmB+C,KAAI,SAACC,EAAMC,GAAW,IAADC,EACvC,OACEd,cAACe,IAAG,CAAAX,SACFJ,cAACgB,IAAe,CACdC,MAAOlB,EAAOc,GACdK,UAAS,GAAAC,OAAKxC,EAAEiC,EAAKL,QACrBa,KACER,EAAKQ,KACHpB,cAACqB,IAAI,CACHC,cAAc,0BACdC,SAAS,KAAInB,SAEZQ,EAAKQ,OAGRpB,cAACqB,IAAI,CACHC,cAAc,0BACdC,SAAS,KAAInB,SACd,cAKLoB,YACEzC,EAAMa,iBACJI,cAACyB,IAAQ,CACPC,GAAI,CAAEC,QAAS,WACfC,UAAU,OACVC,OAAQ,GACRC,MAAO,GACPzB,UAAU,oBAGZL,cAAA,MAAIK,UAAU,kBAAiBD,SACX,QADWU,EAC5BF,EAAKmB,oBAAY,IAAAjB,IAAIF,EAAKoB,iBAU7ChC,cAACiC,UAAK,CACJnE,iBAAkBA,EAClBE,WAAYA,EACZE,qBAAsBA,EACtBM,wBAAyBA,EACzBD,oBAAqBA,EACrBD,mBAAoBA,EACpBG,+BAAgCA,EAChCC,yBAA0BA,Y,iCC/IpC,4FAsDejB,UA5CF,SAAHC,GAKH,IAADwE,EAAAjE,EAAAP,EAJJQ,4BAAoB,IAAAD,EAAG,GAAEA,EAAAI,EAAAX,EACzBY,0BAAkB,IAAAD,GAAQA,EAC1BE,EAAmBb,EAAnBa,oBACAC,EAAuBd,EAAvBc,wBAGMK,GADQD,cAAND,EACSG,eACXC,EAAQC,aAAY,SAACC,GAAK,OAAKA,EAAMC,gBAY3C,OANAK,qBAAU,YACkB,IAAtBR,EAAM0B,KAAKd,SAAkBZ,EAAMoD,WAAatC,kBAClDhB,EAASuD,sBAAY,OAEtB,CAACvD,EAAUE,EAAM0B,KAAKd,SAGvBK,cAACG,WAAQ,CAAAC,SACPJ,cAACqC,IAAM,CACLC,MAAOC,IACPC,aACGlE,EAIGE,EAHAO,EAAM0D,aAAaC,QACjB,SAACC,GAAE,OAAKA,EAAGC,QAAUpE,KAI7BqE,QAASvE,EAETwE,SAvBgB,SAACC,GACrB,OAAOxE,EAAoBwE,EAAG7E,IAuB1B8E,QAASjE,EAAM0D,aACfpC,UAAW4C,IAAW,eAAgB,CACpC,aAAyC,QAAT,QAAlBf,EAAAnD,EAAMmE,oBAAY,IAAAhB,OAAA,EAAlBA,EAAoBiB,MAEpCC,gBAAgB,e,+GCoETpC,IA5GS,SAAHtD,GAed,IAdL0D,EAAI1D,EAAJ0D,KACAH,EAAKvD,EAALuD,MACAoC,EAAS3F,EAAT2F,UACAC,EAAK5F,EAAL4F,MACA9B,EAAW9D,EAAX8D,YACAN,EAASxD,EAATwD,UACAb,EAAS3C,EAAT2C,UACAkD,EAAc7F,EAAd6F,eAAcC,EAAA9F,EACd+F,sBAAc,IAAAD,EAAG,GAAEA,EAAAE,EAAAhG,EACnBiG,kBAAU,IAAAD,EAAG,GAAEA,EACfE,EAAWlG,EAAXkG,YAAWC,EAAAnG,EACXoG,kBAAU,IAAAD,GAAQA,EAAAE,EAAArG,EAClBsG,iBAAS,IAAAD,EAAG,GAAEA,EAAAE,EAAAvG,EACdwG,kBAAU,IAAAD,GAAQA,EAEZE,EAAgBL,EAAkC,MAAA3C,OAAWkC,GAAnC,YAAAlC,OAAekC,GAC/C,OACErD,cAACoE,IAAIC,wBAAA,CACHC,MAAKD,YAAA,GAAOL,IACPX,EAAY,CAAEhD,UAAW8D,EAAcI,SAAS,GAAS,IAAE,IAAAnE,SAEhEJ,cAACwE,IAAQ,CAACnE,UAAWA,EAAUD,SAC3B8D,EAuCAhE,eAACC,WAAQ,CAAAC,SAAA,CACPJ,cAAA,OAAAI,SACEJ,cAAA,KAAGsE,MAAKD,YAAA,GAAOV,GAActD,UAAU,YAAWD,SAC/Cc,MAGLlB,cAAA,OAAKK,UAAU,oDAAmDD,SAC/DoB,GAGCtB,eAACC,WAAQ,CAAAC,SAAA,CACPJ,cAAA,OAAAI,SACGoB,GAGCxB,cAAA,MACEK,UAAW4C,IAAW,YAAWwB,YAAA,CAC/B,QAASb,GACRA,EAAcA,IAEjBU,MAAKD,YAAA,CACHpD,MAAqB,OAAdsC,QAAc,IAAdA,IAAkB,WACtBE,GACHrD,SAEDkD,MAIPtD,cAAA,OACEK,UAAS,gCAAAc,OACPF,EAAK,YAAAE,OAAeF,GAAU,oBAC7Bb,SAEHJ,cAAA,OAAKK,UAAU,iBAAgBD,SAAEgB,cAxE3CpB,cAAA,OAAKK,UAAU,oDAAmDD,SAC/DoB,GAGCtB,eAACC,WAAQ,CAAAC,SAAA,CACPF,eAAA,OAAAE,SAAA,CACGoB,GAGCxB,cAAA,MACEK,UAAW4C,IAAW,YAAWwB,YAAA,CAC/B,QAASb,GACRA,EAAcA,IAEjBU,MAAKD,YAAA,CACHpD,MAAqB,OAAdsC,QAAc,IAAdA,IAAkB,WACtBE,GACHrD,SAEDkD,IAILtD,cAAA,KAAGsE,MAAKD,YAAA,GAAOV,GAActD,UAAU,YAAWD,SAC/Cc,OAGLlB,cAAA,OACEK,UAAS,gCAAAc,OACPF,EAAK,YAAAE,OAAeF,GAAU,oBAC7Bb,SAEHJ,cAAA,OAAKK,UAAU,iBAAgBD,SAAEgB,kB,mGCOpCsD,IAnDK,SAACC,GACnB,IAAQhG,EAAMC,cAAND,EAEA8B,EAA8BkE,EAA9BlE,KAAMF,EAAwBoE,EAAxBpE,MAAOqE,EAAiBD,EAAjBC,GAAIC,EAAaF,EAAbE,SAqBzB,OACE7E,cAAA,OACEK,UAAS,sCAAAc,OACPyD,GAAa,IAAPA,EAAQ,MAAAzD,OAASyD,GAAO,QAC7BxE,SAEHF,eAAA,OAAKG,UAAU,sBAAqBD,SAAA,CAClCF,eAAA,OAAKG,UAAU,SAAQD,SAAA,CACpBG,EACCP,cAAA,MAAIK,UAAU,wCAAuCD,SAAEG,IAEvD,GAEFP,cAAA,OAAKK,UAAU,6DAA4DD,SACzEF,eAAC4E,IAAU,CAAA1E,SAAA,CACTJ,cAAC+E,IAAc,CAACC,IAAI,KAAI5E,SACtBJ,cAACiF,IAAI,CAACC,GAAG,IAAG9E,SAAEzB,EAAE,YAlCrB8B,EAAKE,KAAI,SAACC,EAAMC,GACrB,IAAMsE,EAAUvE,EAAKwE,KAAOH,IAAO9E,WAC7BkF,EAAa5E,EAAKd,OAAS,IAAMkB,EACvC,OACEb,cAAC+E,IAAc,CACbC,IAAI,KAEJM,QAASD,EACThF,UAAW4C,IAAW,CAAE,gBAAiBoC,IAAcjF,SAEvDJ,cAACmF,EAAOd,wBAAA,GAAMzD,EAAKwE,KAAO,CAAEF,GAAItE,EAAKwE,MAAS,IAAE,IAAAhF,SAC7CQ,EAAKL,UALHM,cAkCPb,cAAA,OAAKK,UAAU,SAAQD,SAAU,OAARyE,QAAQ,IAARA,IAAY","file":"static/js/56.ba703191.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Table from \"./Table\"\r\nimport DropDown from \"./DropDown\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\r\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\r\nimport Icon from \"@mui/material/Icon\"\r\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\r\nimport \"./style.scss\"\r\nimport Breadcrumbs from \"@components/breadcrumbs\"\r\n\r\nimport {\r\n  storeName,\r\n  getAlwaysGrid,\r\n  getApiSummaryData,\r\n  getSummaryData,\r\n  pageTitle,\r\n  isTreeLayout\r\n} from \"./store\"\r\nimport { Skeleton } from \"@mui/material\"\r\n\r\nconst List = ({\r\n  filtersCustomAdd = {},\r\n  lookupMode = false,\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_dropdown = false,\r\n  lookupMode_isMulti = false,\r\n  lookupMode_onChange,\r\n  lookupMode_defaultValue,\r\n  lookupMode_isM2MDefValFromGrid,\r\n  lookupMode_defaultFilter\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n  const handleFilter = (event) => {\r\n    // console.log(\"handleFilter\")\r\n    setSearchTerm(event)\r\n    // debounceFn(event)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      getApiSummaryData &&\r\n      (store.dataSummary?.length === 0 ||\r\n        (!store.isLoadingSummary && getAlwaysGrid))\r\n    ) {\r\n      dispatch(getSummaryData({}))\r\n    }\r\n  }, [dispatch, store.dataSummary?.length])\r\n\r\n  const colors = [\r\n    \"primary\",\r\n    \"success\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"info\",\r\n    \"secondary\"\r\n  ]\r\n\r\n  return !lookupMode_dropdown ? (\r\n    <Fragment>\r\n      <div className=\"content-header row\">\r\n        {!lookupMode && (\r\n          <Breadcrumbs\r\n            title={t(pageTitle)}\r\n            data={[{ title: t(\"App Setting\") }, { title: t(pageTitle) }]}\r\n          />\r\n        )}\r\n        {/* <div className=\"content-header-right text-md-end col-md col-12 mb-2 \">\r\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              {t(\"Search\")}:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n      <div className=\"app-user-list\">\r\n        {getApiSummaryData && !lookupMode && (\r\n          <Row>\r\n            {store.dataSummary?.map((item, index) => {\r\n              return (\r\n                <Col>\r\n                  <StatsHorizontal\r\n                    color={colors[index]}\r\n                    statTitle={`${t(item.title)}`}\r\n                    icon={\r\n                      item.icon ? (\r\n                        <Icon\r\n                          baseClassName=\"material-icons-outlined\"\r\n                          fontSize=\"20\"\r\n                        >\r\n                          {item.icon}\r\n                        </Icon>\r\n                      ) : (\r\n                        <Icon\r\n                          baseClassName=\"material-icons-outlined\"\r\n                          fontSize=\"20\"\r\n                        >\r\n                          lightbulb\r\n                        </Icon>\r\n                      )\r\n                    }\r\n                    renderStats={\r\n                      store.isLoadingSummary ? (\r\n                        <Skeleton\r\n                          sx={{ bgcolor: \"#eef2f8\" }}\r\n                          animation=\"wave\"\r\n                          height={25}\r\n                          width={40}\r\n                          className=\"fw-bolder mb-75\"\r\n                        />\r\n                      ) : (\r\n                        <h3 className=\"fw-bolder mb-75\">\r\n                          {item.count_format ?? item.count}\r\n                        </h3>\r\n                      )\r\n                    }\r\n                  />\r\n                </Col>\r\n              )\r\n            })}\r\n          </Row>\r\n        )}\r\n        <Table\r\n          filtersCustomAdd={filtersCustomAdd}\r\n          lookupMode={lookupMode}\r\n          lookupMode_fieldName={lookupMode_fieldName}\r\n          lookupMode_defaultValue={lookupMode_defaultValue}\r\n          lookupMode_onChange={lookupMode_onChange}\r\n          lookupMode_isMulti={lookupMode_isMulti}\r\n          lookupMode_isM2MDefValFromGrid={lookupMode_isM2MDefValFromGrid}\r\n          lookupMode_defaultFilter={lookupMode_defaultFilter}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  ) : (\r\n    <DropDown\r\n      lookupMode_fieldName={lookupMode_fieldName}\r\n      lookupMode_onChange={lookupMode_onChange}\r\n      lookupMode_defaultValue={lookupMode_defaultValue}\r\n      lookupMode_isMulti={lookupMode_isMulti}\r\n      lookupMode_isM2MDefValFromGrid={lookupMode_isM2MDefValFromGrid}\r\n    />\r\n  )\r\n}\r\n\r\nexport default List\r\n","import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport \"./style.scss\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport classnames from \"classnames\"\r\nimport Select from \"react-select\"\r\n\r\nimport { storeName, getDataList, getAlwaysGrid } from \"./store\"\r\n\r\nconst List = ({\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_isMulti = false,\r\n  lookupMode_onChange,\r\n  lookupMode_defaultValue\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const onChangeInput = (e) => {\r\n    return lookupMode_onChange(e, lookupMode_fieldName)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\r\n      dispatch(getDataList({}))\r\n    }\r\n  }, [dispatch, store.data.length])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Select\r\n        theme={selectThemeColors}\r\n        defaultValue={\r\n          !lookupMode_isMulti\r\n            ? store.dataDropdown.filter(\r\n                (el) => el.value === lookupMode_defaultValue\r\n              )\r\n            : lookupMode_defaultValue\r\n        }\r\n        isMulti={lookupMode_isMulti}\r\n        // onChange={lookupMode_onChange}\r\n        onChange={onChangeInput}\r\n        options={store.dataDropdown}\r\n        className={classnames(\"react-select\", {\r\n          \"is-invalid\": store.selectedData?.id === null\r\n        })}\r\n        classNamePrefix=\"select\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n","// ** Third Party Components\r\nimport PropTypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardBody } from \"reactstrap\"\r\nimport { Fragment } from \"react\"\r\n\r\nconst StatsHorizontal = ({\r\n  icon,\r\n  color,\r\n  cardColor,\r\n  stats,\r\n  renderStats,\r\n  statTitle,\r\n  className,\r\n  countTextColor,\r\n  countTextStyle = {},\r\n  titleStyle = {},\r\n  statsMargin,\r\n  solidColor = false,\r\n  cardStyle = {},\r\n  titleOnTop = false\r\n}) => {\r\n  const cardColorFix = !solidColor ? `bg-light-${cardColor}` : `bg-${cardColor}`\r\n  return (\r\n    <Card\r\n      style={{ ...cardStyle }}\r\n      {...(cardColor ? { className: cardColorFix, inverse: true } : {})}\r\n    >\r\n      <CardBody className={className}>\r\n        {!titleOnTop ? (\r\n          <div className=\"d-flex justify-content-between align-items-center\">\r\n            {renderStats ? (\r\n              renderStats\r\n            ) : (\r\n              <Fragment>\r\n                <div>\r\n                  {renderStats ? (\r\n                    renderStats\r\n                  ) : (\r\n                    <h3\r\n                      className={classnames(\"fw-bolder\", {\r\n                        \"mb-0\": !statsMargin,\r\n                        [statsMargin]: statsMargin\r\n                      })}\r\n                      style={{\r\n                        color: countTextColor ?? \"#5e5873\",\r\n                        ...countTextStyle\r\n                      }}\r\n                    >\r\n                      {stats}\r\n                    </h3>\r\n                  )}\r\n\r\n                  <p style={{ ...titleStyle }} className=\"card-text\">\r\n                    {statTitle}\r\n                  </p>\r\n                </div>\r\n                <div\r\n                  className={`avatar avatar-stats p-50 m-0 ${\r\n                    color ? `bg-light-${color}` : \"bg-light-primary\"\r\n                  }`}\r\n                >\r\n                  <div className=\"avatar-content\">{icon}</div>\r\n                </div>\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <Fragment>\r\n            <div>\r\n              <p style={{ ...titleStyle }} className=\"card-text\">\r\n                {statTitle}\r\n              </p>\r\n            </div>\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n              {renderStats ? (\r\n                renderStats\r\n              ) : (\r\n                <Fragment>\r\n                  <div>\r\n                    {renderStats ? (\r\n                      renderStats\r\n                    ) : (\r\n                      <h3\r\n                        className={classnames(\"fw-bolder\", {\r\n                          \"mb-0\": !statsMargin,\r\n                          [statsMargin]: statsMargin\r\n                        })}\r\n                        style={{\r\n                          color: countTextColor ?? \"#5e5873\",\r\n                          ...countTextStyle\r\n                        }}\r\n                      >\r\n                        {stats}\r\n                      </h3>\r\n                    )}\r\n                  </div>\r\n                  <div\r\n                    className={`avatar avatar-stats p-50 m-0 ${\r\n                      color ? `bg-light-${color}` : \"bg-light-primary\"\r\n                    }`}\r\n                  >\r\n                    <div className=\"avatar-content\">{icon}</div>\r\n                  </div>\r\n                </Fragment>\r\n              )}\r\n            </div>\r\n          </Fragment>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default StatsHorizontal\r\n\r\n// ** PropTypes\r\nStatsHorizontal.propTypes = {\r\n  stats: PropTypes.string,\r\n  renderStats: PropTypes.any,\r\n  className: PropTypes.string,\r\n  icon: PropTypes.element,\r\n  color: PropTypes.string,\r\n  cardColor: PropTypes.string,\r\n  statTitle: PropTypes.string,\r\n  statsMargin: PropTypes.oneOf([\r\n    \"mb-0\",\r\n    \"mb-25\",\r\n    \"mb-50\",\r\n    \"mb-75\",\r\n    \"mb-1\",\r\n    \"mb-2\",\r\n    \"mb-3\",\r\n    \"mb-4\",\r\n    \"mb-5\"\r\n  ])\r\n}\r\n","// ** React Imports\r\nimport { Fragment } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n// ** Third Party Components\r\nimport Proptypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from \"react-feather\"\r\nimport { useTranslation } from \"react-i18next\"\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from \"reactstrap\"\r\n\r\nconst BreadCrumbs = (props) => {\r\n  const { t } = useTranslation()\r\n  // ** Props\r\n  const { data, title, mb, subtitle } = props\r\n\r\n  const renderBreadCrumbs = () => {\r\n    return data.map((item, index) => {\r\n      const Wrapper = item.link ? Link : Fragment\r\n      const isLastItem = data.length - 1 === index\r\n      return (\r\n        <BreadcrumbItem\r\n          tag=\"li\"\r\n          key={index}\r\n          active={!isLastItem}\r\n          className={classnames({ \"text-primary\": !isLastItem })}\r\n        >\r\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\r\n            {item.title}\r\n          </Wrapper>\r\n        </BreadcrumbItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`content-header-left col-md-9 col-8 ${\r\n        mb || mb === 0 ? `mb-${mb}` : \"mb-2\"\r\n      }`}\r\n    >\r\n      <div className=\"row breadcrumbs-top\">\r\n        <div className=\"col-12\">\r\n          {title ? (\r\n            <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\r\n            <Breadcrumb>\r\n              <BreadcrumbItem tag=\"li\">\r\n                <Link to=\"/\">{t(\"Home\")}</Link>\r\n              </BreadcrumbItem>\r\n              {renderBreadCrumbs()}\r\n            </Breadcrumb>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-12\">{subtitle ?? \"\"}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  data: Proptypes.arrayOf(\r\n    Proptypes.shape({\r\n      link: Proptypes.string,\r\n      title: Proptypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n"],"sourceRoot":""}