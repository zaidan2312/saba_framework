{"version":3,"sources":["views/apps/user/modal/index.js","../../src/mounts.js","../../src/index.js"],"names":["withReactContent","Swal","ModalAddEdit","show","setShow","detailPage","useState","unitOptionsSelected","setUnitOptionsSelected","idRole","setIdRole","employeeOptionsSelected","setEmployeeOptionsSelected","setFormEdited","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","users","storeUnit","units","storeRole","roles","colors","useContext","ThemeColors","selectedUser","setSelectedUser","useForm","defaultValues","username","name","phone","reset","control","setError","handleSubmit","errors","formState","Loader","className","useEffect","data","length","isLoading","getUnits","getData","data_employee","isLoading_employee","getDataEmployee","id_employee","filter","el","map","item","value","label","FirstName","LastName","id_role","isOpen","toggle","blocking","isLoadingAddEdit","isLoadingDetail","loader","onSubmit","unitOptionsSelect","member_of","formEdited","JSON","stringify","countChanges","Object","values","every","field","updateUser","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getUser","error","payload","danger","key","type","icon","md","xs","for","defaultValue","render","placeholder","invalid","disabled","email","theme","selectThemeColors","onChange","options","classnames","classNamePrefix","isClearable","e","Array","isArray","x","closeMenuOnSelect","isMulti","outline","onClick","mounts","getter","swal","noop","extractReactParams","reactParams","otherParams","mountKeys","mount","React","domElement","ReactDOM","unrender","_main","this","__mountedDomElements","__params","superDidOpen","superDidDestroy","didOpen","popup","didDestroy","update","argsToParams","args","params","forEach","ParentSwal"],"mappings":"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","file":"static/js/75.709e9ddf.chunk.js","sourcesContent":["import { useState, Fragment, useContext, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  CardBody,\n  Button,\n  Badge,\n  Modal,\n  Input,\n  Label,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport Moment from \"moment\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\n\nimport Swal from \"sweetalert2\"\nimport Select from \"react-select\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { updateUser, getUser, getDataEmployee } from \"../store\"\nimport { getUnits } from \"../../unit/store\"\nimport { getData } from \"../../roles-permissions/store/role\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst MySwal = withReactContent(Swal)\n\nconst ModalAddEdit = ({ show, setShow, detailPage }) => {\n  const [unitOptions, setUnitOptions] = useState([])\n  const [unitOptionsSelected, setUnitOptionsSelected] = useState([])\n  const [idRole, setIdRole] = useState(null)\n  const [employeeOptionsSelected, setEmployeeOptionsSelected] = useState([])\n  const [formEdited, setFormEdited] = useState(false)\n  const { t } = useTranslation()\n  // const [id, setId] = useState(null)\n  let { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state.users)\n  const storeUnit = useSelector((state) => state.units)\n  const storeRole = useSelector((state) => state.roles)\n  const { colors } = useContext(ThemeColors)\n  const [selectedUser, setSelectedUser] = useState(store.selectedUser)\n  const {\n    reset,\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({\n    defaultValues: {\n      username: selectedUser?.username,\n      name: selectedUser?.name,\n      phone: selectedUser?.phone ?? \"\"\n    }\n  })\n\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n        <CardText className=\"mb-0 mt-1 text-white\">\n          {t(\"Please Wait\")}...\n        </CardText>\n      </Fragment>\n    )\n  }\n\n  const handleChangeUnit = (e) => {\n    // console.log(e)\n    setUnitOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\n    // console.log(unitOptionsSelected)\n  }\n\n  const handleChangeEmployee = (e) => {\n    // console.log(e)\n    setEmployeeOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\n    // console.log(unitOptionsSelected)\n  }\n\n  const countChanges = (data) => {\n    // console.log(data)\n\n    const unitOptionsSelect =\n      selectedUser.member_of !== null\n        ? selectedUser?.member_of.map((item) => ({\n            value: item.id,\n            label: item.name\n          }))\n        : []\n\n    // console.log(unitOptionsSelect)\n    // console.log(unitOptionsSelected)\n    const formEdited =\n      selectedUser.name !== data.name ||\n      selectedUser.username !== data.username ||\n      (selectedUser.phone ?? \"\") !== data.phone ||\n      JSON.stringify(unitOptionsSelect) !==\n        JSON.stringify(unitOptionsSelected) ||\n      idRole !== selectedUser.id_role\n    setFormEdited(true)\n    return formEdited\n  }\n\n  const onSubmit = (data) => {\n    if (countChanges(data)) {\n      // console.log(countChanges(data))\n      if (\n        Object.values(data).every((field) => {\n          return field.length > 0 || field === \"\"\n        })\n      ) {\n        if (data.phone === \"\") {\n          delete data.phone\n        }\n\n        data[\"id\"] = id ?? selectedUser.id\n        data[\"id_role\"] = idRole\n        data[\"id_employee\"] = employeeOptionsSelected?.id\n        data[\"member_of\"] = unitOptionsSelected\n        dispatch(updateUser(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated Data\")}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getUser(id))\n            }\n\n            // setUnitOptionsSelected(\n            //   selectedUser.member_of.map((item) => ({\n            //     value: item.id,\n            //     label: item.name\n            //   }))\n            // )\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(JSON.stringify(res.payload), {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const handleReset = () => {\n    reset({\n      username: selectedUser?.username,\n      name: selectedUser?.name\n    })\n  }\n\n  // ** Get data on mount\n  useEffect(() => {\n    // const { id } = useParams()\n    // console.log(this.props.match.params.id)\n    // if (!id) {\n    //   id = idRow\n    // }\n    setSelectedUser(store.selectedUser)\n    if (storeUnit.data.length === 0 && !storeUnit.isLoading) {\n      dispatch(getUnits())\n      setSelectedUser(store.selectedUser)\n    }\n\n    if (storeRole?.data.length === 0 && !storeRole.isLoading) {\n      dispatch(getData())\n    }\n\n    if (store?.data_employee.length === 0 && !store.isLoading_employee) {\n      dispatch(\n        getDataEmployee({\n          length: 200\n        })\n      )\n      if (store.data_employee && selectedUser?.id_employee) {\n        setEmployeeOptionsSelected(\n          store.data_employee\n            .filter((el) => el.id === selectedUser?.id_employee)\n            .map((item) => ({\n              value: item.id,\n              label: `${item.FirstName} ${item?.LastName ?? \"\"}`\n            }))\n        )\n      }\n    }\n\n    // console.log(storeUnit.data)\n    // console.log(unitOptions)\n    // console.log(unitOptionsSelected)\n\n    setIdRole(selectedUser?.id_role)\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => setShow(!show)}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={\n          (store.isLoadingAddEdit || store.isLoadingDetail) &&\n          !store.selectedUser\n        }\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => setShow(!show)}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h1 className=\"mb-1\">\n              {t(\"Edit\")} {t(\"User Information\")}\n            </h1>\n            <p>{t(\"Updating user details will receive a privacy audit.\")}</p>\n          </div>\n          <Form onSubmit={handleSubmit(onSubmit)}>\n            <Row className=\"gy-1 pt-75\">\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"name\">\n                  {t(\"Full Name\")}\n                </Label>\n                <Controller\n                  defaultValue=\"\"\n                  control={control}\n                  id=\"name\"\n                  name=\"name\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      id=\"name\"\n                      placeholder=\"John\"\n                      invalid={errors.name && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"username\">\n                  {t(\"Username\")}:\n                </Label>\n                <Controller\n                  defaultValue=\"\"\n                  control={control}\n                  id=\"username\"\n                  name=\"username\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      id=\"username\"\n                      placeholder=\"john.doe.007\"\n                      invalid={errors.username && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"email\">\n                  {t(\"Email\")}:\n                </Label>\n                <Input\n                  type=\"email\"\n                  id=\"email\"\n                  disabled\n                  defaultValue={selectedUser?.email}\n                  placeholder=\"example@domain.com\"\n                />\n              </Col>\n\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"phone\">\n                  {t(\"Contact\")}\n                </Label>\n                <Controller\n                  defaultValue=\"\"\n                  control={control}\n                  id=\"phone\"\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      value={selectedUser?.phone || \"\"}\n                      id=\"phone\"\n                      placeholder=\"+62 813 940 10XX X\"\n                    />\n                  )}\n                />\n              </Col>\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"id_role\">\n                  {t(\"Role\")}\n                </Label>\n                <Select\n                  id=\"id_role\"\n                  theme={selectThemeColors}\n                  defaultValue={storeRole.data\n                    .filter((el) => el.id === selectedUser?.id_role)\n                    .map((item) => ({\n                      value: item.id,\n                      label: item.name\n                    }))}\n                  onChange={(data) => {\n                    setIdRole(data.value)\n                  }}\n                  options={storeRole.data.map((item) => ({\n                    value: item.id,\n                    label: item.name\n                  }))}\n                  className={classnames(\"react-select\", {\n                    \"is-invalid\": idRole === null\n                  })}\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"id_employee\">\n                  {t(\"Employee\")}\n                </Label>\n                <Select\n                  id=\"id_employee\"\n                  isClearable={true}\n                  isLoading={store.isLoading_employee}\n                  theme={selectThemeColors}\n                  defaultValue={\n                    store.data_employee\n                      .filter((el) => el.id === selectedUser?.id_employee)\n                      .map((item) => ({\n                        value: item.id,\n                        label: `${item.FirstName} ${item?.LastName ?? \"\"}`\n                      })) ?? \"\"\n                  }\n                  onChange={(data) => {\n                    handleChangeEmployee(data)\n                  }}\n                  options={store.data_employee.map((item) => ({\n                    value: item.id,\n                    label: `${item.FirstName} ${item?.LastName ?? \"\"}`\n                  }))}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"member_of\">\n                  {t(\"Unit\")}\n                </Label>\n                <Select\n                  id=\"member_of\"\n                  isClearable={false}\n                  theme={selectThemeColors}\n                  closeMenuOnSelect={false}\n                  defaultValue={\n                    store.selectedUser?.member_of\n                      ? store.selectedUser?.member_of.map((item) => ({\n                          value: item.id,\n                          label: item.name\n                        }))\n                      : []\n                  }\n                  onChange={(data) => {\n                    handleChangeUnit(data)\n                  }}\n                  isMulti\n                  options={storeUnit.data\n                    .map((item) => ({\n                      value: item.id,\n                      label: item.name\n                    }))\n                    .filter((x) => x.value !== \"\")}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n","export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n"],"sourceRoot":""}