{"version":3,"sources":["views/apps/permission_menu/modal/index.js","views/apps/permission_menu/Table.js","../../src/mounts.js","../../src/index.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","t","useTranslation","id","useParams","colors","useContext","ThemeColors","useState","setLoadingText","dispatch","useDispatch","allStore","useSelector","state","dynamicComponents","setDynamicComponents","formDatas","formDatasError","setFormDatasError","useForm","setError","control","handleSubmit","handleReset","errors","resetSelectedData","handleChangeInputs","value","fieldName","isMulti","index","indexOf","splice","push","useEffect","componentsImport","dynamicFormRelation","dynamicForm","filter","el","type","i","path_name","replaceAll","MyComponent","lazy","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","storeName","data","map","x","selectedData","lookupMode_isM2MDefValFromGrid","length","isOpen","toggle","className","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","onSubmit","storeData","sortedObject","key","JSON","stringify","countChanges","Object","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","icon","postData","errorFields","assign","item","includes","md","xs","for","fieldLabel","fallback","textAlign","outline","onClick","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","CustomHeader","store","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","searchTerm","selectedRow","handleDeleteSelected","handleFiltersChange","lookupMode_defaultFilter","ability","AbilityContext","allState","invoices","getUserData","isLoading","getDataListPermission","xl","htmlFor","onChange","width","can","sessionStorage","getItem","e","target","name","title","List","filtersCustomAdd","storeApp","apps_app","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","selectedRows","setSelectedRows","filtersCustom","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","showModal","setShowModal","handleEdit","rowData","detailFromGrid","setDataById","getDataListApp","handleCloseModal","revivalBack","neutralizeBack","handleDelete","a","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","countSelectedCopy","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","columns","dynamicColumns","column","columnName","sortField","center","sortable","selector","row","cell","dataFormat","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","disabledAction","tableColumns","useMemo","sx","bgcolor","dark","light","animation","height","getAlwaysGrid","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","count","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","keys","some","k","Array","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","par_name","mounts","getter","swal","noop","extractReactParams","reactParams","otherParams","mountKeys","mount","React","render","domElement","ReactDOM","unrender","_main","this","__mountedDomElements","__params","superDidOpen","superDidDestroy","didOpen","popup","didDestroy","update","argsToParams","args","params","forEach","ParentSwal"],"mappings":"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","file":"static/js/18.e865667a.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  lazy,\n  Suspense\n} from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors, sortedObject } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport store, {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById,\n  dynamicForm\n} from \"../store\"\nimport { Loader } from \"@src/shared/CommonComponents\"\nimport { getDataList as getDataListApp } from \"../../app/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport classnames from \"classnames\"\n// import List from \"../../menu\"\n// import {List as PermissionComponent} from \"../../permission\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const dispatch = useDispatch()\n  const allStore = useSelector((state) => state)\n  const [dynamicComponents, setDynamicComponents] = useState({})\n  const [formDatas, setFormDatas] = useState({})\n  const [formDatasError, setFormDatasError] = useState({})\n\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(allStore[storeName].selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = () => {\n    if (countChanges(formDatas)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = () => {\n    if (\n      Object.values(formDatas).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(formDatas)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n          if (detailPage) {\n            dispatch(getDataById(id))\n          }\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      // console.log(\"ERORR\")\n      // console.log(formDatas)\n      let errorFields = Object.assign({}, formDatasError)\n      for (let key in formDatas) {\n        // console.log(key, formDatas[key])\n        if (formDatas[key] === null || formDatas[key]?.length === 0) {\n          errorFields[key] = true\n        }\n      }\n      // console.log(errorFields)\n      setFormDatasError(errorFields)\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\n    // console.log(value, fieldName, isMulti)\n    if (isMulti) {\n      if (formDatas[fieldName]) {\n        const index = formDatas[fieldName].indexOf(value)\n        if (index !== -1) {\n          formDatas[fieldName].splice(index, 1)\n        } else {\n          formDatas[fieldName].push(value)\n        }\n      } else {\n        formDatas[fieldName] = [value]\n      }\n    } else {\n      formDatas[fieldName] = value\n    }\n    setFormDatasError({ ...formDatasError, [fieldName]: false })\n  }\n\n  useEffect(() => {\n    // DYNAMIC IMPORT COMPONENTS\n    let componentsImport = {}\n    const dynamicFormRelation = dynamicForm.filter(function (el) {\n      return el.type === \"dropdown\" || el.type === \"table\"\n    })\n\n    for (let i = 0; i < dynamicFormRelation.length; i++) {\n      const fieldName = dynamicFormRelation[i][\"fieldName\"]\n      const path_name = dynamicFormRelation[i][\"fieldName\"].replaceAll(\n        \"id_\",\n        \"\"\n      )\n\n      formDatas[fieldName] = null\n      formDatasError[fieldName] = false\n      const MyComponent = lazy(() => import(`../../${path_name}`))\n      componentsImport[`${path_name}_comp`] = (\n        <MyComponent\n          lookupMode={true}\n          lookupMode_fieldName={fieldName}\n          lookupMode_dropdown={dynamicFormRelation[i][\"type\"] === \"dropdown\"}\n          lookupMode_isMulti={dynamicFormRelation[i].isMultiSelection ?? false}\n          lookupMode_onChange={handleChangeInputs}\n          lookupMode_defaultValue={\n            dynamicFormRelation[i]?.isM2MDefValFromGrid\n              ? allStore[storeName].data.map((x) => x[fieldName])\n              : allStore[storeName]?.selectedData\n              ? allStore[storeName].selectedData[fieldName]\n              : \"\"\n          }\n          lookupMode_isM2MDefValFromGrid={\n            dynamicFormRelation[i]?.isM2MDefValFromGrid ?? false\n          }\n        />\n      )\n    }\n\n    setDynamicComponents(componentsImport)\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={\n          allStore[storeName].isLoadingAddEdit ||\n          allStore[storeName].isLoadingDetail\n        }\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              {dynamicForm.map((item, index) => {\n                if ([\"dropdown\", \"table\"].includes(item.type)) {\n                  const path_name = item.fieldName.replaceAll(\"id_\", \"\")\n                  return (\n                    <Col key={path_name} md={12} xs={12}>\n                      <Label className=\"form-label\" for={item.fieldName}>\n                        {t(item.fieldLabel ?? \"\")}\n                      </Label>\n                      <Suspense fallback={<div>Loading...</div>}>\n                        <div\n                          className={\n                            !formDatasError[item.fieldName]\n                              ? \"dynamicForm_input\"\n                              : \"dynamicForm_input dynamicForm_input_invalid\"\n                          }\n                        >\n                          {dynamicComponents[`${path_name}_comp`]}\n                          {item?.isM2MDefValFromGrid &&\n                            formDatas[item.fieldName] && (\n                              <div\n                                style={{ textAlign: \"right\" }}\n                                className=\"text-primary\"\n                              >\n                                {formDatas[item.fieldName]?.length}{\" \"}\n                                {t(item.fieldLabel)} {t(\"Selected\")}\n                              </div>\n                            )}\n                        </div>\n                      </Suspense>\n                    </Col>\n                  )\n                }\n              })}\n\n              {/* <Col md={12} xs={12}>\n                <List lookupMode={true} lookupMode_isMulti={true} />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"id_permission\">\n                  {t(\"Permission\")}\n                </Label>\n                <Suspense fallback={<div>Loading...</div>}>\n                  {dynamicComponents[\"permission_comp\"]}\n                </Suspense>\n              </Col> */}\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef\n} from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  deleteData,\n  deleteSelectedRowData,\n  disabledAction\n} from \"./store\"\n\nimport { getDataList as getDataListApp } from \"../app/store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\n\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Button,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  CardText\n} from \"reactstrap\"\n\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\n\nimport { getDataList as getDataListPermission } from \"../permission/store\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\n\nconst MySwal = withReactContent(Swal)\n\n// ** Bootstrap Checkbox Component\nconst BootstrapCheckbox = forwardRef((props, ref) => (\n  <div className=\"form-check\">\n    <Input type=\"checkbox\" ref={ref} {...props} />\n  </div>\n))\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  toggleSidebar,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm,\n  selectedRow,\n  handleDeleteSelected,\n  handleFiltersChange,\n  lookupMode,\n  lookupMode_defaultFilter\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const dispatch = useDispatch()\n  const storeInvoice = useSelector((state) => state.invoices)\n  const userData = getUserData()\n\n  ////FILTER\n  const allState = useSelector((state) => state)\n\n  useEffect(() => {\n    if (\n      allState[\"apps_permission\"].data.length === 0 ||\n      !allState[\"apps_permission\"].isLoading\n    ) {\n      // console.log(dispatch({ type: \"api/permission/getDataList\", payload: {} }))\n      dispatch(getDataListPermission({}))\n    }\n  }, [dispatch])\n\n  return (\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\n      <Row>\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\n          {!lookupMode && (\n            <div className=\"d-flex align-items-center w-100\">\n              <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n              <Input\n                className=\"mx-50\"\n                type=\"select\"\n                id=\"rows-per-page\"\n                value={rowsPerPage}\n                onChange={handlePerPage}\n                style={{ width: \"5rem\" }}\n              >\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n              </Input>\n              <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n            </div>\n          )}\n        </Col>\n        <Col\n          xl=\"8\"\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\n        >\n          {selectedRow?.length > 0 &&\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) ? (\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n              <Button\n                className=\"delete-users\"\n                color=\"danger\"\n                onClick={handleDeleteSelected}\n              >\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\n              </Button>\n            </div>\n          ) : null}\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n          {!lookupMode_defaultFilter ? (\n            <div className=\"mt-50 width-200 me-1 mt-sm-0 mt-1\">\n              <Input\n                type=\"select\"\n                name=\"select\"\n                // value={role}\n                onChange={(e) =>\n                  handleFiltersChange(e.target.value, \"filter_id_permission\")\n                }\n              >\n                <option value=\"\">\n                  {t(\"Select\")} {t(\"Permission\")}\n                </option>\n                {allState[\"apps_permission\"].data.map((item, index) => (\n                  <option key={item.id} value={item.id}>\n                    {item.title}\n                  </option>\n                ))}\n              </Input>\n            </div>\n          ) : null}\n          <div className=\"d-flex align-items-center table-header-actions\">\n            {ability.can(\n              \"post\",\n              sessionStorage.getItem(\"current_page_perm\")\n            ) ? (\n              <Button\n                className=\"add-new-user\"\n                color=\"primary\"\n                onClick={toggleSidebar}\n                // onClick={handleAdd}\n              >\n                {t(\"Add New\")} {t(pageTitle)}\n              </Button>\n            ) : null}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst List = ({\n  filtersCustomAdd,\n  lookupMode,\n  lookupMode_fieldName,\n  lookupMode_dropdown,\n  lookupMode_isMulti,\n  lookupMode_onChange,\n  lookupMode_defaultValue,\n  lookupMode_isM2MDefValFromGrid,\n  lookupMode_defaultFilter\n}) => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const storeApp = useSelector((state) => state.apps_app)\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const { colors } = useContext(ThemeColors)\n\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [selectedRows, setSelectedRows] = useState([])\n\n  const [filtersCustom, setFiltersCustom] = useState(\n    lookupMode_defaultFilter ?? {}\n  )\n\n  const [toggleCleared, setToggleCleared] = useState(false)\n\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n\n  const handleEdit = (rowData) => {\n    setFormState(\"edit\")\n    if (!detailFromGrid) {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(getDataById(rowData.id)).then((res) => {\n        if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    } else {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(setDataById(rowData)).then(() => {\n        if (storeApp.data.length === 0 && !storeApp.isLoading) {\n          dispatch(getDataListApp({})).then((res) => {\n            setLoading(false)\n            setShowModal(true)\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    // console.log(\"here\")\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const handleDeleteSelected = async () => {\n    const countSelectedCopy = selectedRows.length\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\n        \"selected data. Deleted data cannot be recovered\"\n      )}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\n        pageTitle\n      )}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\n      )\n      setLoading(true)\n      const values = selectedRows.map((a) => a.id)\n      // console.log(values)\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setSelectedRows([])\n          setToggleCleared(!toggleCleared)\n          setLoading(false)\n          toast.success(\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\n            {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            }\n          )\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /////PAGINATION SERVERSIDE\n  const handlePagination = (page) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage,\n        ...filtersCustom\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  const handleDebounceFn = (inputValue) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        search: inputValue,\n        sort,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\n\n  const handleFilter = (event) => {\n    setSearchTerm(event)\n    debounceFn(event)\n  }\n\n  const handleFiltersChange = (value, par_name) => {\n    // console.log(event)\n    // console.log(par_name)\n    filtersCustom[par_name] = parseInt(value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const handleRowSelected = useCallback((state) => {\n    setSelectedRows(state.selectedRows)\n  }, [])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const renderCell = (row, column) => {\n    const field = row[column.fieldName]\n    const dataFormat = column.dataFormat\n    if (dataFormat) {\n      if (dataFormat.includes(\":\")) {\n        const columnTypeFormat = dataFormat.split(\":\")\n        const columnType = columnTypeFormat[0]\n        const columnFormat = columnTypeFormat[1]\n        let columnFormated = row[column.fieldName]\n        if (columnType === \"date\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        if (columnType === \"datetime\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        return columnFormated\n      }\n    }\n    return row[column.fieldName]\n  }\n\n  const columns = [\n    ...store.dynamicColumns.map((column) => ({\n      name: column.columnName,\n      sortField: column.fieldName,\n      center: false,\n      sortable: true,\n      selector: (row) => row[column.fieldName],\n      cell: (row) => renderCell(row, column)\n    })),\n    // {\n    //   name: t(\"App Name\"),\n    //   sortField: \"attributes\",\n    //   center: false,\n    //   sortable: true,\n    //   selector: (row) => row.attributes,\n    //   cell: (row) => row.attributes\n    // },\n    {\n      name: t(\"Actions\"),\n      center: true,\n      width: \"140px\",\n      cell: (row) => (\n        <GlobalActionsTable\n          disabledAction={disabledAction}\n          row={row}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n        />\n      )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: t(column.name),\n            ...column,\n            sortable: false,\n            cell: (row) =>\n              column.name === \"Actions\" ? (\n                <>\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    className=\"ms-2 me-1\"\n                    width={30}\n                    height={40}\n                  />\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    width={30}\n                    height={40}\n                  />\n                </>\n              ) : (\n                <Skeleton\n                  sx={{ bgcolor: colors.dark.light }}\n                  animation=\"wave\"\n                  width=\"100%\"\n                  height={40}\n                />\n              )\n          }))\n        : columns.map((column) => ({\n            name: t(column.name),\n            ...column\n          })),\n    [store.isLoading, columns]\n  )\n\n  const dataToRender = () => {\n    const filters = {\n      search: searchTerm\n    }\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  useEffect(() => {\n    if (\n      store.data.length === 0 ||\n      (!store.isLoading && getAlwaysGrid) ||\n      lookupMode_defaultFilter\n    ) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(\n        getDataList({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage,\n          ...filtersCustom\n        })\n      )\n    }\n    // console.log(lookupMode_defaultFilter)\n  }, [dispatch, sort_dir, sort, currentPage, filtersCustom])\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              responsive\n              pagination\n              paginationServer\n              paginationTotalRows={store.total}\n              paginationComponent={CustomPagination}\n              selectableRows\n              onSelectedRowsChange={handleRowSelected}\n              selectableRowsHighlight\n              // onRowClicked={handleRowSelected}\n              clearSelectedRows={toggleCleared}\n              selectableRowsComponent={BootstrapCheckbox}\n              noDataComponent={<NoDataDisplay />}\n              // fixedHeader\n              // fixedHeaderScrollHeight=\"600px\"\n              style={{ \"min-height\": \"400px\" }}\n              highlightOnHover\n              pointerOnHover\n              columns={tableColumns}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  toggleSidebar={toggleSidebar}\n                  selectedRow={selectedRows}\n                  handleDeleteSelected={handleDeleteSelected}\n                  handleFiltersChange={handleFiltersChange}\n                  lookupMode={lookupMode}\n                  lookupMode_defaultFilter={lookupMode_defaultFilter}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={false}\n          setFormState={setFormState}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n","export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n"],"sourceRoot":""}