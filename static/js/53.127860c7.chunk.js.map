{"version":3,"sources":["views/apps/unit_app/modal/index.js","views/apps/unit_app/index.js","views/apps/unit_app/Table.js","../../src/mounts.js","../../src/index.js","@core/components/widgets/stats/StatsHorizontal.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","storeApp","apps_app","storeUnit","units","useState","selectedData","colors","useContext","ThemeColors","setLoadingText","idApp","setIdApp","unitOptions","setUnitOptions","unitOptionsSelected","setUnitOptionsSelected","useForm","control","setError","handleSubmit","errors","handleReset","resetSelectedData","useEffect","data","length","isLoading","getDataListApp","dataDropdown","filter","el","value","id_app","x","id_unit","isOpen","toggle","className","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","onSubmit","storeData","sortedObject","key","JSON","stringify","countChanges","Object","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","type","icon","postData","md","xs","for","defaultValue","domain","name","render","invalid","theme","selectThemeColors","onChange","options","classnames","classNamePrefix","isClearable","closeMenuOnSelect","e","console","log","description","outline","onClick","List","getApiSummaryData","dataSummary","isLoadingSummary","getAlwaysGrid","getSummaryData","map","item","index","statTitle","title","baseClassName","fontSize","renderStats","sx","bgcolor","animation","height","width","count_format","count","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","CustomHeader","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","searchTerm","selectedRow","handleDeleteSelected","ability","AbilityContext","userData","invoices","getUserData","xl","htmlFor","can","sessionStorage","getItem","target","caret","getInvoice","rpt_name","output_type","dataYear","print","as_attachment","par_UNITKEY","par_SAMPLE","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","selectedRows","setSelectedRows","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","showModal","setShowModal","handleEdit","rowData","detailFromGrid","setDataById","handleCloseModal","revivalBack","neutralizeBack","handleDelete","a","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","countSelectedCopy","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","columns","dynamicColumns","column","columnName","sortField","fieldName","center","sortable","selector","row","cell","dataFormat","includes","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","href","app_logo","img","imgHeight","imgWidth","initials","content","app_name","unit_logo","unit_name","attributes","app_name_alias","tableColumns","useMemo","dark","light","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","keys","some","k","Array","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","mounts","getter","swal","noop","extractReactParams","reactParams","otherParams","mountKeys","mount","React","domElement","ReactDOM","unrender","_main","this","__mountedDomElements","__params","superDidOpen","superDidDestroy","didOpen","popup","didDestroy","update","argsToParams","args","params","forEach","ParentSwal","StatsHorizontal","cardColor","stats","countTextColor","countTextStyle","titleStyle","statsMargin","solidColor","cardStyle","titleOnTop","cardColorFix","inverse"],"mappings":"oWAmXeA,UA1UM,SAAC,GAMf,IAAD,QALJC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,UACAC,EACI,EADJA,aAEQC,EAAMC,cAAND,EACAE,EAAOC,cAAPD,GACFE,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBACrCC,EAAWH,aAAY,SAACC,GAAD,OAAWA,EAAMG,YACxCC,EAAYL,aAAY,SAACC,GAAD,OAAWA,EAAMK,SAC/C,EAAwCC,mBAASR,EAAMS,cAAvD,mBAAOA,EAAP,KACQC,GADR,KACmBC,qBAAWC,KAAtBF,QACR,EAAsCF,mBAAS,eAA/C,mBAAoBK,GAApB,WACA,EAA0BL,mBAAS,MAAnC,mBAAOM,EAAP,KAAcC,EAAd,KACA,EAAsCP,mBAAS,IAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KACA,EAAsDT,mBAAS,IAA/D,mBAAOU,EAAP,KAA4BC,EAA5B,KACA,EAKIC,YAAQ,IAJVC,GADF,EACEA,QACAC,GAFF,EAEEA,SACAC,GAHF,EAGEA,aACaC,GAJf,EAIEhC,UAAagC,OAiITC,GAAc,WAClB3B,EAAS4B,gCA0BX,OAjBAC,qBAAU,WACqB,IAAzBvB,EAASwB,KAAKC,QAAiBzB,EAAS0B,WAC1ChC,EAASiC,sBAAe,KAG1BhB,EACEX,EAAS4B,aAAaC,QACpB,SAACC,GAAD,aAAQA,EAAGC,SAAH,UAAanC,EAAMS,oBAAnB,aAAa,EAAoB2B,YAG7C,IAAMpB,EAAcV,EAAU0B,aAAaC,QAAO,SAACI,GAAD,MAAmB,KAAZA,EAAEF,SAC3DlB,EAAeD,GACfG,EACEH,EAAYiB,QAAO,SAACC,GAAD,aAAQA,EAAGC,SAAH,UAAanC,EAAMS,oBAAnB,aAAa,EAAoB6B,eAE7D,IAGD,cAAC,IAAD,CACEC,OAAQlD,EACRmD,OAAQ,WACNf,KACAnC,GAASD,IAEXoD,UAAU,iCANZ,SAQE,eAAC,IAAD,CACEC,SAAU1C,EAAM2C,kBAAoB3C,EAAM4C,gBAC1CC,OAAQ,cAAC,IAAD,IAFV,UAIE,cAAC,IAAD,CACEJ,UAAU,iBACVD,OAAQ,WACNf,KACAnC,GAASD,MAGb,eAAC,IAAD,CAAWoD,UAAU,qBAArB,UACE,qBAAKA,UAAU,mBAAf,SACE,qBAAIA,UAAU,OAAd,UAC0B/C,EAAT,SAAdF,EAAyB,OAAY,OADxC,IACiDE,EAAEoD,kBAGrD,cAAC,IAAD,CACEC,SAEMxB,GADU,SAAd/B,EAnKY,SAACoC,GAGvB,GAFAA,EAAI,QAAcV,EAAoBiB,MACtCP,EAAI,OAAad,EAAMqB,MApBJ,SAACP,GACpB,GAAkB,SAAdpC,EAAsB,CACxB,IAAMwD,EAAS,eAAQC,YAAajD,EAAMS,eAE1C,IAAK,IAAIyC,YADFF,EAAS,GACAA,EACRE,KAAOtB,UAAcoB,EAAUE,GAIvC,OACEC,KAAKC,UAAUH,YAAaD,MAC5BG,KAAKC,UAAUH,YAAarB,IAG9B,OAAO,EAOLyB,CAAazB,GACf,GACE0B,OAAOC,OAAO3B,GAAM4B,OAAM,SAACC,GACzB,OAAiB,OAAVA,GAA4B,KAAVA,KAG3B5C,EAAe,GAAD,OAAInB,EAAE,YAAN,YAAqBA,EAAEoD,aAAvB,YAAqCpD,EAAE,UAAvC,UACdI,EAAS4D,kBAAQ9B,IAAO+B,MAAK,SAACC,GAEG,cAA3BA,EAAIC,KAAKC,eACXxE,GAASD,GACT0E,IAAMC,QAAN,UAAiBtE,EAAE,wBAAnB,YAA8CA,EAAEoD,cAAc,CAC5DmB,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOsD,QAAQI,KACtBC,OAAO,aAAD,OAAe3D,EAAOsD,QAAQI,OAEtCE,UAAW,CACTC,QAAS7D,EAAOsD,QAAQI,QAGxB7E,GACFO,EAAS0E,sBAAY5E,KAEa,aAA3BgE,EAAIC,KAAKC,eAClBC,IAAMU,MAAMb,EAAIc,QAAQC,QAAS,CAC/BV,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOkE,OAAOR,KACrBC,OAAO,aAAD,OAAe3D,EAAOkE,OAAOR,OAErCE,UAAW,CACTC,QAAS7D,EAAOkE,OAAOR,gBAM/B,IAAK,IAAMlB,KAAOtB,EAAM,CAAC,IAAD,EACI,KAAtB,UAAAA,EAAKsB,UAAL,eAAWrB,SACbP,GAAS4B,EAAK,CACZ2B,KAAM,gBAMdd,YAAM,GAAD,OAAIrE,EAAE,iCAAmC,CAAEoF,KAAM,kBAIpC,SAAClD,GACrB,GACE0B,OAAOC,OAAO3B,GAAM4B,OAAM,SAACC,GACzB,OAAiB,OAAVA,GAA4B,KAAVA,KAI3B7B,EAAI,QAAcV,EAClBU,EAAI,OAAad,SACVc,EAAI,YAEXf,EAAe,GAAD,OAAInB,EAAE,kBAAD,OAAmBoD,gBACtChD,EAASiF,mBAASnD,IAAO+B,MAAK,SAACC,GAGE,cAA3BA,EAAIC,KAAKC,eACXxE,GAASD,GACT0E,IAAMC,QAAN,UAAiBtE,EAAE,wBAAnB,YAA8CA,EAAEoD,cAAc,CAC5DmB,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOsD,QAAQI,KACtBC,OAAO,aAAD,OAAe3D,EAAOsD,QAAQI,OAEtCE,UAAW,CACTC,QAAS7D,EAAOsD,QAAQI,QAGxB7E,GACFO,EAAS0E,sBAAY5E,KAEa,aAA3BgE,EAAIC,KAAKC,eAClBC,IAAMU,MAAMb,EAAIc,QAAQC,QAAS,CAC/BV,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOkE,OAAOR,KACrBC,OAAO,aAAD,OAAe3D,EAAOkE,OAAOR,OAErCE,UAAW,CACTC,QAAS7D,EAAOkE,OAAOR,gBAM/B,IAAK,IAAMlB,KAAOtB,EAAM,CAAC,IAAD,EACJ,OAAdA,EAAKsB,IAAuC,KAAtB,UAAAtB,EAAKsB,UAAL,eAAWrB,SACnCP,GAAS4B,EAAK,CACZ2B,KAAM,cA4DR,SAOE,eAAC,IAAD,CAAKpC,UAAU,aAAf,UACE,eAAC,IAAD,CAAKuC,GAAI,GAAIC,GAAI,GAAjB,UACE,eAAC,IAAD,CAAOxC,UAAU,aAAayC,IAAI,SAAlC,UACGxF,EAAE,kBACH,sBAAM+C,UAAU,cAAhB,kBAEF,cAAC,IAAD,CACE0C,aAAY,oBAAEnF,EAAMS,oBAAR,aAAE,EAAoB2E,cAAtB,QAAgC,GAC5C/D,QAASA,GACTzB,GAAG,SACHyF,KAAK,SACLC,OAAQ,gBAAG7B,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,2BACMA,GADN,IAEEhB,UACEjB,GAAO4D,OACH,0BACA,eAENxF,GAAG,SACH2F,QAAS/D,GAAO4D,SAAU,WAMlC,eAAC,IAAD,CAAKJ,GAAI,GAAIC,GAAI,GAAjB,UACE,cAAC,IAAD,CAAOxC,UAAU,aAAayC,IAAI,SAAlC,SACGxF,EAAE,SAEL,cAAC,IAAD,CACEE,GAAG,SACH4F,MAAOC,IACPN,aAAc/E,EAAS4B,aAAaC,QAClC,SAACC,GAAD,OAAQA,EAAGC,SAAH,OAAa1B,QAAb,IAAaA,OAAb,EAAaA,EAAc2B,WAErCsD,SAAU,SAAC9D,GACTb,EAASa,EAAKO,QAEhBwD,QAASvF,EAAS4B,aAClBS,UAAWmD,IAAW,eAAgB,CACpC,aAAwB,OAAV9E,IAEhB+E,gBAAgB,cAIpB,eAAC,IAAD,CAAKb,GAAI,GAAIC,GAAI,GAAjB,UACE,cAAC,IAAD,CAAOxC,UAAU,aAAayC,IAAI,UAAlC,SACGxF,EAAE,UAEL,cAAC,IAAD,CACEE,GAAG,UACHkG,aAAa,EACbN,MAAOC,IACPM,mBAAmB,EACnBZ,aAAc7E,EAAU0B,aAAaC,QACnC,SAACC,GAAD,OAAQA,EAAGC,SAAH,OAAa1B,QAAb,IAAaA,OAAb,EAAaA,EAAc6B,YAErCoD,SAAU,SAAC9D,GAnHF,IAACoE,IAoHSpE,EAnHjCqE,QAAQC,IAAIF,GACZ7E,EAAuB6E,EAAE7D,QAoHXwD,QAAS3E,EACTyB,UAAU,eACVoD,gBAAgB,cAIpB,eAAC,IAAD,CAAKb,GAAI,GAAIC,GAAI,GAAjB,UACE,cAAC,IAAD,CAAOxC,UAAU,aAAayC,IAAI,cAAlC,SACGxF,EAAE,iBAEL,cAAC,IAAD,CACEyF,aAAY,oBAAEnF,EAAMS,oBAAR,aAAE,EAAoB0F,mBAAtB,QAAqC,GACjD9E,QAASA,GACTzB,GAAG,cACHyF,KAAK,cACLC,OAAQ,gBAAG7B,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,2BACMA,GADN,IAEEhB,UACEjB,GAAO4D,OACH,0BACA,eAENP,KAAK,WACLjF,GAAG,cACH2F,QAAS/D,GAAO2E,cAAe,WAMvC,eAAC,IAAD,CAAKlB,GAAI,GAAIxC,UAAU,yBAAvB,UACE,cAAC,IAAD,CAAQoC,KAAK,SAASpC,UAAU,OAAO0B,MAAM,UAA7C,SACGzE,EAAE,YAEL,cAAC,IAAD,CACEmF,KAAK,QACLV,MAAM,YACNiC,SAAO,EACPC,QAAS,WACP5E,KACAhC,EAAa,OACbH,GAAQ,IAPZ,SAUGI,EAAE,8B,iCCxWrB,sGA+Fe4G,UA7EF,WAAO,IAAD,IACT5G,EAAMC,cAAND,EACFI,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBAE3CwB,qBAAU,WAAO,IAAD,EAEZ4E,sBAC+B,KAA9B,UAAAvG,EAAMwG,mBAAN,eAAmB3E,UAChB7B,EAAMyG,kBAAoBC,kBAE9B5G,EAAS6G,yBAAe,OAEzB,CAAC7G,EAAD,UAAWE,EAAMwG,mBAAjB,aAAW,EAAmB3E,SAEjC,IAAMnB,EAAS,CACb,UACA,UACA,UACA,SACA,OACA,aAGF,OACE,sBAAK+B,UAAU,gBAAf,UACG8D,qBACC,cAAC,IAAD,oBACGvG,EAAMwG,mBADT,aACG,EAAmBI,KAAI,SAACC,EAAMC,GAAW,IAAD,EACvC,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CACE3C,MAAOzD,EAAOoG,GACdC,UAAS,UAAKrH,EAAEmH,EAAKG,QACrBlC,KACE+B,EAAK/B,KACH,cAAC,IAAD,CACEmC,cAAc,0BACdC,SAAS,KAFX,SAIGL,EAAK/B,OAGR,cAAC,IAAD,CACEmC,cAAc,0BACdC,SAAS,KAFX,uBAQJC,YACEnH,EAAMyG,iBACJ,cAAC,IAAD,CACEW,GAAI,CAAEC,QAAS,WACfC,UAAU,OACVC,OAAQ,GACRC,MAAO,GACP/E,UAAU,oBAGZ,oBAAIA,UAAU,kBAAd,mBACGoE,EAAKY,oBADR,QACwBZ,EAAKa,iBAU7C,cAAC,UAAD,S,saCbAC,EAASC,IAAiBC,KAG1BC,EAAoBC,sBAAW,SAACC,EAAOC,GAAR,OACnC,qBAAKxF,UAAU,aAAf,SACE,cAAC,IAAD,aAAOoC,KAAK,WAAWoD,IAAKA,GAASD,SAKnCE,EAAe,SAAC,GAShB,EARJlI,MAQK,IAPLmI,EAOI,EAPJA,cACAC,EAMI,EANJA,cACAC,EAKI,EALJA,YACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,YACAC,EACI,EADJA,qBAEQ/I,EAAMC,cAAND,EACFgJ,EAAU/H,qBAAWgI,KACrB7I,EAAWC,cAEX6I,GADe3I,aAAY,SAACC,GAAD,OAAWA,EAAM2I,YACjCC,eAEjB,OACE,qBAAKrG,UAAU,wDAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKsG,GAAG,IAAItG,UAAU,gCAAtB,SACE,sBAAKA,UAAU,kCAAf,UACE,uBAAOuG,QAAQ,gBAAf,SAAgCtJ,EAAE,UAClC,eAAC,IAAD,CACE+C,UAAU,QACVoC,KAAK,SACLjF,GAAG,gBACHuC,MAAOkG,EACP3C,SAAU0C,EACVnE,MAAO,CAAEuD,MAAO,QANlB,UAQE,wBAAQrF,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,mBAEF,uBAAO6G,QAAQ,gBAAf,SAAgCtJ,EAAE,kBAGtC,eAAC,IAAD,CACEqJ,GAAG,IACHtG,UAAU,sJAFZ,WAIc,OAAX+F,QAAW,IAAXA,OAAA,EAAAA,EAAa3G,QAAS,GACvB6G,EAAQO,IAAI,SAAUC,eAAeC,QAAQ,sBAC3C,qBAAK1G,UAAU,8CAAf,SACE,eAAC,IAAD,CACEA,UAAU,eACV0B,MAAM,SACNkC,QAASoC,EAHX,UAKG/I,EAAE,UALL,IAKiB8I,EAAY3G,OAL7B,IAKsCnC,EAAE,YAAD,OAAaoD,mBAGpD,KACJ,sBAAKL,UAAU,8CAAf,UACE,wBAAOA,UAAU,OAAOuG,QAAQ,iBAAhC,UACGtJ,EAAE,UADL,OAGA,cAAC,IAAD,CACEE,GAAG,iBACH6C,UAAU,cACVoC,KAAK,OACL1C,MAAOoG,EACP7C,SAAU,SAACM,GAAD,OAAOsC,EAAatC,EAAEoD,OAAOjH,aAI3C,sBAAKM,UAAU,iDAAf,UACE,eAAC,IAAD,CAAsBA,UAAU,OAAhC,UACE,eAAC,IAAD,CAAgB0B,MAAM,YAAYkF,OAAK,EAACjD,SAAO,EAA/C,UACE,cAAC,IAAD,CAAO3D,UAAU,uBACjB,sBAAMA,UAAU,eAAhB,SAAgC/C,EAAE,eAEpC,eAAC,IAAD,WACE,eAAC,IAAD,CACE+C,UAAU,QACV4D,QAAS,kBACPvG,EACEwJ,qBAAW,CACTC,SAAU,SACVC,YAAa,MACbC,SAAUb,EAASa,SACnBC,OAAO,EACPC,eAAe,EACfC,YAAa,IACbC,WAAY,wCAXpB,UAgBE,cAAC,IAAD,CAASpH,UAAU,uBACnB,sBAAMA,UAAU,eAAhB,SAAgC/C,EAAE,cAEpC,eAAC,IAAD,CACE+C,UAAU,QACV4D,QAAS,kBACPvG,EACEwJ,qBAAW,CACTC,SAAU,SACVC,YAAa,MACbC,SAAUb,EAASa,SACnBG,YAAa,IACbC,WAAY,wCATpB,UAcE,cAAC,IAAD,CAAMpH,UAAU,uBAChB,sBAAMA,UAAU,eAAhB,oBAGF,eAAC,IAAD,CACEA,UAAU,QACV4D,QAAS,kBACPvG,EACEwJ,qBAAW,CACTC,SAAU,SACVC,YAAa,MACbC,SAAUb,EAASa,SACnBE,eAAe,EACfC,YAAa,IACbC,WAAY,wCAVpB,UAeE,cAAC,IAAD,CAAMpH,UAAU,uBAChB,sBAAMA,UAAU,eAAhB,sBAGF,eAAC,IAAD,CACEA,UAAU,QAEV4D,QAAS,kBACPvG,EACEwJ,qBAAW,CACTC,SAAU,SACVC,YAAa,MACbC,SAAUb,EAASa,SACnBE,eAAe,EACfC,YAAa,IACbC,WAAY,wCAXpB,UAgBE,cAAC,IAAD,CAAUpH,UAAU,uBACpB,sBAAMA,UAAU,eAAhB,0BAULiG,EAAQO,IACP,OACAC,eAAeC,QAAQ,sBAEvB,eAAC,IAAD,CACE1G,UAAU,eACV0B,MAAM,UACNkC,QAAS8B,EAHX,UAMGzI,EAAE,WANL,IAMkBA,EAAEoD,gBAElB,iBAslBDwD,UA9kBF,WACX,IAAMxG,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBACrCC,EAAWH,aAAY,SAACC,GAAD,OAAWA,EAAMG,YACtCX,EAAMC,cAAND,EAGAgB,GAFQC,qBAAWgI,KAERhI,qBAAWC,KAAtBF,QACR,EAA+BF,mBAAS,QAAxC,mBAAOsJ,EAAP,KAAiBC,EAAjB,KACA,EAAoCvJ,mBAAS,IAA7C,mBAAO+H,EAAP,KAAmByB,EAAnB,KACA,EAAsCxJ,mBAAS,GAA/C,mBAAOyJ,EAAP,KAAoBC,EAApB,KACA,EAAwB1J,mBAAS,MAAjC,mBAAO2J,EAAP,KAAaC,EAAb,KACA,EAAsC5J,mBAAS,IAA/C,mBAAO6H,EAAP,KAAoBgC,GAApB,KACA,GAAwC7J,mBAAS,IAAjD,qBAAO8J,GAAP,MAAqBC,GAArB,MACA,GAA0C/J,oBAAS,GAAnD,qBAAOgK,GAAP,MAAsBC,GAAtB,MAEA,GAAsCjK,oBAAS,GAA/C,qBAAOkK,GAAP,MAAoBC,GAApB,MACA,GAA8BnK,oBAAS,GAAvC,qBAAOoK,GAAP,MAAgBC,GAAhB,MACA,GAAsCrK,mBAAS,eAA/C,qBAAoBK,IAApB,aACA,GAAkCL,oBAAS,GAA3C,qBAAOsK,GAAP,MAAkBC,GAAlB,MACA,GAAkCvK,mBAAS,MAA3C,qBAAOhB,GAAP,MAAkBC,GAAlB,MAEMuL,GAAa,SAACC,GAClBxL,GAAa,QACRyL,kBAwBHrK,GAAe,GAAD,OACTnB,EAAE,WADO,YACOA,EAAE,UADT,YACsBA,EAAE,QADxB,YACmCA,EAAEoD,eAEnD+H,IAAW,GACX/K,EAASqL,sBAAYF,IAAUtH,MAAK,WACL,IAAzBvD,EAASwB,KAAKC,QAAiBzB,EAAS0B,WAM1C+I,IAAW,GACXE,IAAa,IANbjL,EAASiC,sBAAe,KAAK4B,MAAK,SAACC,GACjCiH,IAAW,GACXE,IAAa,WA/BnBlK,GAAe,GAAD,OACTnB,EAAE,WADO,YACOA,EAAE,UADT,YACsBA,EAAE,QADxB,YACmCA,EAAEoD,eAEnD+H,IAAW,GACX/K,EAAS0E,sBAAYyG,EAAQrL,KAAK+D,MAAK,SAACC,GACP,aAA3BA,EAAIC,KAAKC,eACX+G,IAAW,GACX9G,IAAMU,MAAMb,EAAIc,QAAQC,QAAS,CAC/BV,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOkE,OAAOR,KACrBC,OAAO,aAAD,OAAe3D,EAAOkE,OAAOR,OAErCE,UAAW,CACTC,QAAS7D,EAAOkE,OAAOR,UAI3ByG,IAAW,GACXE,IAAa,SAsBfK,GAAmB,WACvBT,IAAgBD,IAChBK,IAAcD,IACdO,eAGIlD,GAAgB,WAEpB1I,GAAa,OACbkL,IAAgBD,IAChBK,IAAcD,IACdQ,YAAeF,KAGXG,GAAY,uCAAG,WAAO3L,GAAP,SAAA4L,EAAA,sEACE7D,EAAO8D,KAAK,CAC/BzE,MAAM,GAAD,OAAKtH,EAAE,kBACZgM,KAAK,GAAD,OAAKhM,EAAE,+BAAP,YAAyCA,EAAEoD,aAA3C,KACJgC,KAAM,UACN6G,kBAAkB,EAClBC,kBAAkB,GAAD,OAAKlM,EAAE,eAAP,YAAyBA,EAAEoD,aAA3B,KACjB+I,iBAAiB,GAAD,OAAKnM,EAAE,WACvBoM,YAAa,CACXC,cAAe,kBACfC,aAAc,+BAEhBC,gBAAgB,IAZC,cAcR9J,QACTtB,GAAe,GAAD,OAAInB,EAAE,YAAN,iBAA0BA,EAAEoD,eAC1C+H,IAAW,GACX/K,EAASoM,qBAAWtM,IAAK+D,MAAK,SAACC,GAEE,cAA3BA,EAAIC,KAAKC,eACX+G,IAAW,GACX9G,IAAMC,QAAN,UAAiBtE,EAAE,wBAAnB,YAA8CA,EAAEoD,cAAc,CAC5DmB,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOsD,QAAQI,KACtBC,OAAO,aAAD,OAAe3D,EAAOsD,QAAQI,OAEtCE,UAAW,CACTC,QAAS7D,EAAOsD,QAAQI,SAGQ,aAA3BR,EAAIC,KAAKC,gBAClB+G,IAAW,GACX9G,IAAMU,MAAMb,EAAIc,QAAQC,QAAS,CAC/BV,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOkE,OAAOR,KACrBC,OAAO,aAAD,OAAe3D,EAAOkE,OAAOR,OAErCE,UAAW,CACTC,QAAS7D,EAAOkE,OAAOR,aAxCd,2CAAH,sDAgDZqE,GAAoB,uCAAG,8BAAA+C,EAAA,6DACrBW,EAAoB7B,GAAazI,OADZ,SAEN8F,EAAO8D,KAAK,CAC/BzE,MAAM,GAAD,OAAKtH,EAAE,kBACZgM,KAAK,GAAD,OAAKhM,EAAE,mBAAP,YAA6ByM,EAA7B,YAAkDzM,EACpD,mDADE,KAGJoF,KAAM,UACN6G,kBAAkB,EAClBC,kBAAkB,GAAD,OAAKlM,EAAE,eAAP,YAAyByM,EAAzB,YAA8CzM,EAC7DoD,aADe,KAGjB+I,iBAAiB,GAAD,OAAKnM,EAAE,WACvBoM,YAAa,CACXC,cAAe,kBACfC,aAAc,+BAEhBC,gBAAgB,IAjBS,cAmBhB9J,QACTtB,GAAe,GAAD,OACTnB,EAAE,YADO,YACQyM,EADR,iBACkCzM,EAAEoD,eAElD+H,IAAW,GACLtH,EAAS+G,GAAa1D,KAAI,SAAC4E,GAAD,OAAOA,EAAE5L,MAEzCE,EAASsM,gCAAsB,CAAExM,GAAI2D,KAAWI,MAAK,SAACC,GAErB,cAA3BA,EAAIC,KAAKC,eACXyG,GAAgB,IAChBE,IAAkBD,IAClBK,IAAW,GACX9G,IAAMC,QAAN,UACKtE,EAAE,wBADP,YACkCyM,EADlC,YACuDzM,EAAEoD,cACvD,CACEmB,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOsD,QAAQI,KACtBC,OAAO,aAAD,OAAe3D,EAAOsD,QAAQI,OAEtCE,UAAW,CACTC,QAAS7D,EAAOsD,QAAQI,SAIM,aAA3BR,EAAIC,KAAKC,gBAClB+G,IAAW,GACX9G,IAAMU,MAAMb,EAAIc,QAAQC,QAAS,CAC/BV,MAAO,CACLC,QAAS,OACTC,MAAOzD,EAAOkE,OAAOR,KACrBC,OAAO,aAAD,OAAe3D,EAAOkE,OAAOR,OAErCE,UAAW,CACTC,QAAS7D,EAAOkE,OAAOR,aAtDN,2CAAH,qDAsGpBiI,GAAaC,sBAAYC,KAZN,SAACC,GACxB1M,EACE2M,sBAAY,CACV3C,WACA4C,OAAQF,EACRrC,OACAwC,KAAM1C,EACNpI,OAAQwG,OAK4C,KAAM,IAqB1DuE,GAAoBN,uBAAY,SAACpM,GACrCqK,GAAgBrK,EAAMoK,gBACrB,IAqDGuC,GAAO,sBACR7M,EAAM8M,eAAelG,KAAI,SAACmG,GAAD,MAAa,CACvC1H,KAAM0H,EAAOC,WACbC,UAAWF,EAAOG,UAClBC,QAAQ,EACRC,UAAU,EACVC,SAAU,SAACC,GAAD,OAASA,EAAIP,EAAOG,YAC9BK,KAAM,SAACD,GAAD,OAlCS,SAACA,EAAKP,GACvB,IAAMtJ,EAAQ6J,EAAIP,EAAOG,WACnBM,EAAaT,EAAOS,WAC1B,GAAIA,GACEA,EAAWC,SAAS,KAAM,CAC5B,IAAMC,EAAmBF,EAAWG,MAAM,KACpCC,EAAaF,EAAiB,GAC9BG,EAAeH,EAAiB,GAClCI,EAAiBR,EAAIP,EAAOG,WAahC,MAZmB,SAAfU,IACFE,EAAiBC,IAAOtK,GAAOuK,OAAO,eAClCH,IACFC,EAAiBC,IAAOtK,GAAOuK,OAAOH,KAGvB,aAAfD,IACFE,EAAiBC,IAAOtK,GAAOuK,OAAO,qBAClCH,IACFC,EAAiBC,IAAOtK,GAAOuK,OAAOH,KAGnCC,EAGX,OAAOR,EAAIP,EAAOG,WAUDe,CAAWX,EAAKP,SAPtB,CASX,CACE1H,KAAM3F,EAAE,UACRyN,QAAQ,EACRC,UAAU,EACVC,SAAU,SAACC,GAAD,OAASA,EAAIlI,QACvBmI,KAAM,SAACD,GAAD,OACJ,mBAAGlE,OAAO,SAAS8E,KAAMZ,EAAIlI,OAAQ4B,MAAOsG,EAAIlI,OAAhD,SACGkI,EAAIlI,WAIX,CACEC,KAAM3F,EAAE,OACRyN,QAAQ,EACRC,UAAU,EACVC,SAAU,SAACC,GAAD,cAASA,QAAT,IAASA,OAAT,EAASA,EAAKa,UACxBZ,KAAM,SAACD,GAAD,aACJ,sBAAK7K,UAAU,iDAAf,UACM,OAAH6K,QAAG,IAAHA,KAAKa,SACJ,cAAC,IAAD,CACE1L,UAAU,OACV2L,IAAG,OAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAKa,SACV3G,MAAM,KACND,OAAO,KACP8G,UAAU,KACVC,SAAS,KACTnK,MAAO,kBAGT,cAAC,IAAD,CACEoK,UAAQ,EACR9L,UAAU,OAEV+L,QAAO,iBAAElB,QAAF,IAAEA,OAAF,EAAEA,EAAKmB,gBAAP,QAAmB,KAI9B,qBAAKhM,UAAU,qBAAf,SACE,sBAAMA,UAAU,YAAhB,SAA6B6K,EAAImB,kBAKzC,CACEpJ,KAAM3F,EAAE,QACRyN,QAAQ,EACRC,UAAU,EACVC,SAAU,SAACC,GAAD,cAASA,QAAT,IAASA,OAAT,EAASA,EAAKoB,WACxBnB,KAAM,SAACD,GAAD,aACJ,sBAAK7K,UAAU,iDAAf,UACM,OAAH6K,QAAG,IAAHA,KAAKoB,UACJ,cAAC,IAAD,CACEjM,UAAU,OACV2L,IAAG,OAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAKoB,UACVlH,MAAM,KACND,OAAO,KACP8G,UAAU,KACVC,SAAS,KACTnK,MAAO,kBAGT,cAAC,IAAD,CACEA,MAAO,gBACPoK,UAAQ,EACR9L,UAAU,OACV+L,QAAO,iBAAElB,QAAF,IAAEA,OAAF,EAAEA,EAAKqB,iBAAP,QAAoB,KAI/B,qBAAKlM,UAAU,qBAAf,SACE,sBAAMA,UAAU,YAAhB,gBAA6B6K,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAKqB,mBAK1C,CACEtJ,KAAM3F,EAAE,aACRuN,UAAW,aACXE,QAAQ,EACRC,UAAU,EACVC,SAAU,SAACC,GAAD,uBAASA,EAAIsB,kBAAb,aAAS,EAAgBC,gBACnCtB,KAAM,SAACD,GAAD,qBACJ,sBAAK7K,UAAU,iDAAf,UACG,UAAA6K,EAAIsB,kBAAJ,SAAgBT,SACf,cAAC,IAAD,CACE1L,UAAU,OACV2L,IAAG,OAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAKa,SACV3G,MAAM,KACND,OAAO,KACP8G,UAAU,KACVC,SAAS,KACTnK,MAAO,mBAGN,OAAHmJ,QAAG,IAAHA,GAAA,UAAAA,EAAKsB,kBAAL,eAAiBT,WACf,cAAC,IAAD,CACEI,UAAQ,EACR9L,UAAU,OACV+E,MAAM,KACND,OAAO,KACP8G,UAAU,KACVC,SAAS,KACTnK,MAAO,gBACPqK,QAAO,iBAAElB,QAAF,IAAEA,GAAF,UAAEA,EAAKsB,kBAAP,aAAE,EAAiBC,sBAAnB,QAAqC,KAKlD,qBAAKpM,UAAU,qBAAf,SACE,sBAAMA,UAAU,YAAhB,mBAA6B6K,EAAIsB,kBAAjC,aAA6B,EAAgBC,wBAKrD,CACExJ,KAAM3F,EAAE,eACRuN,UAAW,cACXE,QAAQ,EACRC,UAAU,EACVC,SAAU,SAACC,GAAD,uBAASA,EAAIsB,kBAAb,aAAS,EAAgBC,gBACnCtB,KAAM,SAACD,GAAD,OAASA,EAAInH,cAErB,CACEd,KAAM3F,EAAE,WACRyN,QAAQ,EACR3F,MAAO,QACP+F,KAAM,SAACD,GAAD,OACJ,cAAC,IAAD,CACEA,IAAKA,EACL/B,aAAcA,GACdP,WAAYA,SAMd8D,GAAeC,mBACnB,kBACE/O,EAAM8B,UACF+K,GAAQjG,KAAI,SAACmG,GAAD,mBAAC,aACX1H,KAAM3F,EAAEqN,EAAO1H,OACZ0H,GAFO,IAGVK,UAAU,EACVG,KAAM,SAACD,GAAD,MACY,YAAhBP,EAAO1H,KACL,qCACE,cAAC,IAAD,CACE+B,GAAI,CAAEC,QAAS3G,EAAOsO,KAAKC,OAC3B3H,UAAU,OACV7E,UAAU,YACV+E,MAAO,GACPD,OAAQ,KAEV,cAAC,IAAD,CACEH,GAAI,CAAEC,QAAS3G,EAAOsO,KAAKC,OAC3B3H,UAAU,OACVE,MAAO,GACPD,OAAQ,QAIZ,cAAC,IAAD,CACEH,GAAI,CAAEC,QAAS3G,EAAOsO,KAAKC,OAC3B3H,UAAU,OACVE,MAAM,OACND,OAAQ,WAIhBsF,GAAQjG,KAAI,SAACmG,GAAD,oBACV1H,KAAM3F,EAAEqN,EAAO1H,OACZ0H,QAEX,CAAC/M,EAAM8B,UAAW+K,KAuCpB,OAfAlL,qBAAU,YACkB,IAAtB3B,EAAM4B,KAAKC,SAAkB7B,EAAM8B,WAAa4E,mBAClD7F,GAAe,GAAD,OAAInB,EAAE,gBAAN,YAAyBA,EAAEoD,eACzChD,EACE2M,sBAAY,CACV3C,WACAK,OACAuC,OAAQnE,EACRoE,KAAM1C,EACNpI,OAAQwG,QAIb,CAACvI,EAAUE,EAAM4B,KAAKC,OAAQiI,EAAUK,EAAMF,IAG/C,eAAC,WAAD,WACE,cAAC,IAAD,CAAUvH,SAAUkI,GAAS/H,OAAQ,cAAC,IAAD,IAArC,SACE,cAAC,IAAD,CAAMJ,UAAU,kBAAhB,SACE,qBAAKA,UAAU,kDAAf,SACE,cAAC,IAAD,CACEyM,UAAQ,EACRC,WAAS,EACTC,YAAU,EACVC,YAAU,EACVC,YAAU,EACVC,kBAAgB,EAChBC,oBAAqBxP,EAAMyP,MAC3BC,oBA7Ra,WACvB,IAAMhI,EAAQiI,OAAOC,KAAKC,KAAK7P,EAAMyP,MAAQpH,IAE7C,OACE,cAAC,IAAD,CACEyH,cAAe,GACfC,UAAW,GACXC,UAAWtI,GAAS,EACpBuI,gBAAgB,SAChBC,UAA2B,IAAhBjG,EAAoBA,EAAc,EAAI,EACjDkG,aAAc,SAACxD,GAAD,OA1EK,SAACA,GACxB7M,EACE2M,sBAAY,CACV3C,WACAK,OACAuC,OAAQnE,EACR1G,OAAQwG,EACRsE,KAAMA,EAAKyD,SAAW,KAG1BlG,EAAeyC,EAAKyD,SAAW,GAgEHC,CAAiB1D,IACzC2D,cAAe,YACfC,kBAAmB,YACnBC,cAAe,iBACfC,kBAAmB,iBACnBC,sBAAuB,YACvBC,kBAAmB,YACnBC,mBACE,6DA4QIC,gBAAc,EACdC,qBAAsBlE,GACtBmE,yBAAuB,EAEvBC,kBAAmBxG,GACnByG,wBAAyBnJ,EACzBoJ,gBAAiB,cAAC,IAAD,IAGjBjN,MAAO,CAAE,aAAc,SACvBkN,kBAAgB,EAChBC,gBAAc,EACdvE,QAASiC,GACTuC,OA7TO,SAACtE,EAAQuE,GAC1BvH,EAAWuH,GACXlH,EAAQ2C,EAAOE,WACfnN,EACE2M,sBAAY,CACV3C,WACAK,OACAuC,OAAQnE,EACRoE,KAAM1C,EACNpI,OAAQwG,MAqTFkJ,SAAU,cAAC,IAAD,IACV9O,UAAU,kBACVb,KAlES,WACnB,IAAM4P,EAAU,CACd9E,OAAQnE,GAEJkJ,EAAanO,OAAOoO,KAAKF,GAASG,MAAK,SAAUC,GACrD,OAAOJ,EAAQI,GAAG/P,OAAS,KAE7B,OAAK7B,EAAM8B,UAUF+P,MAAM,IAAIC,KAAK,IATlB9R,EAAM4B,KAAKC,OAAS,EACf7B,EAAM4B,KACkB,IAAtB5B,EAAM4B,KAAKC,QAAgB4P,EAC7B,QADF,EAwDOM,GACNC,mBACE,cAAC9J,EAAD,CACElI,MAAOA,EACPuI,WAAYA,EACZF,YAAaA,EACbC,aA3UK,SAAC2J,GACpBjI,EAAciI,GACd5F,GAAW4F,IA0UG7J,cAxWM,SAACpC,GACrB,IAAM7D,EAAQ+P,SAASlM,EAAEmM,cAAchQ,OACvCrC,EACE2M,sBAAY,CACV3C,WACAK,OACAuC,OAAQnE,EACR1G,OAAQM,EACRwK,KAAM1C,KAGVI,GAAelI,IA8VDgG,cAAeA,GACfK,YAAa8B,GACb7B,qBAAsBA,aAUjCqC,IACC,cAAC,UAAD,CACEtL,UAAWA,GACXH,KAAMyL,GACNxL,QAAS6I,GACT5I,YAAY,EACZE,aAAcA,U,qSC90BX2S,EAAS,CACpB,CACElP,IADF,QAEEmP,OAAQC,YAAI,OAAIA,eAElB,CACEpP,IADF,OAEEmP,OAAQC,YAAI,OAAIA,uBAElB,CACEpP,IADF,oBAEEmP,OAAQC,YAAI,OAAIA,uBAElB,CACEpP,IADF,iBAEEmP,OAAQC,YAAI,OAAIA,oBAElB,CACEpP,IADF,mBAEEmP,OAAQC,YAAI,OAAIA,sBAElB,CACEpP,IADF,SAEEmP,OAAQC,YAAI,OAAIA,gBAElB,CACEpP,IADF,kBAEEmP,OAAQC,YAAI,OAAIA,qBAElB,CACEpP,IADF,WAEEmP,OAAQC,YAAI,OAAIA,mDAElB,CACEpP,IADF,aAEEmP,OAAQC,YAAI,OAAIA,iBC/BdC,EAAO,aAEE,SAAS3K,EAAT,GAGb,SAAS4K,EAAT,GACE,IAAMC,EAAN,GACMC,EAAN,GACMC,EAAYP,OAAWQ,YAAK,OAAIA,EAAtC,OASA,OARAtP,2BAA+B,YAAkB,aAAjB,EAAiB,KAAlB,EAAkB,KAC3CqP,eAA2BE,yBAA/B,IACEJ,OACAC,UAEAA,UAGG,CAACD,EAAR,GAEF,SAASnN,EAAT,KACEhC,2BAAoC,YAAkB,aAAjB,EAAiB,KAAlB,EAAkB,KAE9CwP,EADQV,QAAYQ,YAAK,OAAIA,QAAnC,KACmBA,OAAnB,GACAG,sBACAT,kCAIJ,SAASU,EAAT,GACEV,gCAAkCQ,YAChCC,uCAEFT,0BAGF,mEAAO,EAAP,qDAeEW,SAAK,KAAuB,WAC1BC,KAAKC,qBAAuB,GAC5BD,KAAKE,SAAW9P,mBAAhB,GACA,MAAmCkP,EAAmBU,KAAtD,mBAAM,EAAN,KAAM,EAAN,KACMG,EAAeX,WAArB,EACMY,EAAkBZ,cAAxB,EACA,OAAO,EAAP,uCACEpP,OAAA,YAA+B,CAC7BiQ,QAASC,YACPlO,EAAO,EAAPA,GACA+N,MAEFI,WAAYD,YACVF,KACAN,WA7BV,oBAmCEU,SAAM,GACJpQ,cAAc4P,KAAd5P,YACA0P,QACA,MAAmCR,EAAmBU,KAAtD,mBAAM,EAAN,KAAM,EAAN,KACA,6CACA5N,EAAO4N,KAAP5N,MAxCJ,2BACSqO,SAAY,GACjB,GAAId,yBAAqBe,EAArBf,KAAiCA,yBAAqBe,EAA1D,IAAoE,CAClE,IAAMC,EAAN,GAMA,MALC,CAAC,QAAS,OAAQ,QAAQC,SAAQ,mBACjC,IAAIF,OACFC,KAAeD,EAAfC,OAGGA,EAEP,OAAOE,eAAP,OAXC,EAAP,CAAO,G,gHC6EMC,IA5GS,SAAC,GAelB,IAdLlP,EAcI,EAdJA,KACAX,EAaI,EAbJA,MACA8P,EAYI,EAZJA,UACAC,EAWI,EAXJA,MACA/M,EAUI,EAVJA,YACAJ,EASI,EATJA,UACAtE,EAQI,EARJA,UACA0R,EAOI,EAPJA,eAOI,IANJC,sBAMI,MANa,GAMb,MALJC,kBAKI,MALS,GAKT,EAJJC,EAII,EAJJA,YAII,IAHJC,kBAGI,aAFJC,iBAEI,MAFQ,GAER,MADJC,kBACI,SACEC,EAAgBH,EAAD,aAA8CN,GAA9C,mBAA0BA,GAC/C,OACE,cAAC,IAAD,yBACEhQ,MAAK,eAAOuQ,IACPP,EAAY,CAAExR,UAAWiS,EAAcC,SAAS,GAAS,IAFhE,aAIE,cAAC,IAAD,CAAUlS,UAAWA,EAArB,SACIgS,EAuCA,eAAC,WAAD,WACE,8BACE,mBAAGxQ,MAAK,eAAOoQ,GAAc5R,UAAU,YAAvC,SACGsE,MAGL,qBAAKtE,UAAU,oDAAf,SACG0E,GAGC,eAAC,WAAD,WACE,8BACGA,GAGC,oBACE1E,UAAWmD,IAAW,YAAD,aACnB,QAAS0O,GACRA,EAAcA,IAEjBrQ,MAAK,aACHE,MAAK,OAAEgQ,QAAF,IAAEA,IAAkB,WACtBC,GAPP,SAUGF,MAIP,qBACEzR,UAAS,uCACP0B,EAAK,mBAAeA,GAAU,oBAFlC,SAKE,qBAAK1B,UAAU,iBAAf,SAAiCqC,cAxE3C,qBAAKrC,UAAU,oDAAf,SACG0E,GAGC,eAAC,WAAD,WACE,gCACGA,GAGC,oBACE1E,UAAWmD,IAAW,YAAD,aACnB,QAAS0O,GACRA,EAAcA,IAEjBrQ,MAAK,aACHE,MAAK,OAAEgQ,QAAF,IAAEA,IAAkB,WACtBC,GAPP,SAUGF,IAIL,mBAAGjQ,MAAK,eAAOoQ,GAAc5R,UAAU,YAAvC,SACGsE,OAGL,qBACEtE,UAAS,uCACP0B,EAAK,mBAAeA,GAAU,oBAFlC,SAKE,qBAAK1B,UAAU,iBAAf,SAAiCqC","file":"static/js/53.127860c7.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors, sortedObject } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"../store\"\nimport { getDataList as getDataListApp } from \"../../app/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport classnames from \"classnames\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const storeApp = useSelector((state) => state.apps_app)\n  const storeUnit = useSelector((state) => state.units)\n  const [selectedData, setSelectedData] = useState(store.selectedData)\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [idApp, setIdApp] = useState(null)\n  const [unitOptions, setUnitOptions] = useState([])\n  const [unitOptionsSelected, setUnitOptionsSelected] = useState({})\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(store.selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = (data) => {\n    data[\"id_unit\"] = unitOptionsSelected.value\n    data[\"id_app\"] = idApp.value\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = (data) => {\n    if (\n      Object.values(data).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      // console.log(unitOptionsSelected)\n      data[\"id_unit\"] = unitOptionsSelected\n      data[\"id_app\"] = idApp\n      delete data[\"description\"]\n      // console.log(data)\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(data)).then((res) => {\n        //\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n          if (detailPage) {\n            dispatch(getDataById(id))\n          }\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  const handleChangeUnit = (e) => {\n    console.log(e)\n    setUnitOptionsSelected(e.value)\n    // setUnitOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\n  }\n\n  useEffect(() => {\n    if (storeApp.data.length === 0 || !storeApp.isLoading) {\n      dispatch(getDataListApp({}))\n    }\n\n    setIdApp(\n      storeApp.dataDropdown.filter(\n        (el) => el.value === store.selectedData?.id_app\n      )\n    )\n    const unitOptions = storeUnit.dataDropdown.filter((x) => x.value !== \"\")\n    setUnitOptions(unitOptions)\n    setUnitOptionsSelected(\n      unitOptions.filter((el) => el.value === store.selectedData?.id_unit)\n    )\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"domain\">\n                  {t(\"Domain Address\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.domain ?? \"\"}\n                  control={control}\n                  id=\"domain\"\n                  name=\"domain\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.domain\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"domain\"\n                      invalid={errors.domain && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"id_app\">\n                  {t(\"App\")}\n                </Label>\n                <Select\n                  id=\"id_app\"\n                  theme={selectThemeColors}\n                  defaultValue={storeApp.dataDropdown.filter(\n                    (el) => el.value === selectedData?.id_app\n                  )}\n                  onChange={(data) => {\n                    setIdApp(data.value)\n                  }}\n                  options={storeApp.dataDropdown}\n                  className={classnames(\"react-select\", {\n                    \"is-invalid\": idApp === null\n                  })}\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"id_unit\">\n                  {t(\"Unit\")}\n                </Label>\n                <Select\n                  id=\"id_unit\"\n                  isClearable={false}\n                  theme={selectThemeColors}\n                  closeMenuOnSelect={true}\n                  defaultValue={storeUnit.dataDropdown.filter(\n                    (el) => el.value === selectedData?.id_unit\n                  )}\n                  onChange={(data) => {\n                    handleChangeUnit(data)\n                  }}\n                  options={unitOptions}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"description\">\n                  {t(\"Description\")}\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.description ?? \"\"}\n                  control={control}\n                  id=\"description\"\n                  name=\"description\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.domain\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      type=\"textarea\"\n                      id=\"description\"\n                      invalid={errors.description && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n","import { Fragment, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport Table from \"./Table\"\nimport { Row, Col } from \"reactstrap\"\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\nimport Icon from \"@mui/material/Icon\"\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\nimport \"./style.scss\"\nimport {\n  storeName,\n  getAlwaysGrid,\n  getApiSummaryData,\n  getSummaryData\n} from \"./store\"\nimport { Skeleton } from \"@mui/material\"\n\nconst List = () => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  useEffect(() => {\n    if (\n      getApiSummaryData &&\n      (store.dataSummary?.length === 0 ||\n        (!store.isLoadingSummary && getAlwaysGrid))\n    ) {\n      dispatch(getSummaryData({}))\n    }\n  }, [dispatch, store.dataSummary?.length])\n\n  const colors = [\n    \"primary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"info\",\n    \"secondary\"\n  ]\n\n  return (\n    <div className=\"app-user-list\">\n      {getApiSummaryData && (\n        <Row>\n          {store.dataSummary?.map((item, index) => {\n            return (\n              <Col>\n                <StatsHorizontal\n                  color={colors[index]}\n                  statTitle={`${t(item.title)}`}\n                  icon={\n                    item.icon ? (\n                      <Icon\n                        baseClassName=\"material-icons-outlined\"\n                        fontSize=\"20\"\n                      >\n                        {item.icon}\n                      </Icon>\n                    ) : (\n                      <Icon\n                        baseClassName=\"material-icons-outlined\"\n                        fontSize=\"20\"\n                      >\n                        lightbulb\n                      </Icon>\n                    )\n                  }\n                  renderStats={\n                    store.isLoadingSummary ? (\n                      <Skeleton\n                        sx={{ bgcolor: \"#eef2f8\" }}\n                        animation=\"wave\"\n                        height={25}\n                        width={40}\n                        className=\"fw-bolder mb-75\"\n                      />\n                    ) : (\n                      <h3 className=\"fw-bolder mb-75\">\n                        {item.count_format ?? item.count}\n                      </h3>\n                    )\n                  }\n                />\n              </Col>\n            )\n          })}\n        </Row>\n      )}\n      <Table />\n    </div>\n  )\n}\n\nexport default List\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef\n} from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  deleteData,\n  deleteSelectedRowData\n} from \"./store\"\nimport { getDataList as getDataListApp } from \"../app/store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\n\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Button,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  CardText\n} from \"reactstrap\"\n\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\n\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport Avatar from \"@components/avatar\"\nimport { Link } from \"react-router-dom\"\nconst MySwal = withReactContent(Swal)\n\n// ** Bootstrap Checkbox Component\nconst BootstrapCheckbox = forwardRef((props, ref) => (\n  <div className=\"form-check\">\n    <Input type=\"checkbox\" ref={ref} {...props} />\n  </div>\n))\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  toggleSidebar,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm,\n  selectedRow,\n  handleDeleteSelected\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const storeInvoice = useSelector((state) => state.invoices)\n  const userData = getUserData()\n\n  return (\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\n      <Row>\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\n          <div className=\"d-flex align-items-center w-100\">\n            <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n            <Input\n              className=\"mx-50\"\n              type=\"select\"\n              id=\"rows-per-page\"\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{ width: \"5rem\" }}\n            >\n              <option value=\"10\">10</option>\n              <option value=\"25\">25</option>\n              <option value=\"50\">50</option>\n            </Input>\n            <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n          </div>\n        </Col>\n        <Col\n          xl=\"8\"\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\n        >\n          {selectedRow?.length > 0 &&\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) ? (\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n              <Button\n                className=\"delete-users\"\n                color=\"danger\"\n                onClick={handleDeleteSelected}\n              >\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\n              </Button>\n            </div>\n          ) : null}\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n\n          <div className=\"d-flex align-items-center table-header-actions\">\n            <UncontrolledDropdown className=\"me-1\">\n              <DropdownToggle color=\"secondary\" caret outline>\n                <Share className=\"font-small-4 me-50\" />\n                <span className=\"align-middle\">{t(\"Export\")}</span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"pdf\",\n                        dataYear: userData.dataYear,\n                        print: true,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <Printer className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">{t(\"Print\")}</span>\n                </DropdownItem>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"pdf\",\n                        dataYear: userData.dataYear,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <File className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">PDF</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"xls\",\n                        dataYear: userData.dataYear,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <Grid className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Excel</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  className=\"w-100\"\n                  // onClick={() => downloadCSV(store.data)}\n                  onClick={() =>\n                    dispatch(\n                      getInvoice({\n                        rpt_name: \"sample\",\n                        output_type: \"csv\",\n                        dataYear: userData.dataYear,\n                        as_attachment: true,\n                        par_UNITKEY: 139,\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\n                      })\n                    )\n                  }\n                >\n                  <FileText className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">CSV</span>\n                </DropdownItem>\n\n                {/* <DropdownItem className=\"w-100\">\n                  <Copy className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Copy</span>\n                </DropdownItem> */}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n\n            {ability.can(\n              \"post\",\n              sessionStorage.getItem(\"current_page_perm\")\n            ) ? (\n              <Button\n                className=\"add-new-user\"\n                color=\"primary\"\n                onClick={toggleSidebar}\n                // onClick={handleAdd}\n              >\n                {t(\"Add New\")} {t(pageTitle)}\n              </Button>\n            ) : null}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst List = () => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const storeApp = useSelector((state) => state.apps_app)\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const { colors } = useContext(ThemeColors)\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [selectedRows, setSelectedRows] = useState([])\n  const [toggleCleared, setToggleCleared] = useState(false)\n\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n\n  const handleEdit = (rowData) => {\n    setFormState(\"edit\")\n    if (!detailFromGrid) {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(getDataById(rowData.id)).then((res) => {\n        if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    } else {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(setDataById(rowData)).then(() => {\n        if (storeApp.data.length === 0 && !storeApp.isLoading) {\n          dispatch(getDataListApp({})).then((res) => {\n            setLoading(false)\n            setShowModal(true)\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    // console.log(\"here\")\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const handleDeleteSelected = async () => {\n    const countSelectedCopy = selectedRows.length\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\n        \"selected data. Deleted data cannot be recovered\"\n      )}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\n        pageTitle\n      )}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\n      )\n      setLoading(true)\n      const values = selectedRows.map((a) => a.id)\n      // console.log(values)\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setSelectedRows([])\n          setToggleCleared(!toggleCleared)\n          setLoading(false)\n          toast.success(\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\n            {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            }\n          )\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /////PAGINATION SERVERSIDE\n  const handlePagination = (page) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  const handleDebounceFn = (inputValue) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        search: inputValue,\n        sort,\n        page: currentPage,\n        length: rowsPerPage\n      })\n    )\n  }\n\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\n\n  const handleFilter = (event) => {\n    setSearchTerm(event)\n    debounceFn(event)\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage\n      })\n    )\n  }\n\n  const handleRowSelected = useCallback((state) => {\n    setSelectedRows(state.selectedRows)\n  }, [])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const renderCell = (row, column) => {\n    const field = row[column.fieldName]\n    const dataFormat = column.dataFormat\n    if (dataFormat) {\n      if (dataFormat.includes(\":\")) {\n        const columnTypeFormat = dataFormat.split(\":\")\n        const columnType = columnTypeFormat[0]\n        const columnFormat = columnTypeFormat[1]\n        let columnFormated = row[column.fieldName]\n        if (columnType === \"date\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        if (columnType === \"datetime\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        return columnFormated\n      }\n    }\n    return row[column.fieldName]\n  }\n\n  const columns = [\n    ...store.dynamicColumns.map((column) => ({\n      name: column.columnName,\n      sortField: column.fieldName,\n      center: false,\n      sortable: true,\n      selector: (row) => row[column.fieldName],\n      cell: (row) => renderCell(row, column)\n    })),\n    {\n      name: t(\"Domain\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row.domain,\n      cell: (row) => (\n        <a target=\"_blank\" href={row.domain} title={row.domain}>\n          {row.domain}\n        </a>\n      )\n    },\n    {\n      name: t(\"App\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row?.app_logo,\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row?.app_logo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.app_logo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"25\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : (\n            <Avatar\n              initials\n              className=\"me-1\"\n              // color={row.avatarColor}\n              content={row?.app_name ?? \"\"}\n            />\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row.app_name}</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"Unit\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row?.unit_logo,\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row?.unit_logo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.unit_logo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"30\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : (\n            <Avatar\n              color={\"light-primary\"}\n              initials\n              className=\"me-1\"\n              content={row?.unit_name ?? \"\"}\n            />\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row?.unit_name}</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"App Alias\"),\n      sortField: \"attributes\",\n      center: false,\n      sortable: false,\n      selector: (row) => row.attributes?.app_name_alias,\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row.attributes?.app_logo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.app_logo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"30\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : (\n            row?.attributes?.app_logo && (\n              <Avatar\n                initials\n                className=\"me-1\"\n                width=\"32\"\n                height=\"32\"\n                imgHeight=\"30\"\n                imgWidth=\"30\"\n                color={\"light-primary\"}\n                content={row?.attributes?.app_name_alias ?? \"\"}\n              />\n            )\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row.attributes?.app_name_alias}</span>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"Description\"),\n      sortField: \"description\",\n      center: false,\n      sortable: false,\n      selector: (row) => row.attributes?.app_name_alias,\n      cell: (row) => row.description\n    },\n    {\n      name: t(\"Actions\"),\n      center: true,\n      width: \"140px\",\n      cell: (row) => (\n        <GlobalActionsTable\n          row={row}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n        />\n      )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: t(column.name),\n            ...column,\n            sortable: false,\n            cell: (row) =>\n              column.name === \"Actions\" ? (\n                <>\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    className=\"ms-2 me-1\"\n                    width={30}\n                    height={40}\n                  />\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    width={30}\n                    height={40}\n                  />\n                </>\n              ) : (\n                <Skeleton\n                  sx={{ bgcolor: colors.dark.light }}\n                  animation=\"wave\"\n                  width=\"100%\"\n                  height={40}\n                />\n              )\n          }))\n        : columns.map((column) => ({\n            name: t(column.name),\n            ...column\n          })),\n    [store.isLoading, columns]\n  )\n\n  const dataToRender = () => {\n    const filters = {\n      search: searchTerm\n    }\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(\n        getDataList({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage\n        })\n      )\n    }\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              responsive\n              pagination\n              paginationServer\n              paginationTotalRows={store.total}\n              paginationComponent={CustomPagination}\n              selectableRows\n              onSelectedRowsChange={handleRowSelected}\n              selectableRowsHighlight\n              // onRowClicked={handleRowSelected}\n              clearSelectedRows={toggleCleared}\n              selectableRowsComponent={BootstrapCheckbox}\n              noDataComponent={<NoDataDisplay />}\n              // fixedHeader\n              // fixedHeaderScrollHeight=\"600px\"\n              style={{ \"min-height\": \"400px\" }}\n              highlightOnHover\n              pointerOnHover\n              columns={tableColumns}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  toggleSidebar={toggleSidebar}\n                  selectedRow={selectedRows}\n                  handleDeleteSelected={handleDeleteSelected}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={false}\n          setFormState={setFormState}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n","export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n","// ** Third Party Components\nimport PropTypes from \"prop-types\"\nimport classnames from \"classnames\"\n\n// ** Reactstrap Imports\nimport { Card, CardBody } from \"reactstrap\"\nimport { Fragment } from \"react\"\n\nconst StatsHorizontal = ({\n  icon,\n  color,\n  cardColor,\n  stats,\n  renderStats,\n  statTitle,\n  className,\n  countTextColor,\n  countTextStyle = {},\n  titleStyle = {},\n  statsMargin,\n  solidColor = false,\n  cardStyle = {},\n  titleOnTop = false\n}) => {\n  const cardColorFix = !solidColor ? `bg-light-${cardColor}` : `bg-${cardColor}`\n  return (\n    <Card\n      style={{ ...cardStyle }}\n      {...(cardColor ? { className: cardColorFix, inverse: true } : {})}\n    >\n      <CardBody className={className}>\n        {!titleOnTop ? (\n          <div className=\"d-flex justify-content-between align-items-center\">\n            {renderStats ? (\n              renderStats\n            ) : (\n              <Fragment>\n                <div>\n                  {renderStats ? (\n                    renderStats\n                  ) : (\n                    <h3\n                      className={classnames(\"fw-bolder\", {\n                        \"mb-0\": !statsMargin,\n                        [statsMargin]: statsMargin\n                      })}\n                      style={{\n                        color: countTextColor ?? \"#5e5873\",\n                        ...countTextStyle\n                      }}\n                    >\n                      {stats}\n                    </h3>\n                  )}\n\n                  <p style={{ ...titleStyle }} className=\"card-text\">\n                    {statTitle}\n                  </p>\n                </div>\n                <div\n                  className={`avatar avatar-stats p-50 m-0 ${\n                    color ? `bg-light-${color}` : \"bg-light-primary\"\n                  }`}\n                >\n                  <div className=\"avatar-content\">{icon}</div>\n                </div>\n              </Fragment>\n            )}\n          </div>\n        ) : (\n          <Fragment>\n            <div>\n              <p style={{ ...titleStyle }} className=\"card-text\">\n                {statTitle}\n              </p>\n            </div>\n            <div className=\"d-flex justify-content-between align-items-center\">\n              {renderStats ? (\n                renderStats\n              ) : (\n                <Fragment>\n                  <div>\n                    {renderStats ? (\n                      renderStats\n                    ) : (\n                      <h3\n                        className={classnames(\"fw-bolder\", {\n                          \"mb-0\": !statsMargin,\n                          [statsMargin]: statsMargin\n                        })}\n                        style={{\n                          color: countTextColor ?? \"#5e5873\",\n                          ...countTextStyle\n                        }}\n                      >\n                        {stats}\n                      </h3>\n                    )}\n                  </div>\n                  <div\n                    className={`avatar avatar-stats p-50 m-0 ${\n                      color ? `bg-light-${color}` : \"bg-light-primary\"\n                    }`}\n                  >\n                    <div className=\"avatar-content\">{icon}</div>\n                  </div>\n                </Fragment>\n              )}\n            </div>\n          </Fragment>\n        )}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StatsHorizontal\n\n// ** PropTypes\nStatsHorizontal.propTypes = {\n  stats: PropTypes.string,\n  renderStats: PropTypes.any,\n  className: PropTypes.string,\n  icon: PropTypes.element,\n  color: PropTypes.string,\n  cardColor: PropTypes.string,\n  statTitle: PropTypes.string,\n  statsMargin: PropTypes.oneOf([\n    \"mb-0\",\n    \"mb-25\",\n    \"mb-50\",\n    \"mb-75\",\n    \"mb-1\",\n    \"mb-2\",\n    \"mb-3\",\n    \"mb-4\",\n    \"mb-5\"\n  ])\n}\n"],"sourceRoot":""}