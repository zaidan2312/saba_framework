{"version":3,"sources":["views/apps/permission/detail/index.js","views/apps/permission/Form.js","../node_modules/@mui/icons-material/esm/MenuOpen.js"],"names":["DetailPage","t","useTranslation","useParams","id","pageType","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","useState","setLoadingText","navigate","useNavigate","active","setActive","dynamicComponents","setDynamicComponents","sortedObject","unordered","Object","keys","sort","reduce","obj","key","updateDataToApi","data","storeData","selectedData","JSON","stringify","countChanges","values","every","field","pageTitle","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","error","payload","message","danger","length","setError","type","icon","postDataToApi","postData","handleReset","resetSelectedData","useEffect","isLoadingDetail","parseInt","getDataById","componentsImport","dynamicFormRelation","extraCrud","i","crudName","path_name","MyComponent","lazy","lookupMode","lookupMode_defaultFilter","replaceAll","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","lookupMode_onChange","lookupMode_defaultValue","lookupMode_isM2MDefValFromGrid","className","blocking","loader","undefined","xl","lg","xs","order","md","size","formState","pills","map","item","index","onClick","tab","crudLabel","activeTab","tabId","crudDescription","tag","to","FormAddEdit","useForm","control","handleSubmit","errors","onSubmit","for","defaultValue","title","name","render","invalid","description","subject","outline","createSvgIcon","_jsx","d"],"mappings":"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","file":"static/js/65.447390af.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  lazy,\n  Suspense\n} from \"react\"\nimport { useParams, Link, useNavigate } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Alert,\n  Card,\n  CardBody,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText,\n  CardHeader,\n  CardTitle,\n  Nav,\n  NavItem,\n  NavLink,\n  TabContent,\n  TabPane\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById,\n  extraCrud\n} from \"../store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport FormAddEdit from \"../Form\"\nimport { MenuOpen, Link as LinkIcon } from \"@mui/icons-material\"\n\nconst DetailPage = () => {\n  const { t } = useTranslation()\n  const { id, pageType } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const navigate = useNavigate()\n  const [active, setActive] = useState(\"1\")\n  const toggleTab = (tab) => {\n    if (active !== tab) {\n      setActive(tab)\n    }\n  }\n\n  const allStore = useSelector((state) => state)\n  const [dynamicComponents, setDynamicComponents] = useState({})\n\n  function sortedObject(unordered) {\n    return Object.keys(unordered)\n      .sort()\n      .reduce((obj, key) => {\n        obj[key] = unordered[key]\n        return obj\n      }, {})\n  }\n\n  const countChanges = (data) => {\n    if (pageType === \"edit\") {\n      const storeData = { ...sortedObject(store.selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = (data) => {\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            navigate(-1)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = (data) => {\n    if (\n      Object.values(data).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(data)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          navigate(-1)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  function handleReset() {\n    dispatch(resetSelectedData())\n    // setpageType(\"add\")\n    return navigate(-1)\n  }\n\n  useEffect(() => {\n    // console.log(pageType)\n    // if (!store.isLoadingDetail) {\n    // console.log(store.selectedData?.id !== parseInt(id))\n    if (\n      pageType === \"edit\" &&\n      !store.isLoadingDetail &&\n      (!store.selectedData || store.selectedData?.id !== parseInt(id))\n    ) {\n      // setLoadingText(\n      //   `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      // )\n      // setLoading(true)\n      dispatch(getDataById(id)).then((res) => {\n        if (res.meta.requestStatus === \"rejected\") {\n          // setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        } else {\n          // setLoading(false)\n          // setShowModal(true)\n        }\n      })\n\n      // DYNAMIC IMPORT COMPONENTS\n      let componentsImport = {}\n      const dynamicFormRelation = extraCrud\n      for (let i = 0; i < dynamicFormRelation.length; i++) {\n        const crudName = dynamicFormRelation[i][\"crudName\"]\n        const crudLabel = dynamicFormRelation[i][\"crudLabel\"]\n        const path_name = dynamicFormRelation[i][\"crudName\"]\n\n        ////////////OTHERS CRUD\n        const MyComponent = lazy(() => import(`../../${path_name}`))\n        componentsImport[`${path_name}_comp`] = (\n          <Fragment>\n            <MyComponent\n              key={`extraCrud_${crudName}`}\n              lookupMode={true}\n              lookupMode_defaultFilter={{\n                [`filter_${storeName.replaceAll(\"apps_\", \"id_\")}`]:\n                  parseInt(id)\n              }}\n              lookupMode_fieldName={crudName}\n              lookupMode_dropdown={false}\n              lookupMode_isMulti={null}\n              lookupMode_onChange={null}\n              lookupMode_defaultValue={null}\n              lookupMode_isM2MDefValFromGrid={null}\n            />\n          </Fragment>\n        )\n      }\n\n      setDynamicComponents(componentsImport)\n    }\n    // }\n  }, [dispatch, store.selectedData])\n\n  return pageType === \"edit\" ? (\n    !store.isLoadingDetail ? (\n      store.selectedData !== null && store.selectedData !== undefined ? (\n        <div className=\"app-user-view\">\n          <Row>\n            <Col xl=\"5\" lg=\"6\" xs={{ order: 1 }} md={{ order: 0, size: 6 }}>\n              <Card>\n                <CardHeader>\n                  <h2>\n                    {t(\"Edit\")} {t(pageTitle)}\n                  </h2>\n                </CardHeader>\n                <CardBody>\n                  <FormAddEdit\n                    formState=\"edit\"\n                    updateDataToApi={updateDataToApi}\n                    postDataToApi={postDataToApi}\n                    handleReset={handleReset}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n            <Col xl=\"7\" lg=\"7\" xs={{ order: 0 }} md={{ order: 1, size: 7 }}>\n              <Nav pills className=\"mb-2\">\n                {extraCrud.map((item, index) => {\n                  const path_name = item.crudName\n                  return (\n                    <NavItem key={`navItem_${index + 1}`}>\n                      <NavLink\n                        active={active === `${index + 1}`}\n                        onClick={() => toggleTab(`${index + 1}`)}\n                      >\n                        <MenuOpen className=\"font-medium-3 me-50\" />\n                        <span className=\"fw-bold\">{t(item.crudLabel)}</span>\n                      </NavLink>\n                    </NavItem>\n                  )\n                })}\n              </Nav>\n              <TabContent activeTab={active}>\n                {extraCrud.map((item, index) => {\n                  const path_name = item.crudName\n                  return (\n                    <TabPane\n                      key={`tabPane_${index + 1}`}\n                      tabId={`${index + 1}`}\n                    >\n                      <Card>\n                        {item.crudDescription && (\n                          <CardHeader>\n                            <CardTitle tag=\"h4\">\n                              {t(item.crudDescription)}\n                            </CardTitle>\n                          </CardHeader>\n                        )}\n                        <CardBody className=\"pt-1\">\n                          {dynamicComponents[`${path_name}_comp`]}\n                        </CardBody>\n                      </Card>\n                    </TabPane>\n                  )\n                })}\n              </TabContent>\n            </Col>\n          </Row>\n        </div>\n      ) : (\n        <Alert color=\"danger\">\n          <h4 className=\"alert-heading\">{t(\"User not found\")}</h4>\n          <div className=\"alert-body\">\n            {t(\"User with id\")}: {id}{\" \"}\n            {t(\"doesn't exist. Check list of all Users\")}:{\" \"}\n            <Link to=\"/apps/user/list\">{t(\"Users List\")}</Link>\n          </div>\n        </Alert>\n      )\n    ) : (\n      <Fragment>\n        <div className=\"app-user-view\">\n          <UILoader\n            className=\"mt-5\"\n            blocking={store.isLoadingDetail}\n            loader={<Loader />}\n          ></UILoader>\n        </div>\n      </Fragment>\n    )\n  ) : (\n    <div className=\"app-user-view\">\n      <Row>\n        <Col xl=\"12\" lg=\"12\" xs={{ order: 1 }} md={{ order: 0, size: 5 }}>\n          <Card>\n            <CardHeader>\n              <h2>\n                {t(\"Add\")} {t(pageTitle)}\n              </h2>\n            </CardHeader>\n            <CardBody>\n              <FormAddEdit\n                formState=\"add\"\n                updateDataToApi={updateDataToApi}\n                postDataToApi={postDataToApi}\n                handleReset={handleReset}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  )\n}\nexport default DetailPage\n","/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"./store\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst FormAddEdit = ({\n  formState,\n  updateDataToApi,\n  postDataToApi,\n  handleReset\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  return (\n    <Form\n      onSubmit={\n        formState === \"edit\"\n          ? handleSubmit(updateDataToApi)\n          : handleSubmit(postDataToApi)\n      }\n    >\n      <Row className=\"gy-1 pt-75\">\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"title\">\n            {t(\"Title\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.title ?? \"\"}\n            control={control}\n            id=\"title\"\n            name=\"title\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.title ? \"form-control is-invalid\" : \"form-control\"\n                }\n                id=\"title\"\n                invalid={errors.title && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"description\">\n            {t(\"Description\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.description ?? \"\"}\n            control={control}\n            id=\"description\"\n            name=\"description\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.description\n                    ? \"form-control is-invalid\"\n                    : \"form-control\"\n                }\n                id=\"description\"\n                invalid={errors.description && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"subject\">\n            {t(\"Subject\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.subject ?? \"\"}\n            control={control}\n            id=\"subject\"\n            name=\"subject\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.subject ? \"form-control is-invalid\" : \"form-control\"\n                }\n                id=\"subject\"\n                invalid={errors.subject && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col xs={12} className=\"text-center mt-2 pt-50\">\n          <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n            {t(\"Submit\")}\n          </Button>\n          <Button type=\"reset\" color=\"secondary\" outline onClick={handleReset}>\n            {t(\"Cancel\")}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nexport default FormAddEdit\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 18h13v-2H3v2zm0-5h10v-2H3v2zm0-7v2h13V6H3zm18 9.59L17.42 12 21 8.41 19.59 7l-5 5 5 5L21 15.59z\"\n}), 'MenuOpen');"],"sourceRoot":""}