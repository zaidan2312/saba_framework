{"version":3,"sources":["views/apps/role/modal/index.js","@core/components/ui-loader/index.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","useState","loadingText","setLoadingText","useForm","control","setError","handleSubmit","errors","Loader","className","sortedObject","unordered","Object","keys","sort","reduce","obj","key","handleReset","resetSelectedData","isOpen","toggle","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","onSubmit","data","storeData","selectedData","JSON","stringify","countChanges","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","length","type","icon","postData","md","xs","for","defaultValue","name","render","invalid","description","outline","onClick","UILoader","props","children","tag","overlayColor","Tag","classnames","backgroundColor","defaultProps"],"mappings":"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","file":"static/js/52.cb74ffb2.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport UILoader from \"@components/ui-loader\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport \"moment/locale/id\"\nimport { Fragment, useContext, useState } from \"react\"\nimport { Controller, useForm } from \"react-hook-form\"\nimport toast from \"react-hot-toast\"\nimport { useTranslation } from \"react-i18next\"\nimport { useParams } from \"react-router-dom\"\nimport {\n  Button,\n  CardText,\n  Col,\n  Form,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  Row\n} from \"reactstrap\"\nimport {\n  getDataById,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  storeName\n} from \"../store\"\n\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [tgl1, setTgl1] = useState(null)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n        <CardText className=\"mb-0 mt-1\">{t(loadingText)}...</CardText>\n      </Fragment>\n    )\n  }\n\n  function sortedObject(unordered) {\n    return Object.keys(unordered)\n      .sort()\n      .reduce((obj, key) => {\n        obj[key] = unordered[key]\n        return obj\n      }, {})\n  }\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(store.selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n  const onChangeTgl1 = (event) => {\n    setTgl1(event)\n  }\n\n  const updateDataToApi = (data) => {\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = (data) => {\n    if (\n      Object.values(data).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(data)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n          if (detailPage) {\n            dispatch(getDataById(id))\n          }\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"name\">\n                  {t(\"Name\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.name ?? \"\"}\n                  control={control}\n                  id=\"name\"\n                  name=\"name\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.name ? \"form-control is-invalid\" : \"form-control\"\n                      }\n                      id=\"name\"\n                      invalid={errors.name && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"description\">\n                  {t(\"Description\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.description ?? \"\"}\n                  control={control}\n                  id=\"description\"\n                  name=\"description\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.description\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"description\"\n                      invalid={errors.description && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n","// ** React Imports\nimport { Fragment } from \"react\"\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\"\nimport classnames from \"classnames\"\n\n// ** Reactstrap Imports\nimport { Spinner } from \"reactstrap\"\n\n// ** Styles\nimport \"./ui-loader.scss\"\n\nconst UILoader = (props) => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag\n      className={classnames(\"ui-loader\", {\n        [className]: className,\n        show: blocking\n      })}\n    >\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className=\"overlay\" /*eslint-disable */\n            {...(blocking && overlayColor\n              ? { style: { backgroundColor: overlayColor } }\n              : {})}\n            /*eslint-enable */\n          ></div>\n          <div className=\"loader\">{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: \"div\",\n  blocking: false,\n  loader: <Spinner color=\"primary\" />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n"],"sourceRoot":""}