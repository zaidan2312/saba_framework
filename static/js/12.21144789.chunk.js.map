{"version":3,"sources":["views/apps/user/modal/index.js","@core/components/sidebar/index.js","views/apps/user/Sidebar.js","views/apps/user/Table.js","../../src/mounts.js","../../src/index.js","@core/components/input-password-toggle/index.js","shared/GlobalUnitDropdown.js"],"names":["withReactContent","Swal","ModalAddEdit","show","setShow","detailPage","useState","unitOptionsSelected","setUnitOptionsSelected","idRole","setIdRole","employeeOptionsSelected","setEmployeeOptionsSelected","setFormEdited","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","users","storeUnit","units","storeRole","roles","colors","useContext","ThemeColors","selectedUser","setSelectedUser","useForm","defaultValues","username","name","phone","reset","control","setError","handleSubmit","errors","formState","Loader","className","useEffect","data","length","isLoading","getUnits","getData","data_employee","isLoading_employee","getDataEmployee","id_employee","filter","el","map","item","value","label","FirstName","LastName","id_role","isOpen","toggle","blocking","isLoadingAddEdit","isLoadingDetail","loader","onSubmit","unitOptionsSelect","member_of","formEdited","JSON","stringify","countChanges","Object","values","every","field","updateUser","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getUser","error","payload","danger","key","type","icon","md","xs","for","defaultValue","render","placeholder","invalid","disabled","email","theme","selectThemeColors","onChange","options","classnames","classNamePrefix","isClearable","e","Array","isArray","x","closeMenuOnSelect","isMulti","outline","onClick","Sidebar","props","open","size","title","width","children","closeBtn","toggleSidebar","bodyClassName","contentClassName","wrapperClassName","headerClassName","rest","renderCloseBtn","modalClassName","undefined","String","close","tag","wheelPropagation","password","SidebarNewUsers","setData","idUnit","setIdUnit","setValue","selectedUnit","onClosed","checkIsValid","addUser","avatar","status","message","error_reason","rules","required","pattern","minLength","maxLength","vaue","MySwal","CustomHeader","handlePerPage","rowsPerPage","handleFilter","searchTerm","ability","AbilityContext","downloadCSV","array","link","document","createElement","csv","result","keys","join","forEach","ctr","convertArrayOfObjectsToCSV","match","setAttribute","encodeURI","click","xl","htmlFor","target","caret","can","sessionStorage","getItem","crudTitle","UsersList","sort_dir","setSortDir","setSearchTerm","params","page","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","sidebarOpen","setSidebarOpen","currentRole","setCurrentRole","currentUnit","setCurrentUnit","number","currentStatus","setCurrentStatus","roleOptions","setRoleOptions","loading","setLoading","showModal","setShowModal","handleCloseModal","revivalBack","neutralizeBack","roleOptionss","unshift","getDataRole","search","filter_role","filter_status","filter_unit","statusObj","pending","active","inactive","renderClient","row","img","height","initials","avatarColor","content","columns","sortable","minWidth","sortField","selector","cell","to","role_name","roleObj","public","class","User","viewer","Eye","editor","Edit2","admin","Settings","super_user","Slack","Icon","renderRole","billing","Moment","joined_date","format","is_active","pill","end","Link","href","preventDefault","handleEdit","handleDelete","tableColumns","useMemo","column","sx","bgcolor","dark","light","animation","statusOptions","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteUser","parseInt","parentChange","colMode","noHeader","subHeader","sortServer","pagination","responsive","paginationServer","onSort","sortDirection","sortIcon","paginationComponent","count","Number","Math","ceil","total","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","filters","isFiltered","some","k","fill","dataToRender","subHeaderComponent","val","currentTarget","mounts","getter","swal","noop","extractReactParams","reactParams","otherParams","mountKeys","mount","React","domElement","ReactDOM","unrender","_main","this","__mountedDomElements","__params","superDidOpen","superDidDestroy","didOpen","popup","didDestroy","update","argsToParams","args","ParentSwal","InputPasswordToggle","forwardRef","ref","hideIcon","showIcon","visible","iconSize","inputClassName","inputVisibility","setInputVisibility","renderIcon","defaultProps","GlobalUnitDropdown","colSize","initialValue","colClassName","getUserData","unitOptions","setUnitOptions","handleChange","dataDropdown","getOptionLabel","option","code"],"mappings":"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","file":"static/js/12.21144789.chunk.js","sourcesContent":["import { useState, Fragment, useContext, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  CardBody,\n  Button,\n  Badge,\n  Modal,\n  Input,\n  Label,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport Moment from \"moment\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\n\nimport Swal from \"sweetalert2\"\nimport Select from \"react-select\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { updateUser, getUser, getDataEmployee } from \"../store\"\nimport { getUnits } from \"../../unit/store\"\nimport { getData } from \"../../roles-permissions/store/role\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst MySwal = withReactContent(Swal)\n\nconst ModalAddEdit = ({ show, setShow, detailPage }) => {\n  const [unitOptions, setUnitOptions] = useState([])\n  const [unitOptionsSelected, setUnitOptionsSelected] = useState([])\n  const [idRole, setIdRole] = useState(null)\n  const [employeeOptionsSelected, setEmployeeOptionsSelected] = useState([])\n  const [formEdited, setFormEdited] = useState(false)\n  const { t } = useTranslation()\n  // const [id, setId] = useState(null)\n  let { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state.users)\n  const storeUnit = useSelector((state) => state.units)\n  const storeRole = useSelector((state) => state.roles)\n  const { colors } = useContext(ThemeColors)\n  const [selectedUser, setSelectedUser] = useState(store.selectedUser)\n  const {\n    reset,\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({\n    defaultValues: {\n      username: selectedUser?.username,\n      name: selectedUser?.name,\n      phone: selectedUser?.phone ?? \"\"\n    }\n  })\n\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n        <CardText className=\"mb-0 mt-1 text-white\">\n          {t(\"Please Wait\")}...\n        </CardText>\n      </Fragment>\n    )\n  }\n\n  const handleChangeUnit = (e) => {\n    // console.log(e)\n    setUnitOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\n    // console.log(unitOptionsSelected)\n  }\n\n  const handleChangeEmployee = (e) => {\n    // console.log(e)\n    setEmployeeOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\n    // console.log(unitOptionsSelected)\n  }\n\n  const countChanges = (data) => {\n    // console.log(data)\n\n    const unitOptionsSelect =\n      selectedUser.member_of !== null\n        ? selectedUser?.member_of.map((item) => ({\n            value: item.id,\n            label: item.name\n          }))\n        : []\n\n    // console.log(unitOptionsSelect)\n    // console.log(unitOptionsSelected)\n    const formEdited =\n      selectedUser.name !== data.name ||\n      selectedUser.username !== data.username ||\n      (selectedUser.phone ?? \"\") !== data.phone ||\n      JSON.stringify(unitOptionsSelect) !==\n        JSON.stringify(unitOptionsSelected) ||\n      idRole !== selectedUser.id_role\n    setFormEdited(true)\n    return formEdited\n  }\n\n  const onSubmit = (data) => {\n    if (countChanges(data)) {\n      // console.log(countChanges(data))\n      if (\n        Object.values(data).every((field) => {\n          return field.length > 0 || field === \"\"\n        })\n      ) {\n        if (data.phone === \"\") {\n          delete data.phone\n        }\n\n        data[\"id\"] = id ?? selectedUser.id\n        data[\"id_role\"] = idRole\n        data[\"id_employee\"] = employeeOptionsSelected?.id\n        data[\"member_of\"] = unitOptionsSelected\n        dispatch(updateUser(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated Data\")}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getUser(id))\n            }\n\n            // setUnitOptionsSelected(\n            //   selectedUser.member_of.map((item) => ({\n            //     value: item.id,\n            //     label: item.name\n            //   }))\n            // )\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(JSON.stringify(res.payload), {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const handleReset = () => {\n    reset({\n      username: selectedUser?.username,\n      name: selectedUser?.name\n    })\n  }\n\n  // ** Get data on mount\n  useEffect(() => {\n    // const { id } = useParams()\n    // console.log(this.props.match.params.id)\n    // if (!id) {\n    //   id = idRow\n    // }\n    setSelectedUser(store.selectedUser)\n    if (storeUnit.data.length === 0 && !storeUnit.isLoading) {\n      dispatch(getUnits())\n      setSelectedUser(store.selectedUser)\n    }\n\n    if (storeRole?.data.length === 0 && !storeRole.isLoading) {\n      dispatch(getData())\n    }\n\n    if (store?.data_employee.length === 0 && !store.isLoading_employee) {\n      dispatch(\n        getDataEmployee({\n          length: 200\n        })\n      )\n      if (store.data_employee && selectedUser?.id_employee) {\n        setEmployeeOptionsSelected(\n          store.data_employee\n            .filter((el) => el.id === selectedUser?.id_employee)\n            .map((item) => ({\n              value: item.id,\n              label: `${item.FirstName} ${item?.LastName ?? \"\"}`\n            }))\n        )\n      }\n    }\n\n    // console.log(storeUnit.data)\n    // console.log(unitOptions)\n    // console.log(unitOptionsSelected)\n\n    setIdRole(selectedUser?.id_role)\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => setShow(!show)}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={\n          (store.isLoadingAddEdit || store.isLoadingDetail) &&\n          !store.selectedUser\n        }\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => setShow(!show)}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h1 className=\"mb-1\">\n              {t(\"Edit\")} {t(\"User Information\")}\n            </h1>\n            <p>{t(\"Updating user details will receive a privacy audit.\")}</p>\n          </div>\n          <Form onSubmit={handleSubmit(onSubmit)}>\n            <Row className=\"gy-1 pt-75\">\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"name\">\n                  {t(\"Full Name\")}\n                </Label>\n                <Controller\n                  defaultValue=\"\"\n                  control={control}\n                  id=\"name\"\n                  name=\"name\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      id=\"name\"\n                      placeholder=\"John\"\n                      invalid={errors.name && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"username\">\n                  {t(\"Username\")}:\n                </Label>\n                <Controller\n                  defaultValue=\"\"\n                  control={control}\n                  id=\"username\"\n                  name=\"username\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      id=\"username\"\n                      placeholder=\"john.doe.007\"\n                      invalid={errors.username && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"email\">\n                  {t(\"Email\")}:\n                </Label>\n                <Input\n                  type=\"email\"\n                  id=\"email\"\n                  disabled\n                  defaultValue={selectedUser?.email}\n                  placeholder=\"example@domain.com\"\n                />\n              </Col>\n\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"phone\">\n                  {t(\"Contact\")}\n                </Label>\n                <Controller\n                  defaultValue=\"\"\n                  control={control}\n                  id=\"phone\"\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      value={selectedUser?.phone || \"\"}\n                      id=\"phone\"\n                      placeholder=\"+62 813 940 10XX X\"\n                    />\n                  )}\n                />\n              </Col>\n              <Col md={6} xs={12}>\n                <Label className=\"form-label\" for=\"id_role\">\n                  {t(\"Role\")}\n                </Label>\n                <Select\n                  id=\"id_role\"\n                  theme={selectThemeColors}\n                  defaultValue={storeRole.data\n                    .filter((el) => el.id === selectedUser?.id_role)\n                    .map((item) => ({\n                      value: item.id,\n                      label: item.name\n                    }))}\n                  onChange={(data) => {\n                    setIdRole(data.value)\n                  }}\n                  options={storeRole.data.map((item) => ({\n                    value: item.id,\n                    label: item.name\n                  }))}\n                  className={classnames(\"react-select\", {\n                    \"is-invalid\": idRole === null\n                  })}\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"id_employee\">\n                  {t(\"Employee\")}\n                </Label>\n                <Select\n                  id=\"id_employee\"\n                  isClearable={true}\n                  isLoading={store.isLoading_employee}\n                  theme={selectThemeColors}\n                  defaultValue={\n                    store.data_employee\n                      .filter((el) => el.id === selectedUser?.id_employee)\n                      .map((item) => ({\n                        value: item.id,\n                        label: `${item.FirstName} ${item?.LastName ?? \"\"}`\n                      })) ?? \"\"\n                  }\n                  onChange={(data) => {\n                    handleChangeEmployee(data)\n                  }}\n                  options={store.data_employee.map((item) => ({\n                    value: item.id,\n                    label: `${item.FirstName} ${item?.LastName ?? \"\"}`\n                  }))}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"member_of\">\n                  {t(\"Unit\")}\n                </Label>\n                <Select\n                  id=\"member_of\"\n                  isClearable={false}\n                  theme={selectThemeColors}\n                  closeMenuOnSelect={false}\n                  defaultValue={\n                    store.selectedUser?.member_of\n                      ? store.selectedUser?.member_of.map((item) => ({\n                          value: item.id,\n                          label: item.name\n                        }))\n                      : []\n                  }\n                  onChange={(data) => {\n                    handleChangeUnit(data)\n                  }}\n                  isMulti\n                  options={storeUnit.data\n                    .map((item) => ({\n                      value: item.id,\n                      label: item.name\n                    }))\n                    .filter((x) => x.value !== \"\")}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n","// ** Third Party Components\nimport { X } from \"react-feather\"\nimport Proptypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\n\nimport { Modal, ModalHeader, ModalBody } from \"reactstrap\"\n\nconst Sidebar = (props) => {\n  // ** Props\n  const {\n    open,\n    size,\n    title,\n    width,\n    children,\n    closeBtn,\n    className,\n    toggleSidebar,\n    bodyClassName,\n    contentClassName,\n    wrapperClassName,\n    headerClassName,\n    ...rest\n  } = props\n\n  // ** If user passes custom close btn render that else default close btn\n  const renderCloseBtn = closeBtn ? (\n    closeBtn\n  ) : (\n    <X className=\"cursor-pointer\" size={15} onClick={toggleSidebar} />\n  )\n\n  return (\n    <Modal\n      isOpen={open}\n      toggle={toggleSidebar}\n      contentClassName={classnames(\"overflow-hidden\", {\n        [contentClassName]: contentClassName\n      })}\n      modalClassName={classnames(\"modal-slide-in\", {\n        [wrapperClassName]: wrapperClassName\n      })}\n      className={classnames({\n        [className]: className,\n        \"sidebar-lg\": size === \"lg\",\n        \"sidebar-sm\": size === \"sm\"\n      })}\n      /*eslint-disable */\n      {...(width !== undefined\n        ? {\n            style: { width: String(width) + \"px\" },\n          }\n        : {})}\n      /*eslint-enable */\n      {...rest}\n    >\n      <ModalHeader\n        className={classnames({\n          [headerClassName]: headerClassName\n        })}\n        toggle={toggleSidebar}\n        close={renderCloseBtn}\n        tag=\"div\"\n      >\n        <h5 className=\"modal-title\">\n          <span className=\"align-middle\">{title}</span>\n        </h5>\n      </ModalHeader>\n      <PerfectScrollbar options={{ wheelPropagation: false }}>\n        <ModalBody\n          className={classnames(\"flex-grow-1\", {\n            [bodyClassName]: bodyClassName\n          })}\n        >\n          {children}\n        </ModalBody>\n      </PerfectScrollbar>\n    </Modal>\n  )\n}\n\nexport default Sidebar\n\n// ** PropTypes\nSidebar.propTypes = {\n  className: Proptypes.string,\n  bodyClassName: Proptypes.string,\n  open: Proptypes.bool.isRequired,\n  title: Proptypes.string.isRequired,\n  contentClassName: Proptypes.string,\n  wrapperClassName: Proptypes.string,\n  children: Proptypes.any.isRequired,\n  size: Proptypes.oneOf([\"sm\", \"lg\"]),\n  toggleSidebar: Proptypes.func.isRequired,\n  width: Proptypes.oneOfType([Proptypes.number, Proptypes.string])\n}\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n// ** React Import\nimport { useState, useContext, useEffect } from \"react\"\nimport Sidebar from \"@components/sidebar\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport classnames from \"classnames\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { Button, Label, FormText, Form, Input } from \"reactstrap\"\nimport store, { addUser } from \"@src/views/apps/user/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport toast from \"react-hot-toast\"\nimport { useTranslation } from \"react-i18next\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport InputPasswordToggle from \"@components/input-password-toggle\"\nconst defaultValues = {\n  email: \"\",\n  password: \"\",\n  phone: \"\",\n  member_of: \"\",\n  id_role: \"\",\n  name: \"\",\n  username: \"\"\n}\n\nconst checkIsValid = (data) => {\n  return Object.values(data).every((field) =>\n    typeof field === \"object\" || field !== \"member_of\"\n      ? field !== null && field !== \"\"\n      : field.length > 0\n  )\n}\n\nconst SidebarNewUsers = ({ open, toggleSidebar }) => {\n  // ** Hooks\n  const { t } = useTranslation()\n\n  // ** Theme Colors\n  const { colors } = useContext(ThemeColors)\n\n  // ** States\n  const [data, setData] = useState({})\n  const [idRole, setIdRole] = useState(3)\n  const [idUnit, setIdUnit] = useState([])\n  const store = useSelector((state) => state.users)\n  const storeRole = useSelector((state) => state.roles)\n  const storeUnit = useSelector((state) => state.units)\n  // ** Store Vars\n  const dispatch = useDispatch()\n\n  // ** Vars\n  const {\n    control,\n    setValue,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n\n  // ** Function to handle form submit\n  const onSubmit = (data) => {\n    // console.log(data)\n    data[\"member_of\"] = idUnit !== null ? idUnit.map((item) => item.value) : []\n    data[\"id_role\"] = idRole !== null ? idRole : null\n    setData(data)\n    // console.log(data)\n    if (checkIsValid(data)) {\n      dispatch(\n        addUser({\n          id_role: data?.id_role,\n          avatar: \"\",\n          status: 1,\n          email: data.email,\n          member_of: data?.member_of,\n          phone: data.phone,\n          name: data.name,\n          username: data.username,\n          password: data.password\n        })\n      ).then((res) => {\n        if (res.meta.requestStatus === \"fulfilled\") {\n          toggleSidebar()\n          toast.success(`${t(\"Successfully Create Data\")}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          // console.log(store.errorAddEdit)\n          let message = \"\"\n          if (res.payload.errors) {\n            message = Object.values(res.payload.errors)\n          } else if (res.payload.error_reason) {\n            message = res.payload.message\n          }\n          toast.error(`${t(message)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key].length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  const handleSidebarClosed = () => {\n    for (const key in defaultValues) {\n      setValue(key, \"\")\n    }\n    // setRole(null)\n  }\n\n  useEffect(() => {\n    const selectedUnit = storeUnit.data.map((item) => ({\n      value: item.id,\n      label: item.name\n    }))\n    // console.log(selectedUnit[0])\n    setIdUnit([selectedUnit[0]])\n  }, [dispatch, storeUnit.data.length])\n\n  return (\n    <Sidebar\n      size=\"lg\"\n      open={open}\n      title={t(\"New User\")}\n      headerClassName=\"mb-1\"\n      contentClassName=\"pt-0\"\n      toggleSidebar={toggleSidebar}\n      onClosed={handleSidebarClosed}\n    >\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"name\">\n            {t(\"Full Name\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue=\"\"\n            control={control}\n            rules={{\n              required: true,\n              pattern: {\n                value: /^[a-zA-Z\\s]*$/,\n                message: t(\"Invalid name, you can only use letters\")\n              }\n            }}\n            id=\"name\"\n            name=\"name\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                id=\"name\"\n                placeholder=\"John\"\n                invalid={errors.name && true}\n              />\n            )}\n          />\n          {errors.name && (\n            <FormText color=\"danger\">{t(errors.name.message)}</FormText>\n          )}\n        </div>\n\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"email\">\n            {t(\"Email\")} <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            name=\"email\"\n            control={control}\n            rules={{\n              required: {\n                value: true,\n                message: t(\"You need to specify a valid email address\")\n              },\n              pattern: {\n                value: /^\\S+@\\S+$/i,\n                message: t(\"Not valid email adreess.\")\n              }\n            }}\n            render={({ field }) => (\n              <Input\n                type=\"email\"\n                id=\"email\"\n                placeholder=\"john.doe@example.com\"\n                invalid={errors.email && true}\n                {...field}\n              />\n            )}\n          />\n          <FormText color=\"muted\">\n            {t(\"You can use letters, numbers & periods\")}\n          </FormText>\n        </div>\n\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"username\">\n            {t(\"Username\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue=\"\"\n            control={control}\n            rules={{\n              required: true,\n              minLength: {\n                value: 4,\n                message: t(\"minimum number of character is 4\")\n              },\n              maxLength: {\n                value: 15,\n                message: t(\"maximum number of character is 15\")\n              },\n              pattern: {\n                value:\n                  /^[a-zA-Z0-9]+([a-zA-Z0-9](_|-| )[a-zA-Z0-9])*[a-zA-Z0-9]+$/,\n                message: t(\n                  \"You can use letters and numbers without white space\"\n                )\n              }\n            }}\n            id=\"username\"\n            name=\"username\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                id=\"username\"\n                placeholder=\"john.doe.007\"\n                invalid={errors.username && true}\n              />\n            )}\n          />\n          {errors.username && (\n            <FormText color=\"danger\">{t(errors.username.message)}</FormText>\n          )}\n        </div>\n\n        <div className=\"mb-1\">\n          <div className=\"d-flex justify-content-between\">\n            <Label className=\"form-label\" for=\"login-password\">\n              {t(\"Password\")} <span className=\"text-danger\">*</span>\n            </Label>\n          </div>\n          <Controller\n            defaultValue=\"\"\n            id=\"password\"\n            name=\"password\"\n            control={control}\n            rules={{\n              required: {\n                value: true,\n                message: t(\"Password is required\")\n              },\n              minLength: {\n                value: 8,\n                message: t(\"Password must have at least 8 characters\")\n              }\n            }}\n            render={({ field }) => (\n              <InputPasswordToggle\n                className=\"input-group-merge\"\n                invalid={errors.password && true}\n                {...field}\n              />\n            )}\n          />\n          {errors.password && (\n            <FormText color=\"danger\">{t(errors.password.message)}</FormText>\n          )}\n        </div>\n\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"phone\">\n            {t(\"Mobile Phone Number\")}\n          </Label>\n          <Controller\n            defaultValue=\"\"\n            control={control}\n            rules={{\n              required: false,\n              pattern: {\n                value: /^[0-9+-]+$/,\n                message: \"This is not a valid mobile phone, try again!\"\n              },\n              minLength: {\n                value: 6,\n                message: \"This number is too short.\"\n              },\n              maxLength: {\n                value: 14,\n                message: \"...And now it's too long.\"\n              }\n            }}\n            id=\"phone\"\n            name=\"phone\"\n            render={({ field }) => (\n              <Input {...field} id=\"phone\" placeholder=\"+62 813 940 10XX X\" />\n            )}\n          />\n          {errors.phone && (\n            <FormText color=\"danger\">{t(errors.phone.message)}</FormText>\n          )}\n        </div>\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"id_unit\">\n            {t(\"Unit\")}\n          </Label>\n          <Select\n            id=\"id_unit\"\n            isClearable={false}\n            theme={selectThemeColors}\n            closeMenuOnSelect={false}\n            // defaultValue={null}\n            onChange={(data) => {\n              setIdUnit(data)\n            }}\n            defaultValue={\n              storeUnit.data.map((item) => ({\n                value: item.id,\n                label: item.name\n              }))[0]\n            }\n            isMulti\n            options={storeUnit.data.map((item) => ({\n              value: item.id,\n              label: item.name\n            }))}\n            className=\"react-select\"\n            classNamePrefix=\"select\"\n          />\n        </div>\n        <div className=\"mb-1\">\n          <Label for=\"role-select\">{t(\"Role\")}</Label>\n          <Select\n            id=\"id_role\"\n            isClearable={false}\n            options={storeRole.data.map((item) => ({\n              value: item.id,\n              label: item.name\n            }))}\n            defaultValue={{\n              label: \"editor\",\n              vaue: 3\n            }}\n            classNamePrefix=\"select\"\n            className={classnames(\"react-select\", {\n              \"is-invalid\": idRole === null\n            })}\n            theme={selectThemeColors}\n            onChange={(data) => {\n              // console.log(data.value)\n              setIdRole(data.value)\n            }}\n          />\n        </div>\n\n        <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n          {t(\"Submit\")}\n        </Button>\n        <Button type=\"reset\" color=\"secondary\" outline onClick={toggleSidebar}>\n          {t(\"Cancel\")}\n        </Button>\n      </Form>\n    </Sidebar>\n  )\n}\n\nexport default SidebarNewUsers\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\n\nimport { Fragment, useState, useEffect, useContext, useMemo } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport Sidebar from \"@src/views/apps/user/Sidebar\"\nimport ModalAddEdit from \"@src/views/apps/user/modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport Avatar from \"@components/avatar\"\nimport { getData, getUser, deleteUser } from \"@src/views/apps/user/store\"\nimport { getData as getDataRole } from \"@src/views/apps/roles-permissions/store/role\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Select from \"react-select\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid,\n  Copy,\n  Slack,\n  User,\n  Settings,\n  Database,\n  Edit2,\n  MoreVertical,\n  Trash2,\n  Archive,\n  Eye\n} from \"react-feather\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { selectThemeColors } from \"@utils\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport GlobalUnitDropdown from \"@src/shared/GlobalUnitDropdown\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Label,\n  Button,\n  CardBody,\n  CardTitle,\n  CardHeader,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  Badge,\n  CardText\n} from \"reactstrap\"\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\nconst MySwal = withReactContent(Swal)\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  toggleSidebar,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  // ** Converts table to CSV\n  function convertArrayOfObjectsToCSV(array) {\n    let result\n\n    const columnDelimiter = \",\"\n    const lineDelimiter = \"\\n\"\n    const keys = Object.keys(store.data[0])\n\n    result = \"\"\n    result += keys.join(columnDelimiter)\n    result += lineDelimiter\n\n    array.forEach((item) => {\n      let ctr = 0\n      keys.forEach((key) => {\n        if (ctr > 0) result += columnDelimiter\n\n        result += item[key]\n\n        ctr++\n      })\n      result += lineDelimiter\n    })\n\n    return result\n  }\n\n  // ** Downloads CSV\n  function downloadCSV(array) {\n    const link = document.createElement(\"a\")\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n\n    const filename = \"export.csv\"\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n      csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute(\"href\", encodeURI(csv))\n    link.setAttribute(\"download\", filename)\n    link.click()\n  }\n\n  return (\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\n      <Row>\n        <Col xl=\"6\" className=\"d-flex align-items-center p-0\">\n          <div className=\"d-flex align-items-center w-100\">\n            <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n            <Input\n              className=\"mx-50\"\n              type=\"select\"\n              id=\"rows-per-page\"\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{ width: \"5rem\" }}\n            >\n              <option value=\"10\">10</option>\n              <option value=\"25\">25</option>\n              <option value=\"50\">50</option>\n            </Input>\n            <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n          </div>\n        </Col>\n        <Col\n          xl=\"6\"\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\n        >\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n\n          <div className=\"d-flex align-items-center table-header-actions\">\n            <UncontrolledDropdown className=\"me-1\">\n              <DropdownToggle color=\"secondary\" caret outline>\n                <Share className=\"font-small-4 me-50\" />\n                <span className=\"align-middle\">{t(\"Export\")}</span>\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem className=\"w-100\">\n                  <Printer className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Print</span>\n                </DropdownItem>\n                <DropdownItem\n                  className=\"w-100\"\n                  onClick={() => downloadCSV(store.data)}\n                >\n                  <FileText className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">CSV</span>\n                </DropdownItem>\n                <DropdownItem className=\"w-100\">\n                  <Grid className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Excel</span>\n                </DropdownItem>\n                <DropdownItem className=\"w-100\">\n                  <File className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">PDF</span>\n                </DropdownItem>\n                <DropdownItem className=\"w-100\">\n                  <Copy className=\"font-small-4 me-50\" />\n                  <span className=\"align-middle\">Copy</span>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n\n            {ability.can(\n              \"post\",\n              sessionStorage.getItem(\"current_page_perm\")\n            ) ? (\n              <Button\n                className=\"add-new-user\"\n                color=\"primary\"\n                onClick={toggleSidebar}\n              >\n                {t(\"Add New\")} {t(store.crudTitle)}\n              </Button>\n            ) : null}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst UsersList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state.users)\n  const storeUnit = useSelector((state) => state.units)\n  const storeRole = useSelector((state) => state.roles)\n\n  // ** Hooks\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n  // ** Theme Colors\n  const { colors } = useContext(ThemeColors)\n\n  // ** States\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(store.params?.page ?? 1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(store.params?.length ?? 10)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [currentRole, setCurrentRole] = useState({\n    value: \"\",\n    label: `${t(\"Select\")} ${t(\"Role\")}`\n  })\n  const [currentUnit, setCurrentUnit] = useState({\n    value: \"\",\n    label: `${t(\"Select\")} ${t(\"Unit\")}`\n  })\n  const [currentStatus, setCurrentStatus] = useState({\n    value: \"\",\n    label: `${t(\"Select\")} Status`,\n    number: 0\n  })\n  const [roleOptions, setRoleOptions] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [showModal, setShowModal] = useState(false)\n\n  // ** Function to toggle sidebar\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen)\n    neutralizeBack(handleCloseModal)\n  }\n\n  // ** Get data on mount\n  useEffect(() => {\n    // console.log(store.params)\n    if (storeRole?.data.length === 0 && !storeRole.isLoading) {\n      dispatch(getDataRole()).then((x) => {\n        if (x.data) {\n          const roleOptionss = x.payload.data.map((item) => ({\n            value: item.id,\n            label: item.name\n          }))\n          roleOptionss.unshift({\n            value: \"\",\n            label: `${t(\"Select\")} ${t(\"Role\")}`\n          })\n          setRoleOptions(roleOptionss)\n        }\n      })\n    } else {\n      const roleOptionss = storeRole.data.map((item) => ({\n        value: item.id,\n        label: item.name\n      }))\n      roleOptionss.unshift({\n        value: \"\",\n        label: `${t(\"Select\")} ${t(\"Role\")}`\n      })\n      setRoleOptions(roleOptionss)\n    }\n\n    if (store.data.length === 0 && !store.isLoading) {\n      dispatch(\n        getData({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage,\n          filter_role: currentRole.value,\n          filter_status: currentStatus.value,\n          filter_unit: currentUnit.value\n        })\n      )\n    }\n  }, [\n    dispatch,\n    store.data.length,\n    storeUnit.data.length,\n    storeRole.data.length,\n    sort_dir,\n    sort,\n    currentPage\n  ])\n\n  const statusObj = {\n    pending: \"light-warning\",\n    active: \"light-success\",\n    inactive: \"light-secondary\"\n  }\n\n  // ** Renders Client Columns\n  const renderClient = (row) => {\n    if (row.avatar) {\n      return (\n        <Avatar className=\"me-1\" img={row.avatar} width=\"32\" height=\"32\" />\n      )\n    } else {\n      return (\n        <Avatar\n          initials\n          className=\"me-1\"\n          color={row.avatarColor || \"light-primary\"}\n          content={row.name || \"John Doe\"}\n        />\n      )\n    }\n  }\n\n  // ** Renders Role Columns\n  const renderRole = (row) => {\n    const roleObj = {\n      public: {\n        class: \"text-primary\",\n        icon: User\n      },\n      viewer: {\n        class: \"text-success\",\n        icon: Eye\n      },\n      editor: {\n        class: \"text-info\",\n        icon: Edit2\n      },\n      admin: {\n        class: \"text-warning\",\n        icon: Settings\n      },\n      super_user: {\n        class: \"text-danger\",\n        icon: Slack\n      }\n    }\n\n    const Icon = roleObj[row.role_name] ? roleObj[row.role_name].icon : Edit2\n\n    return (\n      <span className=\"text-truncate text-capitalize align-middle\">\n        <Icon\n          size={18}\n          className={`${\n            roleObj[row.role_name] ? roleObj[row.role_name].class : \"\"\n          } me-50`}\n        />\n        {row.role_name}\n      </span>\n    )\n  }\n\n  const columns = [\n    {\n      name: t(\"User\"),\n      sortable: true,\n      minWidth: \"400px\",\n      sortField: \"name\",\n      selector: (row) => row.name,\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {renderClient(row)}\n          <div className=\"d-flex flex-column\">\n            <Link\n              to={`/apps/user/view/${row.id}`}\n              className=\"user_name text-truncate text-body\"\n              // onClick={() => store.dispatch(getUser(row.id))}\n            >\n              <span className=\"fw-bolder\">{row.name}</span>\n            </Link>\n            <small className=\"text-truncate text-muted mb-0\">{row.email}</small>\n          </div>\n        </div>\n      )\n    },\n    {\n      name: t(\"Role\"),\n      sortable: true,\n      minWidth: \"200px\",\n      sortField: \"role_name\",\n      selector: (row) => row.role_name,\n      cell: (row) => renderRole(row)\n    },\n    // {\n    //   name: \"Unit\",\n    //   minWidth: \"138px\",\n    //   sortable: true,\n    //   sortField: \"unit\",\n    //   selector: (row) => row.currentPlan,\n    //   cell: (row) => <span className=\"text-capitalize\">{row.currentPlan}</span>\n    // },\n    {\n      name: t(\"Joined Date\"),\n      minWidth: \"230px\",\n      sortable: true,\n      sortField: \"joined_date\",\n      selector: (row) => row.billing,\n      cell: (row) => (\n        <span className=\"text-capitalize\">\n          {Moment(row.joined_date).format(\"DD MMM YYYY\")}\n        </span>\n      )\n    },\n    {\n      name: t(\"Status\"),\n      minWidth: \"120px\",\n      sortable: true,\n      sortField: \"status\",\n      selector: (row) => row.is_active,\n      cell: (row) => (\n        <Badge\n          className=\"text-capitalize\"\n          color={statusObj[row.is_active ? \"active\" : \"inactive\"]}\n          pill\n        >\n          {row.is_active ? t(\"active\") : t(\"inactive\")}\n        </Badge>\n      )\n    },\n    {\n      name: t(\"Actions\"),\n      width: \"130px\",\n      cell: (row) => (\n        <div className=\"column-action text-center\">\n          <UncontrolledDropdown>\n            <DropdownToggle tag=\"span\">\n              <MoreVertical size={14} className=\"cursor-pointer\" />\n            </DropdownToggle>\n            <DropdownMenu end>\n              <DropdownItem\n                tag={Link}\n                className=\"w-100\"\n                to={`/apps/user/view/${row.id}`}\n                onClick={() => store.dispatch(getUser(row.id))}\n              >\n                <FileText size={14} className=\"me-50\" />\n                <span className=\"align-middle\">{t(\"Details\")}</span>\n              </DropdownItem>\n\n              {ability.can(\n                \"update\",\n                sessionStorage.getItem(\"current_page_perm\")\n              ) && (\n                <DropdownItem\n                  tag=\"a\"\n                  href=\"/\"\n                  className=\"w-100\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    handleEdit(row.id)\n                  }}\n                >\n                  <Archive size={14} className=\"me-50\" />\n                  <span className=\"align-middle\">{t(\"Edit\")}</span>\n                </DropdownItem>\n              )}\n\n              {ability.can(\n                \"delete\",\n                sessionStorage.getItem(\"current_page_perm\")\n              ) && (\n                <DropdownItem\n                  tag=\"a\"\n                  href=\"/\"\n                  className=\"w-100\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    handleDelete(row.id)\n                  }}\n                >\n                  <Trash2 size={14} className=\"me-50\" />\n                  <span className=\"align-middle\">{t(\"Delete\")}</span>\n                </DropdownItem>\n              )}\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </div>\n      )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: column.name,\n            sortable: false,\n            minWidth: column.minWidth,\n            width: column.width,\n            cell: (row) => (\n              <Skeleton\n                sx={{ bgcolor: colors.dark.light }}\n                animation=\"wave\"\n                className={column.name === \"Actions\" ? \"ms-2\" : \"\"}\n                width={column.name === \"Actions\" ? 10 : \"100%\"}\n                height={40}\n              />\n            )\n          }))\n        : columns.map((column) => ({\n            name: column.name,\n            sortable: column.sortable,\n            minWidth: column.minWidth,\n            width: column.width,\n            sortField: column.sortField,\n            selector: column.selector,\n            cell: column.cell\n          })),\n    [store.isLoading, columns]\n  )\n\n  const statusOptions = [\n    { value: \"\", label: `${t(\"Select\")} Status`, number: 0 },\n    { value: \"pending\", label: `${t(\"Pending\")}`, number: 1 },\n    { value: \"active\", label: `${t(\"Active\")}`, number: 2 },\n    { value: \"inactive\", label: `${t(\"Inactive\")}`, number: 3 }\n  ]\n\n  const handleChangeUnit = (value) => {\n    setCurrentUnit(value)\n    dispatch(\n      getData({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        filter_role: currentRole.value,\n        filter_unit: value.value,\n        filter_status: currentStatus.value\n      })\n    )\n  }\n\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n        <CardText className=\"mb-0 mt-1\">{t(\"Please Wait\")}...</CardText>\n      </Fragment>\n    )\n  }\n\n  const handleDelete = (id) => {\n    return MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(\"user\")}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete User!\")}`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    }).then(function (result) {\n      if (result.value) {\n        setLoading(true)\n        dispatch(deleteUser(id)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setLoading(false)\n            toast.success(`${t(\"Successfully deleted Data\")}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n          } else if (res.meta.requestStatus === \"rejected\") {\n            setLoading(false)\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      }\n    })\n  }\n\n  const handleEdit = (id) => {\n    setLoading(true)\n    if (\n      !store.selectedUser ||\n      (store.selectedUser?.id !== parseInt(id) && !store.isLoadingDetail)\n    ) {\n      dispatch(getUser(id)).then((res) => {\n        setShowModal(true)\n        setLoading(false)\n      })\n    } else {\n      setLoading(false)\n      setShowModal(true)\n    }\n  }\n\n  // ** Function in get data on page change\n  const handlePagination = (page) => {\n    dispatch(\n      getData({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1,\n        filter_role: currentRole.value,\n        filter_status: currentStatus.value,\n        filter_unit: currentUnit.value\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getData({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage,\n        filter_role: currentRole.value,\n        filter_unit: currentUnit.value,\n        filter_status: currentStatus.value\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search searchuery change\n  const handleFilter = (val) => {\n    setSearchTerm(val)\n    dispatch(\n      getData({\n        sort_dir,\n        search: val,\n        sort,\n        page: currentPage,\n        length: rowsPerPage,\n        filter_role: currentRole.value,\n        filter_status: currentStatus.value,\n        filter_unit: currentUnit.value\n      })\n    )\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getData({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        filter_role: currentRole.value,\n        filter_status: currentStatus.value,\n        filter_unit: currentUnit.value\n      })\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      filter_role: currentRole.value,\n      filter_unit: currentUnit.value,\n      filter_status: currentStatus.value,\n      search: searchTerm\n    }\n    // console.log(tableData)\n    // console.log(tableColumns)\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card>\n          {/* <CardHeader>\n            <CardTitle tag=\"h4\">{t(\"Filters\")}</CardTitle>\n          </CardHeader> */}\n          <CardBody>\n            <Row>\n              <Col>\n                <Label for=\"role-select\">{t(\"Role\")}</Label>\n                <Select\n                  isClearable={false}\n                  value={currentRole}\n                  options={roleOptions}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                  theme={selectThemeColors}\n                  onChange={(data) => {\n                    setCurrentRole(data)\n                    dispatch(\n                      getData({\n                        sort_dir,\n                        sort,\n                        search: searchTerm,\n                        filter_role: data.value,\n                        page: currentPage,\n                        length: rowsPerPage,\n                        filter_status: currentStatus.value,\n                        filter_unit: currentUnit.value\n                      })\n                    )\n                  }}\n                />\n              </Col>\n              <Col>\n                <Label for=\"status-select\">Status</Label>\n                <Select\n                  theme={selectThemeColors}\n                  isClearable={false}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                  options={statusOptions}\n                  value={currentStatus}\n                  onChange={(data) => {\n                    setCurrentStatus(data)\n                    dispatch(\n                      getData({\n                        sort_dir,\n                        sort,\n                        search: searchTerm,\n                        page: currentPage,\n                        filter_status: data.value,\n                        length: rowsPerPage,\n                        filter_role: currentRole.value,\n                        filter_unit: currentUnit.value\n                      })\n                    )\n                  }}\n                />\n              </Col>\n              <GlobalUnitDropdown\n                parentChange={handleChangeUnit}\n                colMode={true}\n              />\n            </Row>\n          </CardBody>\n        </Card>\n\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              pagination\n              responsive\n              paginationServer\n              style={{ \"min-height\": \"400px\" }}\n              columns={tableColumns}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              paginationComponent={CustomPagination}\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  toggleSidebar={toggleSidebar}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} />\n      </UILoader>\n\n      {store.selectedUser !== null && (\n        <ModalAddEdit\n          show={showModal}\n          setShow={setShowModal}\n          detailPage={false}\n          // idRow={store.selectedUser.id}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default UsersList\n","export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from \"react\"\n\n// ** Third Party Components\nimport PropTypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport { Eye, EyeOff } from \"react-feather\"\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from \"reactstrap\"\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className=\"form-label\" for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          \"is-invalid\": invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? \"password\" : \"text\"}\n          placeholder={placeholder ? placeholder : \"············\"}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor,\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText\n          className=\"cursor-pointer\"\n          onClick={() => setInputVisibility(!inputVisibility)}\n        >\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props[\"htmlFor\"] === \"undefined\") {\n      throw new Error(\"htmlFor prop is required when label prop is present\")\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props[\"label\"] === \"undefined\") {\n      throw new Error(\"label prop is required when htmlFor prop is present\")\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","// ** React Imports\nimport { Fragment, useState, useEffect, useCallback, useMemo } from \"react\"\n\n// ** Reactstrap Imports\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Row,\n  Col,\n  Label,\n  Form\n} from \"reactstrap\"\n\nimport Select from \"react-select\"\n\nimport { useTranslation } from \"react-i18next\"\n\n// ** Utils\nimport { selectThemeColors, getUserData } from \"@utils\"\n// ** Store & Actions\nimport {\n  getUnits,\n  setUnitSelected,\n  setUnitSelectedDropdown\n} from \"../views/apps/unit/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useForm, Controller } from \"react-hook-form\"\n\nconst GlobalUnitDropdown = ({\n  parentChange,\n  colMode = false,\n  colSize = 6,\n  initialValue = true,\n  colClassName = \"\"\n}) => {\n  const { t } = useTranslation()\n  const userData = getUserData()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state.units)\n  const [unitOptions, setUnitOptions] = useState([])\n  const [currentUnit, setCurrentUnit] = useState(\n    initialValue\n      ? {\n          value: \"\",\n          label: `${t(\"Select\")} ${t(\"Unit\")}`\n        }\n      : {}\n  )\n\n  const handleChange = (data, parentChange) => {\n    setCurrentUnit(data)\n    // localStorage.setItem(\"last_id_unit\", data.value)\n    if (typeof parentChange === \"function\") {\n      parentChange(data)\n    }\n  }\n\n  useEffect(() => {\n    // if (store.data.length === 0 && !store.isLoading) {\n    //   dispatch(getUnits())\n    // }\n    // console.log(userData.member_of)\n    const unitOptions = initialValue\n      ? store.dataDropdown\n      : store.dataDropdown.filter((item) => item.value !== \"\")\n\n    setUnitOptions(unitOptions)\n    setCurrentUnit(initialValue ? store.selectedUnit : unitOptions[0])\n  }, [dispatch, store.dataDropdown])\n\n  return store.data?.length > 1 ? (\n    !colMode ? (\n      <Card>\n        {/* <CardHeader>\n        <CardTitle tag=\"h4\">{t(\"Filters\")}</CardTitle>\n      </CardHeader> */}\n        <CardBody>\n          <Row>\n            <Label className=\"\" for=\"plan-select\">\n              {t(\"Unit\")}\n            </Label>\n            <Select\n              theme={selectThemeColors}\n              isClearable={false}\n              className=\"react-select\"\n              classNamePrefix=\"select\"\n              options={unitOptions}\n              value={currentUnit}\n              onChange={(e) => {\n                handleChange(e, parentChange)\n              }}\n              getOptionLabel={(option) =>\n                option.code\n                  ? `${option.code} ${option.label}`\n                  : `${option.label}`\n              }\n            />\n          </Row>\n        </CardBody>\n      </Card>\n    ) : (\n      <Col md={`${colSize}`} className={colClassName}>\n        <Label className=\"\" for=\"plan-select\">\n          {t(\"Unit\")}\n        </Label>\n        <Select\n          theme={selectThemeColors}\n          isClearable={false}\n          className=\"react-select\"\n          classNamePrefix=\"select\"\n          options={unitOptions}\n          value={currentUnit}\n          onChange={(e) => {\n            handleChange(e, parentChange)\n          }}\n          getOptionLabel={(option) =>\n            option.code ? `${option.code} ${option.label}` : `${option.label}`\n          }\n          // styles={{ menu: (base) => ({ ...base, base.children fontWeight: \"bold\" }) }}\n        />\n      </Col>\n    )\n  ) : null\n}\n\nexport default GlobalUnitDropdown\n"],"sourceRoot":""}