{"version":3,"sources":["views/pages/authentication/register-multi-steps/steps/PersonalInfo.js","@core/components/ui-loader/index.js","@core/components/input-password-toggle/index.js"],"names":["PersonalInfo","stepper","t","useTranslation","navigate","useSkin","skin","useNavigate","useState","sessionStorage","getItem","successInfo","setSuccessInfo","useEffect","className","onClick","type","color","size","UILoader","props","children","blocking","loader","tag","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","InputPasswordToggle","forwardRef","ref","label","hideIcon","showIcon","visible","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","inputVisibility","setInputVisibility","for","id","renderIcon"],"mappings":"6RAyFeA,UA9CM,SAAC,GAAgB,EAAdC,QAAe,IAC7BC,EAAMC,cAAND,EAEFE,GADWC,cAATC,KACSC,eACjB,EAAsCC,mBACpCC,eAAeC,QAAQ,uBADzB,mBAAOC,EAAP,KAAoBC,EAApB,KAQA,OAJAC,qBAAU,WACRD,EAAeH,eAAeC,QAAQ,yBACrC,IAGD,eAAC,WAAD,WACE,sBAAKI,UAAU,sBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCZ,EAAE,0BAClCS,EACC,iCAAOA,EAAP,OAEA,+BACGT,EACC,2GAKR,qBAAKY,UAAU,sCAAf,SACE,eAAC,IAAD,CACEC,QAAS,kBAAMX,EAAS,WACxBY,KAAK,SACLC,MAAM,UACNH,UAAU,WAJZ,UAME,sBAAMA,UAAU,wCAAhB,SACGZ,EAAE,WAEL,cAAC,IAAD,CACEgB,KAAM,GACNJ,UAAU,yC,kGCpEhBK,EAAW,SAACC,GAAW,IAAD,EAClBC,EAA6DD,EAA7DC,SAAUC,EAAmDF,EAAnDE,SAAUC,EAAyCH,EAAzCG,OAAQT,EAAiCM,EAAjCN,UAAWU,EAAsBJ,EAAtBI,IAAKC,EAAiBL,EAAjBK,aAE9CC,EAAMF,EAEZ,OACE,eAACE,EAAD,CACEZ,UAAWa,IAAW,aAAD,mBAClBb,EAAYA,GADM,qBAEbQ,GAFa,IADvB,UAMGD,EACAC,EACC,eAAC,WAAD,WACE,iCACER,UAAU,WACLQ,GAAYG,EACb,CAAEG,MAAO,CAAEC,gBAAiBJ,IAC5B,KAGN,qBAAKX,UAAU,SAAf,SAAyBS,OAEzB,SAKKJ,MAEfA,EAASW,aAAe,CACtBN,IAAK,MACLF,UAAU,EACVC,OAAQ,cAAC,IAAD,CAASN,MAAM,c,sQCpCnBc,EAAsBC,sBAAW,SAACZ,EAAOa,GAAS,IAAD,EAGnDC,EAWEd,EAXFc,MACAC,EAUEf,EAVFe,SACAC,EASEhB,EATFgB,SACAC,EAQEjB,EARFiB,QACAvB,EAOEM,EAPFN,UACAwB,EAMElB,EANFkB,QACAC,EAKEnB,EALFmB,YACAC,EAIEpB,EAJFoB,SACAC,EAGErB,EAHFqB,eACAC,EAEEtB,EAFFsB,QACGC,EAXL,YAYIvB,EAZJ,GAeA,EAA8CZ,mBAAS6B,GAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KAaA,OACE,eAAC,WAAD,WACGX,EACC,cAAC,IAAD,CAAOpB,UAAU,aAAagC,IAAKR,EAAnC,SACGJ,IAED,KACJ,eAAC,IAAD,CACEpB,UAAWa,KAAU,mBAClBb,EAAYA,GADM,cAEnB,aAAc4B,GAFK,IADvB,UAME,cAAC,IAAD,yBACET,IAAKA,EACLS,QAASA,EACT1B,MAA0B,IAApB4B,EAA4B,WAAa,OAC/CL,YAAaA,GAA4B,mDACzCzB,UAAWa,IAAW,eACnBc,EAAiBA,KAGfP,GAASI,EACV,CACES,GAAIT,GAEN,IACAK,IAGN,cAAC,IAAD,CACE7B,UAAU,iBACVC,QAAS,kBAAM8B,GAAoBD,IAFrC,SAxCa,WACjB,IAAM1B,EAAOsB,GAAsB,GAEnC,OAAwB,IAApBI,EACKT,GAAsB,cAAC,IAAD,CAAKjB,KAAMA,IAEjCkB,GAAsB,cAAC,IAAD,CAAQlB,KAAMA,IAsCtC8B,cAOIjB,MA2BfA,EAAoBD,aAAe,CACjCO,SAAS","file":"static/js/154.f5ad0e8e.chunk.js","sourcesContent":["// ** React Imports\nimport { Link, useNavigate, useSearchParams } from \"react-router-dom\"\nimport { useRef, useContext, useEffect, useState, Fragment } from \"react\"\n\n// ** Third Party Components\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  Home,\n  User,\n  CreditCard,\n  AlertCircle,\n  ChevronLeft,\n  HelpCircle,\n  Info,\n  Mail,\n  Navigation,\n  X,\n  ChevronRight,\n  Check,\n  ArrowRight\n} from \"react-feather\"\n\n// ** Reactstrap Imports\nimport { Form, Label, Input, Row, Col, Button, FormFeedback } from \"reactstrap\"\n\nimport { useTranslation } from \"react-i18next\"\nimport toast from \"react-hot-toast\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Avatar from \"@components/avatar\"\nimport InputPasswordToggle from \"@components/input-password-toggle\"\nimport Spinner from \"@components/spinner/Fallback-spinner\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport { handleLogin } from \"@store/authentication\"\nimport { getHomeRouteForLoggedInUser } from \"@utils\"\nimport { renderIcon } from \"@src/views/apps/menu/store/my_menu\"\nimport UILoader from \"@components/ui-loader\"\nimport { useSkin } from \"@hooks/useSkin\"\n\nconst defaultValues = {\n  address: \"\",\n  firstName: \"\"\n}\n\nconst PersonalInfo = ({ stepper }) => {\n  const { t } = useTranslation()\n  const { skin } = useSkin()\n  const navigate = useNavigate()\n  const [successInfo, setSuccessInfo] = useState(\n    sessionStorage.getItem(\"register_token_msg\")\n  )\n\n  useEffect(() => {\n    setSuccessInfo(sessionStorage.getItem(\"register_token_msg\"))\n  }, [])\n\n  return (\n    <Fragment>\n      <div className=\"content-header mb-2\">\n        <h2 className=\"fw-bolder mb-75\">{t(\"Success Registration\")}</h2>\n        {successInfo ? (\n          <span>{successInfo}.</span>\n        ) : (\n          <span>\n            {t(\n              \"Please wait for confirmation regarding your registration application. We will notify you via email\"\n            )}\n          </span>\n        )}\n      </div>\n      <div className=\"d-flex justify-content-between mt-2\">\n        <Button\n          onClick={() => navigate(\"/login\")}\n          type=\"button\"\n          color=\"primary\"\n          className=\"btn-next\"\n        >\n          <span className=\"align-middle d-sm-inline-block d-none\">\n            {t(\"Login\")}\n          </span>\n          <ArrowRight\n            size={14}\n            className=\"align-middle ms-sm-25 ms-0\"\n          ></ArrowRight>\n        </Button>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default PersonalInfo\n","// ** React Imports\nimport { Fragment } from \"react\"\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\"\nimport classnames from \"classnames\"\n\n// ** Reactstrap Imports\nimport { Spinner } from \"reactstrap\"\n\n// ** Styles\nimport \"./ui-loader.scss\"\n\nconst UILoader = (props) => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag\n      className={classnames(\"ui-loader\", {\n        [className]: className,\n        show: blocking\n      })}\n    >\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className=\"overlay\" /*eslint-disable */\n            {...(blocking && overlayColor\n              ? { style: { backgroundColor: overlayColor } }\n              : {})}\n            /*eslint-enable */\n          ></div>\n          <div className=\"loader\">{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: \"div\",\n  blocking: false,\n  loader: <Spinner color=\"primary\" />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from \"react\"\n\n// ** Third Party Components\nimport PropTypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport { Eye, EyeOff } from \"react-feather\"\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from \"reactstrap\"\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className=\"form-label\" for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          \"is-invalid\": invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? \"password\" : \"text\"}\n          placeholder={placeholder ? placeholder : \"············\"}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor,\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText\n          className=\"cursor-pointer\"\n          onClick={() => setInputVisibility(!inputVisibility)}\n        >\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props[\"htmlFor\"] === \"undefined\") {\n      throw new Error(\"htmlFor prop is required when label prop is present\")\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props[\"label\"] === \"undefined\") {\n      throw new Error(\"label prop is required when htmlFor prop is present\")\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}