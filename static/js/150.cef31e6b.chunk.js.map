{"version":3,"sources":["@core/components/sidebar/index.js","views/apps/user/Sidebar.js","@core/components/input-password-toggle/index.js"],"names":["Sidebar","props","_classnames3","open","size","title","width","children","closeBtn","className","toggleSidebar","bodyClassName","contentClassName","wrapperClassName","headerClassName","rest","_objectWithoutProperties","_excluded","renderCloseBtn","_jsx","X","onClick","_jsxs","Modal","_objectSpread","isOpen","toggle","classnames","_defineProperty","modalClassName","undefined","style","String","ModalHeader","close","tag","PerfectScrollbar","options","wheelPropagation","ModalBody","defaultValues","email","password","phone","member_of","id_role","name","username","SidebarNewUsers","_ref","t","useTranslation","colors","useContext","ThemeColors","_useState","useState","_useState2","_slicedToArray","setData","_useState3","_useState4","idRole","setIdRole","_useState5","_useState6","idUnit","setIdUnit","storeRole","useSelector","state","users","roles","storeUnit","units","dispatch","useDispatch","_useForm","useForm","control","setValue","setError","handleSubmit","errors","formState","useEffect","selectedUnit","data","map","item","value","id","label","length","onClosed","key","Form","onSubmit","Object","values","every","field","checkIsValid","addUser","avatar","status","then","res","meta","requestStatus","toast","success","concat","padding","color","main","border","iconTheme","primary","message","payload","error_reason","error","danger","type","Label","for","Controller","defaultValue","rules","required","pattern","render","_ref2","Input","placeholder","invalid","FormText","_ref3","minLength","maxLength","_ref4","_ref5","InputPasswordToggle","_ref6","Select","isClearable","theme","selectThemeColors","closeMenuOnSelect","onChange","isMulti","classNamePrefix","vaue","Button","outline","forwardRef","ref","_classnames","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","inputVisibility","setInputVisibility","Fragment","InputGroup","InputGroupText","Eye","EyeOff","renderIcon","defaultProps"],"mappings":"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","file":"static/js/150.cef31e6b.chunk.js","sourcesContent":["// ** Third Party Components\r\nimport { X } from \"react-feather\"\r\nimport Proptypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\n\r\nimport { Modal, ModalHeader, ModalBody } from \"reactstrap\"\r\n\r\nconst Sidebar = (props) => {\r\n  // ** Props\r\n  const {\r\n    open,\r\n    size,\r\n    title,\r\n    width,\r\n    children,\r\n    closeBtn,\r\n    className,\r\n    toggleSidebar,\r\n    bodyClassName,\r\n    contentClassName,\r\n    wrapperClassName,\r\n    headerClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** If user passes custom close btn render that else default close btn\r\n  const renderCloseBtn = closeBtn ? (\r\n    closeBtn\r\n  ) : (\r\n    <X className=\"cursor-pointer\" size={15} onClick={toggleSidebar} />\r\n  )\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={open}\r\n      toggle={toggleSidebar}\r\n      contentClassName={classnames(\"overflow-hidden\", {\r\n        [contentClassName]: contentClassName\r\n      })}\r\n      modalClassName={classnames(\"modal-slide-in\", {\r\n        [wrapperClassName]: wrapperClassName\r\n      })}\r\n      className={classnames({\r\n        [className]: className,\r\n        \"sidebar-lg\": size === \"lg\",\r\n        \"sidebar-sm\": size === \"sm\"\r\n      })}\r\n      /*eslint-disable */\r\n      {...(width !== undefined\r\n        ? {\r\n            style: { width: String(width) + \"px\" },\r\n          }\r\n        : {})}\r\n      /*eslint-enable */\r\n      {...rest}\r\n    >\r\n      <ModalHeader\r\n        className={classnames({\r\n          [headerClassName]: headerClassName\r\n        })}\r\n        toggle={toggleSidebar}\r\n        close={renderCloseBtn}\r\n        tag=\"div\"\r\n      >\r\n        <h5 className=\"modal-title\">\r\n          <span className=\"align-middle\">{title}</span>\r\n        </h5>\r\n      </ModalHeader>\r\n      <PerfectScrollbar options={{ wheelPropagation: false }}>\r\n        <ModalBody\r\n          className={classnames(\"flex-grow-1\", {\r\n            [bodyClassName]: bodyClassName\r\n          })}\r\n        >\r\n          {children}\r\n        </ModalBody>\r\n      </PerfectScrollbar>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n\r\n// ** PropTypes\r\nSidebar.propTypes = {\r\n  className: Proptypes.string,\r\n  bodyClassName: Proptypes.string,\r\n  open: Proptypes.bool.isRequired,\r\n  title: Proptypes.string.isRequired,\r\n  contentClassName: Proptypes.string,\r\n  wrapperClassName: Proptypes.string,\r\n  children: Proptypes.any.isRequired,\r\n  size: Proptypes.oneOf([\"sm\", \"lg\"]),\r\n  toggleSidebar: Proptypes.func.isRequired,\r\n  width: Proptypes.oneOfType([Proptypes.number, Proptypes.string])\r\n}\r\n","/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable no-confusing-arrow */\r\n// ** React Import\r\nimport { useState, useContext, useEffect } from \"react\"\r\nimport Sidebar from \"@components/sidebar\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport classnames from \"classnames\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport { Button, Label, FormText, Form, Input } from \"reactstrap\"\r\nimport store, { addUser } from \"@src/views/apps/user/store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport toast from \"react-hot-toast\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport InputPasswordToggle from \"@components/input-password-toggle\"\r\nconst defaultValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n  phone: \"\",\r\n  member_of: \"\",\r\n  id_role: \"\",\r\n  name: \"\",\r\n  username: \"\"\r\n}\r\n\r\nconst checkIsValid = (data) => {\r\n  return Object.values(data).every((field) =>\r\n    typeof field === \"object\" || field !== \"member_of\"\r\n      ? field !== null && field !== \"\"\r\n      : field.length > 0\r\n  )\r\n}\r\n\r\nconst SidebarNewUsers = ({ open, toggleSidebar }) => {\r\n  // ** Hooks\r\n  const { t } = useTranslation()\r\n\r\n  // ** Theme Colors\r\n  const { colors } = useContext(ThemeColors)\r\n\r\n  // ** States\r\n  const [data, setData] = useState({})\r\n  const [idRole, setIdRole] = useState(3)\r\n  const [idUnit, setIdUnit] = useState([])\r\n  const store = useSelector((state) => state.users)\r\n  const storeRole = useSelector((state) => state.roles)\r\n  const storeUnit = useSelector((state) => state.units)\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n\r\n  // ** Vars\r\n  const {\r\n    control,\r\n    setValue,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({ defaultValues })\r\n\r\n  // ** Function to handle form submit\r\n  const onSubmit = (data) => {\r\n    // console.log(data)\r\n    data[\"member_of\"] = idUnit !== null ? idUnit.map((item) => item.value) : []\r\n    data[\"id_role\"] = idRole !== null ? idRole : null\r\n    setData(data)\r\n    // console.log(data)\r\n    if (checkIsValid(data)) {\r\n      dispatch(\r\n        addUser({\r\n          id_role: data?.id_role,\r\n          avatar: \"\",\r\n          status: 1,\r\n          email: data.email,\r\n          member_of: data?.member_of,\r\n          phone: data.phone,\r\n          name: data.name,\r\n          username: data.username,\r\n          password: data.password\r\n        })\r\n      ).then((res) => {\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          toggleSidebar()\r\n          toast.success(`${t(\"Successfully Create Data\")}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          // console.log(store.errorAddEdit)\r\n          let message = \"\"\r\n          if (res.payload.errors) {\r\n            message = Object.values(res.payload.errors)\r\n          } else if (res.payload.error_reason) {\r\n            message = res.payload.message\r\n          }\r\n          toast.error(`${t(message)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key] !== null && data[key].length === 0) {\r\n          setError(key, {\r\n            type: \"manual\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSidebarClosed = () => {\r\n    for (const key in defaultValues) {\r\n      setValue(key, \"\")\r\n    }\r\n    // setRole(null)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const selectedUnit = storeUnit.data.map((item) => ({\r\n      value: item.id,\r\n      label: item.name\r\n    }))\r\n    // console.log(selectedUnit[0])\r\n    setIdUnit([selectedUnit[0]])\r\n  }, [dispatch, storeUnit.data.length])\r\n\r\n  return (\r\n    <Sidebar\r\n      size=\"lg\"\r\n      open={open}\r\n      title={t(\"New User\")}\r\n      headerClassName=\"mb-1\"\r\n      contentClassName=\"pt-0\"\r\n      toggleSidebar={toggleSidebar}\r\n      onClosed={handleSidebarClosed}\r\n    >\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"mb-1\">\r\n          <Label className=\"form-label\" for=\"name\">\r\n            {t(\"Full Name\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue=\"\"\r\n            control={control}\r\n            rules={{\r\n              required: true,\r\n              pattern: {\r\n                value: /^[a-zA-Z\\s]*$/,\r\n                message: t(\"Invalid name, you can only use letters\")\r\n              }\r\n            }}\r\n            id=\"name\"\r\n            name=\"name\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                id=\"name\"\r\n                placeholder=\"John\"\r\n                invalid={errors.name && true}\r\n              />\r\n            )}\r\n          />\r\n          {errors.name && (\r\n            <FormText color=\"danger\">{t(errors.name.message)}</FormText>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"mb-1\">\r\n          <Label className=\"form-label\" for=\"email\">\r\n            {t(\"Email\")} <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            name=\"email\"\r\n            control={control}\r\n            rules={{\r\n              required: {\r\n                value: true,\r\n                message: t(\"You need to specify a valid email address\")\r\n              },\r\n              pattern: {\r\n                value: /^\\S+@\\S+$/i,\r\n                message: t(\"Not valid email adreess.\")\r\n              }\r\n            }}\r\n            render={({ field }) => (\r\n              <Input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"john.doe@example.com\"\r\n                invalid={errors.email && true}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n          <FormText color=\"muted\">\r\n            {t(\"You can use letters, numbers & periods\")}\r\n          </FormText>\r\n        </div>\r\n\r\n        <div className=\"mb-1\">\r\n          <Label className=\"form-label\" for=\"username\">\r\n            {t(\"Username\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue=\"\"\r\n            control={control}\r\n            rules={{\r\n              required: true,\r\n              minLength: {\r\n                value: 4,\r\n                message: t(\"minimum number of character is 4\")\r\n              },\r\n              maxLength: {\r\n                value: 15,\r\n                message: t(\"maximum number of character is 15\")\r\n              },\r\n              pattern: {\r\n                value:\r\n                  /^[a-zA-Z0-9]+([a-zA-Z0-9](_|-| )[a-zA-Z0-9])*[a-zA-Z0-9]+$/,\r\n                message: t(\r\n                  \"You can use letters and numbers without white space\"\r\n                )\r\n              }\r\n            }}\r\n            id=\"username\"\r\n            name=\"username\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                id=\"username\"\r\n                placeholder=\"john.doe.007\"\r\n                invalid={errors.username && true}\r\n              />\r\n            )}\r\n          />\r\n          {errors.username && (\r\n            <FormText color=\"danger\">{t(errors.username.message)}</FormText>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"mb-1\">\r\n          <div className=\"d-flex justify-content-between\">\r\n            <Label className=\"form-label\" for=\"login-password\">\r\n              {t(\"Password\")} <span className=\"text-danger\">*</span>\r\n            </Label>\r\n          </div>\r\n          <Controller\r\n            defaultValue=\"\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            control={control}\r\n            rules={{\r\n              required: {\r\n                value: true,\r\n                message: t(\"Password is required\")\r\n              },\r\n              minLength: {\r\n                value: 8,\r\n                message: t(\"Password must have at least 8 characters\")\r\n              }\r\n            }}\r\n            render={({ field }) => (\r\n              <InputPasswordToggle\r\n                className=\"input-group-merge\"\r\n                invalid={errors.password && true}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n          {errors.password && (\r\n            <FormText color=\"danger\">{t(errors.password.message)}</FormText>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"mb-1\">\r\n          <Label className=\"form-label\" for=\"phone\">\r\n            {t(\"Mobile Phone Number\")}\r\n          </Label>\r\n          <Controller\r\n            defaultValue=\"\"\r\n            control={control}\r\n            rules={{\r\n              required: false,\r\n              pattern: {\r\n                value: /^[0-9+-]+$/,\r\n                message: \"This is not a valid mobile phone, try again!\"\r\n              },\r\n              minLength: {\r\n                value: 6,\r\n                message: \"This number is too short.\"\r\n              },\r\n              maxLength: {\r\n                value: 14,\r\n                message: \"...And now it's too long.\"\r\n              }\r\n            }}\r\n            id=\"phone\"\r\n            name=\"phone\"\r\n            render={({ field }) => (\r\n              <Input {...field} id=\"phone\" placeholder=\"+62 813 940 10XX X\" />\r\n            )}\r\n          />\r\n          {errors.phone && (\r\n            <FormText color=\"danger\">{t(errors.phone.message)}</FormText>\r\n          )}\r\n        </div>\r\n        <div className=\"mb-1\">\r\n          <Label className=\"form-label\" for=\"id_unit\">\r\n            {t(\"Unit\")}\r\n          </Label>\r\n          <Select\r\n            id=\"id_unit\"\r\n            isClearable={false}\r\n            theme={selectThemeColors}\r\n            closeMenuOnSelect={false}\r\n            // defaultValue={null}\r\n            onChange={(data) => {\r\n              setIdUnit(data)\r\n            }}\r\n            defaultValue={\r\n              storeUnit.data.map((item) => ({\r\n                value: item.id,\r\n                label: item.name\r\n              }))[0]\r\n            }\r\n            isMulti\r\n            options={storeUnit.data.map((item) => ({\r\n              value: item.id,\r\n              label: item.name\r\n            }))}\r\n            className=\"react-select\"\r\n            classNamePrefix=\"select\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-1\">\r\n          <Label for=\"role-select\">{t(\"Role\")}</Label>\r\n          <Select\r\n            id=\"id_role\"\r\n            isClearable={false}\r\n            options={storeRole.data.map((item) => ({\r\n              value: item.id,\r\n              label: item.name\r\n            }))}\r\n            defaultValue={{\r\n              label: \"editor\",\r\n              vaue: 3\r\n            }}\r\n            classNamePrefix=\"select\"\r\n            className={classnames(\"react-select\", {\r\n              \"is-invalid\": idRole === null\r\n            })}\r\n            theme={selectThemeColors}\r\n            onChange={(data) => {\r\n              // console.log(data.value)\r\n              setIdRole(data.value)\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n          {t(\"Submit\")}\r\n        </Button>\r\n        <Button type=\"reset\" color=\"secondary\" outline onClick={toggleSidebar}>\r\n          {t(\"Cancel\")}\r\n        </Button>\r\n      </Form>\r\n    </Sidebar>\r\n  )\r\n}\r\n\r\nexport default SidebarNewUsers\r\n","// ** React Imports\r\nimport { Fragment, useState, forwardRef } from \"react\"\r\n\r\n// ** Third Party Components\r\nimport PropTypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, EyeOff } from \"react-feather\"\r\n\r\n// ** Reactstrap Imports\r\nimport { InputGroup, Input, InputGroupText, Label } from \"reactstrap\"\r\n\r\nconst InputPasswordToggle = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    invalid,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? (\r\n        <Label className=\"form-label\" for={htmlFor}>\r\n          {label}\r\n        </Label>\r\n      ) : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className,\r\n          \"is-invalid\": invalid\r\n        })}\r\n      >\r\n        <Input\r\n          ref={ref}\r\n          invalid={invalid}\r\n          type={inputVisibility === false ? \"password\" : \"text\"}\r\n          placeholder={placeholder ? placeholder : \"············\"}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor,\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupText\r\n          className=\"cursor-pointer\"\r\n          onClick={() => setInputVisibility(!inputVisibility)}\r\n        >\r\n          {renderIcon()}\r\n        </InputGroupText>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n})\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  invalid: PropTypes.bool,\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props[\"htmlFor\"] === \"undefined\") {\r\n      throw new Error(\"htmlFor prop is required when label prop is present\")\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props[\"label\"] === \"undefined\") {\r\n      throw new Error(\"label prop is required when htmlFor prop is present\")\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}