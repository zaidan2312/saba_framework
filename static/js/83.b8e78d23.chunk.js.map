{"version":3,"sources":["views/apps/unit_app/modal/index.js"],"names":["ModalAddEdit","_ref","_store$selectedData$d","_store$selectedData3","_store$selectedData$d2","_store$selectedData4","show","setShow","detailPage","formState","setFormState","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","storeApp","apps_app","storeUnit","units","_useState","useState","selectedData","_useState2","_slicedToArray","colors","useContext","ThemeColors","_useState3","_useState4","setLoadingText","_useState5","_useState6","idApp","setIdApp","_useState7","_useState8","unitOptions","setUnitOptions","_useState9","_useState10","unitOptionsSelected","setUnitOptionsSelected","_useForm","useForm","control","setError","handleSubmit","errors","handleReset","resetSelectedData","useEffect","data","length","isLoading","getDataListApp","dataDropdown","filter","el","_store$selectedData","value","id_app","x","_store$selectedData2","id_unit","_jsx","Modal","isOpen","toggle","className","children","_jsxs","UILoader","blocking","isLoadingAddEdit","isLoadingDetail","loader","Loader","ModalHeader","ModalBody","pageTitle","Form","onSubmit","storeData","_objectSpread","sortedObject","key","JSON","stringify","countChanges","Object","values","every","field","concat","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","_data$key","type","icon","postData","_data$key2","Row","Col","md","xs","Label","for","Controller","defaultValue","domain","name","render","_ref2","Input","invalid","Select","theme","selectThemeColors","onChange","options","classnames","classNamePrefix","isClearable","closeMenuOnSelect","e","console","log","description","_ref3","Button","outline","onClick"],"mappings":"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","file":"static/js/83.b8e78d23.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors, sortedObject } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"../store\"\r\nimport { getDataList as getDataListApp } from \"../../app/store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport classnames from \"classnames\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\n\r\nconst ModalAddEdit = ({\r\n  show,\r\n  setShow,\r\n  detailPage,\r\n  formState,\r\n  setFormState\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const storeApp = useSelector((state) => state.apps_app)\r\n  const storeUnit = useSelector((state) => state.units)\r\n  const [selectedData, setSelectedData] = useState(store.selectedData)\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const [idApp, setIdApp] = useState(null)\r\n  const [unitOptions, setUnitOptions] = useState([])\r\n  const [unitOptionsSelected, setUnitOptionsSelected] = useState({})\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n  const countChanges = (data) => {\r\n    if (formState === \"edit\") {\r\n      const storeData = { ...sortedObject(store.selectedData) }\r\n      delete storeData[\"id\"]\r\n      for (let key in storeData) {\r\n        if (!(key in data)) delete storeData[key]\r\n      }\r\n      // console.log(JSON.stringify(sortedObject(storeData)))\r\n      // console.log(JSON.stringify(sortedObject(data)))\r\n      return (\r\n        JSON.stringify(sortedObject(storeData)) !==\r\n        JSON.stringify(sortedObject(data))\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  const updateDataToApi = (data) => {\r\n    data[\"id_unit\"] = unitOptionsSelected.value\r\n    data[\"id_app\"] = idApp.value\r\n    if (countChanges(data)) {\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field !== null && field !== \"\"\r\n        })\r\n      ) {\r\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\r\n        dispatch(putData(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            setShow(!show)\r\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n            if (detailPage) {\r\n              dispatch(getDataById(id))\r\n            }\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = (data) => {\r\n    if (\r\n      Object.values(data).every((field) => {\r\n        return field !== null && field !== \"\"\r\n      })\r\n    ) {\r\n      // console.log(unitOptionsSelected)\r\n      data[\"id_unit\"] = unitOptionsSelected\r\n      data[\"id_app\"] = idApp\r\n      delete data[\"description\"]\r\n      // console.log(data)\r\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\r\n      dispatch(postData(data)).then((res) => {\r\n        //\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setShow(!show)\r\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n          if (detailPage) {\r\n            dispatch(getDataById(id))\r\n          }\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key] !== null && data[key]?.length === 0) {\r\n          setError(key, {\r\n            type: \"manual\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    dispatch(resetSelectedData())\r\n  }\r\n\r\n  const handleChangeUnit = (e) => {\r\n    console.log(e)\r\n    setUnitOptionsSelected(e.value)\r\n    // setUnitOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (storeApp.data.length === 0 || !storeApp.isLoading) {\r\n      dispatch(getDataListApp({}))\r\n    }\r\n\r\n    setIdApp(\r\n      storeApp.dataDropdown.filter(\r\n        (el) => el.value === store.selectedData?.id_app\r\n      )\r\n    )\r\n    const unitOptions = storeUnit.dataDropdown.filter((x) => x.value !== \"\")\r\n    setUnitOptions(unitOptions)\r\n    setUnitOptionsSelected(\r\n      unitOptions.filter((el) => el.value === store.selectedData?.id_unit)\r\n    )\r\n  }, [])\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={show}\r\n      toggle={() => {\r\n        handleReset()\r\n        setShow(!show)\r\n      }}\r\n      className=\"modal-dialog-centered modal-lg\"\r\n    >\r\n      <UILoader\r\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\r\n        loader={<Loader />}\r\n      >\r\n        <ModalHeader\r\n          className=\"bg-transparent\"\r\n          toggle={() => {\r\n            handleReset()\r\n            setShow(!show)\r\n          }}\r\n        ></ModalHeader>\r\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\r\n          <div className=\"text-center mb-2\">\r\n            <h2 className=\"mb-1\">\r\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\r\n            </h2>\r\n          </div>\r\n          <Form\r\n            onSubmit={\r\n              formState === \"edit\"\r\n                ? handleSubmit(updateDataToApi)\r\n                : handleSubmit(postDataToApi)\r\n            }\r\n          >\r\n            <Row className=\"gy-1 pt-75\">\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"domain\">\r\n                  {t(\"Domain Address\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.domain ?? \"\"}\r\n                  control={control}\r\n                  id=\"domain\"\r\n                  name=\"domain\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.domain\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"domain\"\r\n                      invalid={errors.domain && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"id_app\">\r\n                  {t(\"App\")}\r\n                </Label>\r\n                <Select\r\n                  id=\"id_app\"\r\n                  theme={selectThemeColors}\r\n                  defaultValue={storeApp.dataDropdown.filter(\r\n                    (el) => el.value === selectedData?.id_app\r\n                  )}\r\n                  onChange={(data) => {\r\n                    setIdApp(data.value)\r\n                  }}\r\n                  options={storeApp.dataDropdown}\r\n                  className={classnames(\"react-select\", {\r\n                    \"is-invalid\": idApp === null\r\n                  })}\r\n                  classNamePrefix=\"select\"\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"id_unit\">\r\n                  {t(\"Unit\")}\r\n                </Label>\r\n                <Select\r\n                  id=\"id_unit\"\r\n                  isClearable={false}\r\n                  theme={selectThemeColors}\r\n                  closeMenuOnSelect={true}\r\n                  defaultValue={storeUnit.dataDropdown.filter(\r\n                    (el) => el.value === selectedData?.id_unit\r\n                  )}\r\n                  onChange={(data) => {\r\n                    handleChangeUnit(data)\r\n                  }}\r\n                  options={unitOptions}\r\n                  className=\"react-select\"\r\n                  classNamePrefix=\"select\"\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"description\">\r\n                  {t(\"Description\")}\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.description ?? \"\"}\r\n                  control={control}\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.domain\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      type=\"textarea\"\r\n                      id=\"description\"\r\n                      invalid={errors.description && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n                <Button\r\n                  type=\"reset\"\r\n                  color=\"secondary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    setFormState(\"add\")\r\n                    setShow(false)\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </ModalBody>\r\n      </UILoader>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ModalAddEdit\r\n"],"sourceRoot":""}