{"version":3,"sources":["views/apps/permission/detail/index.js","views/apps/permission/Form.js","../node_modules/@mui/icons-material/esm/MenuOpen.js"],"names":["DetailPage","t","useTranslation","_useParams","useParams","id","pageType","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","_useState","useState","_useState2","_slicedToArray","setLoadingText","navigate","useNavigate","_useState3","_useState4","active","setActive","_useState5","_useState6","dynamicComponents","setDynamicComponents","sortedObject","unordered","Object","keys","sort","reduce","obj","key","updateDataToApi","data","storeData","_objectSpread","selectedData","JSON","stringify","countChanges","values","every","field","concat","pageTitle","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","error","payload","message","danger","_data$key","length","setError","type","icon","postDataToApi","postData","_data$key2","handleReset","resetSelectedData","useEffect","_store$selectedData","isLoadingDetail","parseInt","getDataById","componentsImport","dynamicFormRelation","extraCrud","_loop","i","crudName","path_name","MyComponent","lazy","_jsx","Fragment","children","lookupMode","lookupMode_defaultFilter","_defineProperty","replaceAll","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","lookupMode_onChange","lookupMode_defaultValue","lookupMode_isM2MDefValFromGrid","className","UILoader","blocking","loader","Loader","undefined","_jsxs","Row","Col","xl","lg","xs","order","md","size","Card","CardHeader","CardBody","FormAddEdit","formState","Nav","pills","map","item","index","NavItem","NavLink","onClick","tab","MenuOpen","crudLabel","TabContent","activeTab","TabPane","tabId","crudDescription","CardTitle","tag","Alert","Link","to","_ref","_store$selectedData$t","_store$selectedData$d","_store$selectedData2","_store$selectedData$s","_store$selectedData3","_useForm","useForm","control","handleSubmit","errors","Form","onSubmit","Label","for","Controller","defaultValue","title","name","render","_ref2","Input","invalid","description","_ref3","subject","_ref4","Button","outline","createSvgIcon","d"],"mappings":"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","file":"static/js/66.b7abda2a.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\r\nimport {\r\n  Fragment,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  lazy,\r\n  Suspense\r\n} from \"react\"\r\nimport { useParams, Link, useNavigate } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText,\r\n  CardHeader,\r\n  CardTitle,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  TabContent,\r\n  TabPane\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById,\r\n  extraCrud\r\n} from \"../store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport FormAddEdit from \"../Form\"\r\nimport { MenuOpen, Link as LinkIcon } from \"@mui/icons-material\"\r\n\r\nconst DetailPage = () => {\r\n  const { t } = useTranslation()\r\n  const { id, pageType } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const navigate = useNavigate()\r\n  const [active, setActive] = useState(\"1\")\r\n  const toggleTab = (tab) => {\r\n    if (active !== tab) {\r\n      setActive(tab)\r\n    }\r\n  }\r\n\r\n  const allStore = useSelector((state) => state)\r\n  const [dynamicComponents, setDynamicComponents] = useState({})\r\n\r\n  function sortedObject(unordered) {\r\n    return Object.keys(unordered)\r\n      .sort()\r\n      .reduce((obj, key) => {\r\n        obj[key] = unordered[key]\r\n        return obj\r\n      }, {})\r\n  }\r\n\r\n  const countChanges = (data) => {\r\n    if (pageType === \"edit\") {\r\n      const storeData = { ...sortedObject(store.selectedData) }\r\n      delete storeData[\"id\"]\r\n      for (let key in storeData) {\r\n        if (!(key in data)) delete storeData[key]\r\n      }\r\n      // console.log(JSON.stringify(sortedObject(storeData)))\r\n      // console.log(JSON.stringify(sortedObject(data)))\r\n      return (\r\n        JSON.stringify(sortedObject(storeData)) !==\r\n        JSON.stringify(sortedObject(data))\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  const updateDataToApi = (data) => {\r\n    if (countChanges(data)) {\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field !== null && field !== \"\"\r\n        })\r\n      ) {\r\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\r\n        dispatch(putData(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            navigate(-1)\r\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = (data) => {\r\n    if (\r\n      Object.values(data).every((field) => {\r\n        return field !== null && field !== \"\"\r\n      })\r\n    ) {\r\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\r\n      dispatch(postData(data)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          navigate(-1)\r\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key] !== null && data[key]?.length === 0) {\r\n          setError(key, {\r\n            type: \"manual\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleReset() {\r\n    dispatch(resetSelectedData())\r\n    // setpageType(\"add\")\r\n    return navigate(-1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // console.log(pageType)\r\n    // if (!store.isLoadingDetail) {\r\n    // console.log(store.selectedData?.id !== parseInt(id))\r\n    if (\r\n      pageType === \"edit\" &&\r\n      !store.isLoadingDetail &&\r\n      (!store.selectedData || store.selectedData?.id !== parseInt(id))\r\n    ) {\r\n      // setLoadingText(\r\n      //   `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      // )\r\n      // setLoading(true)\r\n      dispatch(getDataById(id)).then((res) => {\r\n        if (res.meta.requestStatus === \"rejected\") {\r\n          // setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        } else {\r\n          // setLoading(false)\r\n          // setShowModal(true)\r\n        }\r\n      })\r\n\r\n      // DYNAMIC IMPORT COMPONENTS\r\n      let componentsImport = {}\r\n      const dynamicFormRelation = extraCrud\r\n      for (let i = 0; i < dynamicFormRelation.length; i++) {\r\n        const crudName = dynamicFormRelation[i][\"crudName\"]\r\n        const crudLabel = dynamicFormRelation[i][\"crudLabel\"]\r\n        const path_name = dynamicFormRelation[i][\"crudName\"]\r\n\r\n        ////////////OTHERS CRUD\r\n        const MyComponent = lazy(() => import(`../../${path_name}`))\r\n        componentsImport[`${path_name}_comp`] = (\r\n          <Fragment>\r\n            <MyComponent\r\n              key={`extraCrud_${crudName}`}\r\n              lookupMode={true}\r\n              lookupMode_defaultFilter={{\r\n                [`filter_${storeName.replaceAll(\"apps_\", \"id_\")}`]:\r\n                  parseInt(id)\r\n              }}\r\n              lookupMode_fieldName={crudName}\r\n              lookupMode_dropdown={false}\r\n              lookupMode_isMulti={null}\r\n              lookupMode_onChange={null}\r\n              lookupMode_defaultValue={null}\r\n              lookupMode_isM2MDefValFromGrid={null}\r\n            />\r\n          </Fragment>\r\n        )\r\n      }\r\n\r\n      setDynamicComponents(componentsImport)\r\n    }\r\n    // }\r\n  }, [dispatch, store.selectedData])\r\n\r\n  return pageType === \"edit\" ? (\r\n    !store.isLoadingDetail ? (\r\n      store.selectedData !== null && store.selectedData !== undefined ? (\r\n        <div className=\"app-user-view\">\r\n          <Row>\r\n            <Col xl=\"5\" lg=\"6\" xs={{ order: 1 }} md={{ order: 0, size: 6 }}>\r\n              <Card>\r\n                <CardHeader>\r\n                  <h2>\r\n                    {t(\"Edit\")} {t(pageTitle)}\r\n                  </h2>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <FormAddEdit\r\n                    formState=\"edit\"\r\n                    updateDataToApi={updateDataToApi}\r\n                    postDataToApi={postDataToApi}\r\n                    handleReset={handleReset}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col xl=\"7\" lg=\"7\" xs={{ order: 0 }} md={{ order: 1, size: 7 }}>\r\n              <Nav pills className=\"mb-2\">\r\n                {extraCrud.map((item, index) => {\r\n                  const path_name = item.crudName\r\n                  return (\r\n                    <NavItem key={`navItem_${index + 1}`}>\r\n                      <NavLink\r\n                        active={active === `${index + 1}`}\r\n                        onClick={() => toggleTab(`${index + 1}`)}\r\n                      >\r\n                        <MenuOpen className=\"font-medium-3 me-50\" />\r\n                        <span className=\"fw-bold\">{t(item.crudLabel)}</span>\r\n                      </NavLink>\r\n                    </NavItem>\r\n                  )\r\n                })}\r\n              </Nav>\r\n              <TabContent activeTab={active}>\r\n                {extraCrud.map((item, index) => {\r\n                  const path_name = item.crudName\r\n                  return (\r\n                    <TabPane\r\n                      key={`tabPane_${index + 1}`}\r\n                      tabId={`${index + 1}`}\r\n                    >\r\n                      <Card>\r\n                        {item.crudDescription && (\r\n                          <CardHeader>\r\n                            <CardTitle tag=\"h4\">\r\n                              {t(item.crudDescription)}\r\n                            </CardTitle>\r\n                          </CardHeader>\r\n                        )}\r\n                        <CardBody className=\"pt-1\">\r\n                          {dynamicComponents[`${path_name}_comp`]}\r\n                        </CardBody>\r\n                      </Card>\r\n                    </TabPane>\r\n                  )\r\n                })}\r\n              </TabContent>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      ) : (\r\n        <Alert color=\"danger\">\r\n          <h4 className=\"alert-heading\">{t(\"User not found\")}</h4>\r\n          <div className=\"alert-body\">\r\n            {t(\"User with id\")}: {id}{\" \"}\r\n            {t(\"doesn't exist. Check list of all Users\")}:{\" \"}\r\n            <Link to=\"/apps/user/list\">{t(\"Users List\")}</Link>\r\n          </div>\r\n        </Alert>\r\n      )\r\n    ) : (\r\n      <Fragment>\r\n        <div className=\"app-user-view\">\r\n          <UILoader\r\n            className=\"mt-5\"\r\n            blocking={store.isLoadingDetail}\r\n            loader={<Loader />}\r\n          ></UILoader>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  ) : (\r\n    <div className=\"app-user-view\">\r\n      <Row>\r\n        <Col xl=\"12\" lg=\"12\" xs={{ order: 1 }} md={{ order: 0, size: 5 }}>\r\n          <Card>\r\n            <CardHeader>\r\n              <h2>\r\n                {t(\"Add\")} {t(pageTitle)}\r\n              </h2>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <FormAddEdit\r\n                formState=\"add\"\r\n                updateDataToApi={updateDataToApi}\r\n                postDataToApi={postDataToApi}\r\n                handleReset={handleReset}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\nexport default DetailPage\r\n","/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"./store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nconst FormAddEdit = ({\r\n  formState,\r\n  updateDataToApi,\r\n  postDataToApi,\r\n  handleReset\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={\r\n        formState === \"edit\"\r\n          ? handleSubmit(updateDataToApi)\r\n          : handleSubmit(postDataToApi)\r\n      }\r\n    >\r\n      <Row className=\"gy-1 pt-75\">\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"title\">\r\n            {t(\"Title\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.title ?? \"\"}\r\n            control={control}\r\n            id=\"title\"\r\n            name=\"title\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.title ? \"form-control is-invalid\" : \"form-control\"\r\n                }\r\n                id=\"title\"\r\n                invalid={errors.title && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"description\">\r\n            {t(\"Description\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.description ?? \"\"}\r\n            control={control}\r\n            id=\"description\"\r\n            name=\"description\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.description\r\n                    ? \"form-control is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                id=\"description\"\r\n                invalid={errors.description && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"subject\">\r\n            {t(\"Subject\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.subject ?? \"\"}\r\n            control={control}\r\n            id=\"subject\"\r\n            name=\"subject\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.subject ? \"form-control is-invalid\" : \"form-control\"\r\n                }\r\n                id=\"subject\"\r\n                invalid={errors.subject && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n          <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n            {t(\"Submit\")}\r\n          </Button>\r\n          <Button type=\"reset\" color=\"secondary\" outline onClick={handleReset}>\r\n            {t(\"Cancel\")}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default FormAddEdit\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 18h13v-2H3v2zm0-5h10v-2H3v2zm0-7v2h13V6H3zm18 9.59L17.42 12 21 8.41 19.59 7l-5 5 5 5L21 15.59z\"\n}), 'MenuOpen');"],"sourceRoot":""}