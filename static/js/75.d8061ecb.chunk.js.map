{"version":3,"sources":["views/apps/endpoint/modal/index.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","currentData","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","useState","loadingText","setLoadingText","allStore","dynamicComponents","setDynamicComponents","formDatas","formDatasError","setFormDatasError","useForm","setError","control","handleSubmit","Loader","errors","className","handleReset","resetSelectedData","handleChangeInputs","value","fieldName","isMulti","index","indexOf","splice","push","useEffect","componentsImport","dynamicFormRelation","dynamicForm","i","fieldLabel","path_name","replaceAll","MyComponent","lazy","for","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","data","map","x","selectedData","lookupMode_isM2MDefValFromGrid","defaultValue","onChange","e","target","length","isOpen","toggle","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","title","onSubmit","storeData","sortedObject","key","JSON","stringify","countChanges","Object","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","type","icon","postData","errorFields","assign","item","includes","md","xs","fallback","textAlign","outline","onClick"],"mappings":"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","file":"static/js/75.d8061ecb.chunk.js","sourcesContent":["/* eslint-disable brace-style */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  lazy,\n  Suspense\n} from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors, sortedObject } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById,\n  dynamicForm\n} from \"../store\"\n\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState,\n  currentData = null\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const allStore = useSelector((state) => state)\n  const [dynamicComponents, setDynamicComponents] = useState({})\n  const [formDatas, setFormDatas] = useState({})\n  const [formDatasError, setFormDatasError] = useState({})\n\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n        <CardText className=\"mb-0 mt-1\">{t(loadingText)}...</CardText>\n      </Fragment>\n    )\n  }\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(allStore[storeName].selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = () => {\n    if (countChanges(formDatas)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = () => {\n    if (\n      Object.values(formDatas).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(formDatas)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n          if (detailPage) {\n            dispatch(getDataById(id))\n          }\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      // console.log(\"ERORR\")\n      // console.log(formDatas)\n      let errorFields = Object.assign({}, formDatasError)\n      for (let key in formDatas) {\n        // console.log(key, formDatas[key])\n        if (formDatas[key] === null || formDatas[key]?.length === 0) {\n          errorFields[key] = true\n        }\n      }\n      // console.log(errorFields)\n      setFormDatasError(errorFields)\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\n    // console.log(value, fieldName, isMulti)\n    if (isMulti) {\n      if (formDatas[fieldName]) {\n        const index = formDatas[fieldName].indexOf(value)\n        if (index !== -1) {\n          formDatas[fieldName].splice(index, 1)\n        } else {\n          formDatas[fieldName].push(value)\n        }\n      } else {\n        formDatas[fieldName] = [value]\n      }\n    } else {\n      formDatas[fieldName] = value\n    }\n    // formDatasError[fieldName] = false\n    setFormDatasError({ ...formDatasError, [fieldName]: false })\n  }\n\n  useEffect(() => {\n    // DYNAMIC IMPORT COMPONENTS\n    let componentsImport = {}\n    // const dynamicFormRelation = dynamicForm.filter(function (el) {\n    //   return el.type === \"dropdown\" || el.type === \"table\"\n    // })\n\n    const dynamicFormRelation = dynamicForm\n    for (let i = 0; i < dynamicFormRelation.length; i++) {\n      const fieldName = dynamicFormRelation[i][\"fieldName\"]\n      const fieldLabel = dynamicFormRelation[i][\"fieldLabel\"]\n      const path_name = dynamicFormRelation[i][\"fieldName\"].replaceAll(\n        \"id_\",\n        \"\"\n      )\n\n      formDatas[fieldName] = null\n      formDatasError[fieldName] = false\n\n      ////////////INPUT - DROPDOWN\n      if (\n        dynamicFormRelation[i][\"type\"] === \"dropdown\" ||\n        dynamicFormRelation[i][\"type\"] === \"table\"\n      ) {\n        const MyComponent = lazy(() => import(`../../${path_name}`))\n        componentsImport[`${path_name}_comp`] = (\n          <Fragment>\n            <Label className=\"form-label\" for={fieldName}>\n              {t(fieldLabel ?? \"\")}\n            </Label>\n            <MyComponent\n              key={`dynInput_${fieldName}`}\n              lookupMode={true}\n              lookupMode_fieldName={fieldName}\n              lookupMode_dropdown={\n                dynamicFormRelation[i][\"type\"] === \"dropdown\"\n              }\n              lookupMode_isMulti={\n                dynamicFormRelation[i].isMultiSelection ?? false\n              }\n              lookupMode_onChange={handleChangeInputs}\n              lookupMode_defaultValue={\n                dynamicFormRelation[i]?.isM2MDefValFromGrid\n                  ? allStore[storeName].data.map((x) => x[fieldName])\n                  : allStore[storeName]?.selectedData\n                  ? allStore[storeName].selectedData[fieldName]\n                  : \"\"\n              }\n              lookupMode_isM2MDefValFromGrid={\n                dynamicFormRelation[i]?.isM2MDefValFromGrid ?? false\n              }\n            />\n          </Fragment>\n        )\n      }\n\n      ////////////INPUT - TEXT\n      else {\n        componentsImport[`${path_name}_comp`] = (\n          <Fragment>\n            <Label className=\"form-label\" for={fieldName}>\n              {t(fieldLabel ?? \"\")}\n            </Label>\n            <Input\n              key={`dynInput_${fieldName}`}\n              defaultValue={\n                dynamicFormRelation[i]?.isM2MDefValFromGrid\n                  ? allStore[storeName].data.map((x) => x[fieldName])\n                  : allStore[storeName]?.selectedData\n                  ? allStore[storeName].selectedData[fieldName]\n                  : \"\"\n              }\n              onChange={(e) =>\n                handleChangeInputs(\n                  e.target.value,\n                  fieldName,\n                  dynamicFormRelation[i].isMultiSelection ?? false\n                )\n              }\n              // className={\n              //   !formDatasError[fieldName]\n              //     ? \"form-control is-invalid\"\n              //     : \"form-control\"\n              // }\n              id={`dynInput_${fieldName}`}\n            />\n          </Fragment>\n        )\n      }\n    }\n\n    setDynamicComponents(componentsImport)\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add Sub\")} {t(pageTitle)}\n            </h2>\n            <p className=\"mb-1\">\n              {t(\"Child for \")} {currentData ? t(currentData.title) : \"\"}\n            </p>\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              {dynamicForm.map((item, index) => {\n                const path_name = item.fieldName.replaceAll(\"id_\", \"\")\n                if ([\"dropdown\", \"table\"].includes(item.type)) {\n                  if (item.type === \"table\") {\n                    return (\n                      <Col key={path_name} md={12} xs={12}>\n                        <Suspense fallback={<div>Loading...</div>}>\n                          <div\n                            className={\n                              !formDatasError[item.fieldName]\n                                ? \"dynamicForm_input\"\n                                : \"dynamicForm_input dynamicForm_input_invalid\"\n                            }\n                          >\n                            {dynamicComponents[`${path_name}_comp`]}\n                            {item?.isM2MDefValFromGrid &&\n                              formDatas[item.fieldName] && (\n                                <div\n                                  style={{ textAlign: \"right\" }}\n                                  className=\"text-primary\"\n                                >\n                                  {formDatas[item.fieldName]?.length}{\" \"}\n                                  {t(item.fieldLabel)} {t(\"Selected\")}\n                                </div>\n                              )}\n                          </div>\n                        </Suspense>\n                      </Col>\n                    )\n                  } else {\n                    return (\n                      <Col key={path_name} md={12} xs={12}>\n                        <Suspense fallback={<div>Loading...</div>}>\n                          <div\n                            className={\n                              !formDatasError[item.fieldName]\n                                ? \"\"\n                                : \"dynamicForm_input_invalid\"\n                            }\n                          >\n                            {dynamicComponents[`${path_name}_comp`]}\n                            {item?.isM2MDefValFromGrid &&\n                              formDatas[item.fieldName] && (\n                                <div\n                                  style={{ textAlign: \"right\" }}\n                                  className=\"text-primary\"\n                                >\n                                  {formDatas[item.fieldName]?.length}{\" \"}\n                                  {t(item.fieldLabel)} {t(\"Selected\")}\n                                </div>\n                              )}\n                          </div>\n                        </Suspense>\n                      </Col>\n                    )\n                  }\n                } else {\n                  return (\n                    <Col key={path_name} md={12} xs={12}>\n                      <div\n                        className={\n                          !formDatasError[item.fieldName]\n                            ? \"\"\n                            : \"dynamicForm_input_invalid\"\n                        }\n                      >\n                        {dynamicComponents[`${path_name}_comp`]}\n                      </div>\n                    </Col>\n                  )\n                }\n              })}\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n"],"sourceRoot":""}