{"version":3,"sources":["views/pages/authentication/register-multi-steps/steps/AccountDetails.js","@core/components/input-password-toggle/index.js"],"names":["defaultValues","email","username","password","confirmPassword","AccountDetails","_ref","stepper","SignupSchema","yup","shape","required","oneOf","_useForm","useForm","resolver","yupResolver","control","handleSubmit","errors","formState","_jsxs","Fragment","children","className","_jsx","Form","onSubmit","data","Object","values","every","field","length","next","Row","Col","md","Label","for","Controller","id","name","render","_ref2","Input","_objectSpread","placeholder","invalid","FormFeedback","message","_ref3","type","_ref4","InputPasswordToggle","label","htmlFor","_ref5","sm","Button","color","outline","disabled","ChevronLeft","size","ChevronRight","forwardRef","props","ref","_classnames","hideIcon","showIcon","visible","iconSize","inputClassName","rest","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","inputVisibility","setInputVisibility","InputGroup","classnames","_defineProperty","InputGroupText","onClick","Eye","EyeOff","renderIcon","defaultProps"],"mappings":"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","file":"static/js/152.2a183067.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment } from \"react\"\r\n\r\n// ** Third Party Components\r\nimport * as yup from \"yup\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport { yupResolver } from \"@hookform/resolvers/yup\"\r\nimport { ChevronLeft, ChevronRight } from \"react-feather\"\r\n\r\n// ** Reactstrap Imports\r\nimport { Form, Label, Input, Row, Col, Button, FormFeedback } from \"reactstrap\"\r\n\r\n// ** Custom Components\r\nimport InputPasswordToggle from \"@components/input-password-toggle\"\r\n\r\nconst defaultValues = {\r\n  email: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n  confirmPassword: \"\"\r\n}\r\n\r\nconst AccountDetails = ({ stepper }) => {\r\n  const SignupSchema = yup.object().shape({\r\n    username: yup.string().required(),\r\n    email: yup.string().email().required(),\r\n    password: yup.string().required(),\r\n    confirmPassword: yup\r\n      .string()\r\n      .required()\r\n      .oneOf([yup.ref(`password`), null], \"Passwords must match\")\r\n  })\r\n\r\n  // ** Hooks\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({\r\n    defaultValues,\r\n    resolver: yupResolver(SignupSchema)\r\n  })\r\n\r\n  const onSubmit = (data) => {\r\n    if (Object.values(data).every((field) => field.length > 0)) {\r\n      stepper.next()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"content-header mb-2\">\r\n        <h2 className=\"fw-bolder mb-75\">Account Information</h2>\r\n        <span>Enter your username password details</span>\r\n      </div>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"username\">\r\n              Username\r\n            </Label>\r\n            <Controller\r\n              id=\"username\"\r\n              name=\"username\"\r\n              control={control}\r\n              render={({ field }) => (\r\n                <Input\r\n                  placeholder=\"johndoe\"\r\n                  invalid={errors.username && true}\r\n                  {...field}\r\n                />\r\n              )}\r\n            />\r\n            {errors.username && (\r\n              <FormFeedback>{errors.username.message}</FormFeedback>\r\n            )}\r\n          </Col>\r\n          <Col md=\"6\" className=\"mb-1\">\r\n            <Label className=\"form-label\" for={`email`}>\r\n              Email\r\n            </Label>\r\n            <Controller\r\n              control={control}\r\n              id=\"email\"\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <Input\r\n                  type=\"email\"\r\n                  placeholder=\"john.doe@email.com\"\r\n                  invalid={errors.email && true}\r\n                  {...field}\r\n                />\r\n              )}\r\n            />\r\n            {errors.email && (\r\n              <FormFeedback>{errors.email.message}</FormFeedback>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <div className=\"form-password-toggle col-md-6 mb-1\">\r\n            <Controller\r\n              id=\"password\"\r\n              name=\"password\"\r\n              control={control}\r\n              render={({ field }) => (\r\n                <InputPasswordToggle\r\n                  label=\"Password\"\r\n                  htmlFor=\"password\"\r\n                  className=\"input-group-merge\"\r\n                  invalid={errors.password && true}\r\n                  {...field}\r\n                />\r\n              )}\r\n            />\r\n            {errors.password && (\r\n              <FormFeedback>{errors.password.message}</FormFeedback>\r\n            )}\r\n          </div>\r\n          <div className=\"form-password-toggle col-md-6 mb-1\">\r\n            <Controller\r\n              control={control}\r\n              id=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              render={({ field }) => (\r\n                <InputPasswordToggle\r\n                  label=\"Confirm Password\"\r\n                  htmlFor=\"password\"\r\n                  className=\"input-group-merge\"\r\n                  invalid={errors.confirmPassword && true}\r\n                  {...field}\r\n                />\r\n              )}\r\n            />\r\n            {errors.confirmPassword && (\r\n              <FormFeedback>{errors.confirmPassword.message}</FormFeedback>\r\n            )}\r\n          </div>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={12} className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"profile-link\">\r\n              Profile Link\r\n            </Label>\r\n            <Input id=\"profile-link\" placeholder=\"johndoe/profile\" />\r\n          </Col>\r\n          <Col sm={12} className=\"mb-1\">\r\n            <div className=\"form-check form-check-inline\">\r\n              <Input type=\"checkbox\" id=\"remember-me\" />\r\n              <Label for=\"remember-me\" className=\"form-check-label\">\r\n                Remember Me\r\n              </Label>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"d-flex justify-content-between mt-2\">\r\n          <Button color=\"secondary\" className=\"btn-prev\" outline disabled>\r\n            <ChevronLeft\r\n              size={14}\r\n              className=\"align-middle me-sm-25 me-0\"\r\n            ></ChevronLeft>\r\n            <span className=\"align-middle d-sm-inline-block d-none\">\r\n              Previous\r\n            </span>\r\n          </Button>\r\n          <Button type=\"submit\" color=\"primary\" className=\"btn-next\">\r\n            <span className=\"align-middle d-sm-inline-block d-none\">Next</span>\r\n            <ChevronRight\r\n              size={14}\r\n              className=\"align-middle ms-sm-25 ms-0\"\r\n            ></ChevronRight>\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AccountDetails\r\n","// ** React Imports\r\nimport { Fragment, useState, forwardRef } from \"react\"\r\n\r\n// ** Third Party Components\r\nimport PropTypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, EyeOff } from \"react-feather\"\r\n\r\n// ** Reactstrap Imports\r\nimport { InputGroup, Input, InputGroupText, Label } from \"reactstrap\"\r\n\r\nconst InputPasswordToggle = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    invalid,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? (\r\n        <Label className=\"form-label\" for={htmlFor}>\r\n          {label}\r\n        </Label>\r\n      ) : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className,\r\n          \"is-invalid\": invalid\r\n        })}\r\n      >\r\n        <Input\r\n          ref={ref}\r\n          invalid={invalid}\r\n          type={inputVisibility === false ? \"password\" : \"text\"}\r\n          placeholder={placeholder ? placeholder : \"············\"}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor,\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupText\r\n          className=\"cursor-pointer\"\r\n          onClick={() => setInputVisibility(!inputVisibility)}\r\n        >\r\n          {renderIcon()}\r\n        </InputGroupText>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n})\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  invalid: PropTypes.bool,\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props[\"htmlFor\"] === \"undefined\") {\r\n      throw new Error(\"htmlFor prop is required when label prop is present\")\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props[\"label\"] === \"undefined\") {\r\n      throw new Error(\"label prop is required when htmlFor prop is present\")\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}