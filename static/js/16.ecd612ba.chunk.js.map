{"version":3,"sources":["views/apps/permission/modal/index.js","views/apps/permission/Form.js","views/apps/permission/Table.js","../../src/mounts.js","../../src/index.js"],"names":["ModalAddEdit","_ref","show","setShow","detailPage","formState","setFormState","t","useTranslation","dispatch","useParams","id","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","_useState","useState","_useState2","_slicedToArray","setLoadingText","sortedObject","unordered","Object","keys","sort","reduce","obj","key","handleReset","resetSelectedData","_jsx","Modal","isOpen","toggle","className","children","_jsxs","UILoader","blocking","isLoadingAddEdit","isLoadingDetail","loader","Loader","ModalHeader","ModalBody","pageTitle","FormAddEdit","updateDataToApi","data","storeData","_objectSpread","selectedData","JSON","stringify","countChanges","values","every","field","concat","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","error","payload","message","danger","_data$key","length","setError","type","icon","postDataToApi","postData","_data$key2","_store$selectedData$t","_store$selectedData","_store$selectedData$d","_store$selectedData2","_store$selectedData$s","_store$selectedData3","_useForm","useForm","control","handleSubmit","errors","Form","onSubmit","Row","Col","md","xs","Label","for","Controller","defaultValue","title","name","render","_ref2","Input","invalid","description","_ref3","subject","_ref4","Button","outline","onClick","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","CustomHeader","handleAddEdit","handlePerPage","rowsPerPage","handleFilter","searchTerm","handleFiltersChange","selectedRow","handleDeleteSelected","filtersCustomAdd","ability","AbilityContext","allStore","dynamicFilterComponents","setDynamicFilterComponents","_useState3","_useState4","dynamicFilterDatas","handleChangeInputs","value","fieldName","isMulti","arguments","undefined","index","indexOf","splice","push","useEffect","componentsImport","_loop","i","_dynamicColumnsFilter","_dynamicColumnsFilter2","_allStore$storeName","_dynamicColumnsFilter3","_dynamicColumnsFilter4","dynamicColumnsFilter","path_name","replaceAll","MyComponent","lazy","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","map","x","lookupMode_isM2MDefValFromGrid","lg","htmlFor","onChange","width","e","target","item","Suspense","fallback","can","sessionStorage","getItem","List","_useState5","_useState6","sort_dir","setSortDir","_useState7","_useState8","setSearchTerm","_useState9","_useState10","currentPage","setCurrentPage","_useState11","_useState12","setSort","_useState13","_useState14","setRowsPerPage","_useState15","_useState16","selectedRows","setSelectedRows","_useState17","_useState18","filtersCustom","_useState19","_useState20","toggleCleared","setToggleCleared","_useState21","_useState22","sidebarOpen","setSidebarOpen","_useState23","_useState24","loading","setLoading","_useState25","_useState26","_useState27","_useState28","showModal","setShowModal","_useState29","_useState30","navigate","useNavigate","location","useLocation","colorsAssignee","Viewer","Editor","Manager","Administrator","rowData","pathname","r","detailFromGrid","setDataById","getDataById","handleCloseModal","revivalBack","handleDelete","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","sent","deleteData","stop","_x","apply","_callee2","countSelectedCopy","_context2","a","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","conditionalRowStyles","when","row","Array","isArray","classNames","columns","_toConsumableArray","dynamicColumns","column","columnName","sortField","center","grow","sortable","selector","cell","renderCell","_ref5","assignedTo","assignee","isLastBadge","Link","to","classnames","Badge","pill","marginTop","replace","_ref6","appsName","menuCount","_Fragment","endpointCount","GlobalActionsTable","handleEdit","tableColumns","useMemo","isLoading","Skeleton","sx","bgcolor","dark","light","animation","height","getAlwaysGrid","Fragment","Card","DataTable","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","count","Number","Math","ceil","ReactPaginate","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","deleteSelection","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","NoDataDisplay","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","ChevronDown","filters","isFiltered","some","k","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","par_name","neutralizeBack","mounts","getter","swal","getTitle","getHtmlContainer","getConfirmButton","getDenyButton","getCancelButton","getFooter","getCloseButton","getIcon","querySelector","getLoader","noop","ParentSwal","extractReactParams","params","reactParams","otherParams","mountKeys","mount","entries","forEach","includes","React__default","isValidElement","domElement","find","ReactDOM__default","__mountedDomElements","unrender","unmountComponentAtNode","_ParentSwal","_inherits","_class","_super","_createSuper","_classCallCheck","_createClass","mixinParams","_this","this","__params","assign","_extractReactParams","_extractReactParams2","superDidOpen","didOpen","superDidDestroy","didDestroy","_get","_getPrototypeOf","prototype","call","popup","_extractReactParams3","_extractReactParams4","args","argsToParams"],"mappings":"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","file":"static/js/16.ecd612ba.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"../store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport FormAddEdit from \"../Form\"\r\n\r\nconst ModalAddEdit = ({\r\n  show,\r\n  setShow,\r\n  detailPage,\r\n  formState,\r\n  setFormState\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  // const [tgl1, setTgl1] = useState(null)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  // const {\r\n  //   control,\r\n  //   setError,\r\n  //   handleSubmit,\r\n  //   formState: { errors }\r\n  // } = useForm({})\r\n\r\n  function sortedObject(unordered) {\r\n    return Object.keys(unordered)\r\n      .sort()\r\n      .reduce((obj, key) => {\r\n        obj[key] = unordered[key]\r\n        return obj\r\n      }, {})\r\n  }\r\n\r\n  const countChanges = (data) => {\r\n    if (formState === \"edit\") {\r\n      const storeData = { ...sortedObject(store.selectedData) }\r\n      delete storeData[\"id\"]\r\n      for (let key in storeData) {\r\n        if (!(key in data)) delete storeData[key]\r\n      }\r\n      // console.log(JSON.stringify(sortedObject(storeData)))\r\n      // console.log(JSON.stringify(sortedObject(data)))\r\n      return (\r\n        JSON.stringify(sortedObject(storeData)) !==\r\n        JSON.stringify(sortedObject(data))\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  const updateDataToApi = (data) => {\r\n    if (countChanges(data)) {\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field !== null && field !== \"\"\r\n        })\r\n      ) {\r\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\r\n        dispatch(putData(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            setShow(!show)\r\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = (data) => {\r\n    if (\r\n      Object.values(data).every((field) => {\r\n        return field !== null && field !== \"\"\r\n      })\r\n    ) {\r\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\r\n      dispatch(postData(data)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setShow(!show)\r\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key] !== null && data[key]?.length === 0) {\r\n          setError(key, {\r\n            type: \"manual\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleReset() {\r\n    dispatch(resetSelectedData())\r\n    setFormState(\"add\")\r\n    return setShow(false)\r\n  }\r\n\r\n  return !detailPage ? (\r\n    <Modal\r\n      isOpen={show}\r\n      toggle={() => {\r\n        handleReset()\r\n        setShow(!show)\r\n      }}\r\n      className=\"modal-dialog-centered modal-lg\"\r\n    >\r\n      <UILoader\r\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\r\n        loader={<Loader />}\r\n      >\r\n        <ModalHeader\r\n          className=\"bg-transparent\"\r\n          toggle={() => {\r\n            handleReset()\r\n            setShow(!show)\r\n          }}\r\n        ></ModalHeader>\r\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\r\n          <div className=\"text-center mb-2\">\r\n            <h2 className=\"mb-1\">\r\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\r\n            </h2>\r\n          </div>\r\n          <FormAddEdit\r\n            formState={formState}\r\n            updateDataToApi={updateDataToApi}\r\n            postDataToApi={postDataToApi}\r\n            handleReset={handleReset}\r\n          />\r\n          {/* <Form\r\n            onSubmit={\r\n              formState === \"edit\"\r\n                ? handleSubmit(updateDataToApi)\r\n                : handleSubmit(postDataToApi)\r\n            }\r\n          >\r\n            <Row className=\"gy-1 pt-75\">\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"title\">\r\n                  {t(\"Title\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.title ?? \"\"}\r\n                  control={control}\r\n                  id=\"title\"\r\n                  name=\"title\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.title\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"title\"\r\n                      invalid={errors.title && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"description\">\r\n                  {t(\"Description\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.description ?? \"\"}\r\n                  control={control}\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.description\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"description\"\r\n                      invalid={errors.description && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"subject\">\r\n                  {t(\"Subject\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.subject ?? \"\"}\r\n                  control={control}\r\n                  id=\"subject\"\r\n                  name=\"subject\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.subject\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"subject\"\r\n                      invalid={errors.subject && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n                <Button\r\n                  type=\"reset\"\r\n                  color=\"secondary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    setFormState(\"add\")\r\n                    setShow(false)\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form> */}\r\n        </ModalBody>\r\n      </UILoader>\r\n    </Modal>\r\n  ) : null\r\n}\r\n\r\nexport default ModalAddEdit\r\n","/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"./store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nconst FormAddEdit = ({\r\n  formState,\r\n  updateDataToApi,\r\n  postDataToApi,\r\n  handleReset\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={\r\n        formState === \"edit\"\r\n          ? handleSubmit(updateDataToApi)\r\n          : handleSubmit(postDataToApi)\r\n      }\r\n    >\r\n      <Row className=\"gy-1 pt-75\">\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"title\">\r\n            {t(\"Title\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.title ?? \"\"}\r\n            control={control}\r\n            id=\"title\"\r\n            name=\"title\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.title ? \"form-control is-invalid\" : \"form-control\"\r\n                }\r\n                id=\"title\"\r\n                invalid={errors.title && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"description\">\r\n            {t(\"Description\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.description ?? \"\"}\r\n            control={control}\r\n            id=\"description\"\r\n            name=\"description\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.description\r\n                    ? \"form-control is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                id=\"description\"\r\n                invalid={errors.description && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"subject\">\r\n            {t(\"Subject\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.subject ?? \"\"}\r\n            control={control}\r\n            id=\"subject\"\r\n            name=\"subject\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.subject ? \"form-control is-invalid\" : \"form-control\"\r\n                }\r\n                id=\"subject\"\r\n                invalid={errors.subject && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n          <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n            {t(\"Submit\")}\r\n          </Button>\r\n          <Button type=\"reset\" color=\"secondary\" outline onClick={handleReset}>\r\n            {t(\"Cancel\")}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default FormAddEdit\r\n","/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable no-confusing-arrow */\r\n/* eslint-disable multiline-ternary */\r\nimport {\r\n  Fragment,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useMemo,\r\n  useCallback,\r\n  forwardRef,\r\n  lazy,\r\n  Suspense\r\n} from \"react\"\r\nimport classnames from \"classnames\"\r\nimport { Link, useNavigate, useLocation } from \"react-router-dom\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { AbilityContext } from \"@src/utility/context/Can\"\r\nimport ModalAddEdit from \"./modal\"\r\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\r\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  serverSideGrid,\r\n  detailFromGrid,\r\n  deleteSelection,\r\n  getApiAfterPut,\r\n  getApiAfterPost,\r\n  getApiAfterDelete,\r\n  getSummarysData,\r\n  detailPage,\r\n  getAlwaysGrid,\r\n  getDataList,\r\n  getDataById,\r\n  setDataById,\r\n  resetSelectedData,\r\n  deleteData,\r\n  deleteSelectedRowData,\r\n  dynamicColumnsFilter\r\n} from \"./store\"\r\nimport { getInvoice } from \"../../invoices/store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport DataTable from \"react-data-table-component\"\r\nimport debounce from \"lodash.debounce\"\r\nimport {\r\n  ChevronDown,\r\n  Share,\r\n  Printer,\r\n  FileText,\r\n  File,\r\n  Grid,\r\n  Copy,\r\n  Slack,\r\n  User,\r\n  Settings,\r\n  Database,\r\n  Edit2,\r\n  MoreVertical,\r\n  Trash2,\r\n  Archive,\r\n  Eye,\r\n  CheckCircle,\r\n  CheckSquare,\r\n  Check,\r\n  Square\r\n} from \"react-feather\"\r\n\r\nimport { getUserData } from \"@utils\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport toast from \"react-hot-toast\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  CardBody,\r\n  CardTitle,\r\n  CardHeader,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n  Badge,\r\n  UncontrolledTooltip,\r\n  CardText\r\n} from \"reactstrap\"\r\n\r\nimport \"@styles/react/libs/react-select/_react-select.scss\"\r\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\r\nimport Swal from \"sweetalert2\"\r\nimport withReactContent from \"sweetalert2-react-content\"\r\nimport { Skeleton } from \"@mui/material\"\r\nimport Moment from \"moment\"\r\n\r\nconst MySwal = withReactContent(Swal)\r\nconst BootstrapCheckbox = forwardRef((props, ref) => (\r\n  <div className=\"form-check\">\r\n    <Input type=\"checkbox\" ref={ref} {...props} />\r\n  </div>\r\n))\r\n\r\n// ** Table Header\r\nconst CustomHeader = ({\r\n  store,\r\n  handleAddEdit,\r\n  handlePerPage,\r\n  rowsPerPage,\r\n  handleFilter,\r\n  searchTerm,\r\n  selectedRow,\r\n  handleDeleteSelected,\r\n  handleFiltersChange,\r\n  filtersCustomAdd\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const allStore = useSelector((state) => state)\r\n  const [dynamicFilterComponents, setDynamicFilterComponents] = useState({})\r\n  const [dynamicFilterDatas, setDynamicFilterDatas] = useState({})\r\n\r\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\r\n    fieldName = `filter_${fieldName}`\r\n    if (isMulti) {\r\n      if (dynamicFilterDatas[fieldName]) {\r\n        const index = dynamicFilterDatas[fieldName].indexOf(value)\r\n        if (index !== -1) {\r\n          dynamicFilterDatas[fieldName].splice(index, 1)\r\n        } else {\r\n          dynamicFilterDatas[fieldName].push(value)\r\n        }\r\n      } else {\r\n        dynamicFilterDatas[fieldName] = [value]\r\n      }\r\n    } else {\r\n      dynamicFilterDatas[fieldName] = value\r\n    }\r\n    return handleFiltersChange(dynamicFilterDatas[fieldName], fieldName)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // DYNAMIC IMPORT COMPONENTS\r\n    let componentsImport = {}\r\n    for (let i = 0; i < dynamicColumnsFilter.length; i++) {\r\n      const fieldName = dynamicColumnsFilter[i][\"fieldName\"]\r\n      const path_name = dynamicColumnsFilter[i][\"fieldName\"].replaceAll(\r\n        \"id_\",\r\n        \"\"\r\n      )\r\n\r\n      dynamicFilterDatas[`filter_${fieldName}`] = null\r\n      const MyComponent = lazy(() => import(`../${path_name}`))\r\n      componentsImport[`${path_name}_comp`] = (\r\n        <MyComponent\r\n          lookupMode={true}\r\n          lookupMode_fieldName={fieldName}\r\n          lookupMode_dropdown={true}\r\n          lookupMode_isMulti={dynamicColumnsFilter[i].isMultiSelection ?? false}\r\n          lookupMode_onChange={handleChangeInputs}\r\n          lookupMode_defaultValue={\r\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid\r\n              ? allStore[storeName].data.map((x) => x[fieldName])\r\n              : allStore[storeName]?.selectedData\r\n              ? allStore[storeName].selectedData[fieldName]\r\n              : \"\"\r\n          }\r\n          lookupMode_isM2MDefValFromGrid={\r\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid ?? false\r\n          }\r\n        />\r\n      )\r\n    }\r\n\r\n    setDynamicFilterComponents(componentsImport)\r\n  }, [dispatch, dynamicFilterDatas])\r\n\r\n  return (\r\n    <Row className=\"text-nowrap w-100 my-75 g-0 permission-header\">\r\n      <Col xs={12} lg={4} className=\"d-flex align-items-center\">\r\n        <div className=\"d-flex align-items-center justify-content-center justify-content-lg-start\">\r\n          <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\r\n          <Input\r\n            className=\"mx-50\"\r\n            type=\"select\"\r\n            id=\"rows-per-page\"\r\n            value={rowsPerPage}\r\n            onChange={handlePerPage}\r\n            style={{ width: \"5rem\" }}\r\n          >\r\n            <option value=\"10\">10</option>\r\n            <option value=\"25\">25</option>\r\n            <option value=\"50\">50</option>\r\n          </Input>\r\n          <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\r\n        </div>\r\n      </Col>\r\n      <Col xs={12} lg={8}>\r\n        <div className=\"d-flex align-items-center justify-content-lg-end justify-content-start flex-md-nowrap flex-wrap mt-lg-0 mt-1\">\r\n          <div className=\"d-flex align-items-center me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              {t(\"Search\")}:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n          {/* <div className=\"mt-50 width-200 me-1 mt-sm-0 mt-1\">\r\n            <Input\r\n              type=\"select\"\r\n              name=\"select\"\r\n              // value={role}\r\n              onChange={(e) => handleAssignedToChange(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Role</option>\r\n              <option value=\"administrator\">Administrator</option>\r\n              <option value=\"manager\">Manager</option>\r\n              <option value=\"user\">User</option>\r\n              <option value=\"support\">Support</option>\r\n              <option value=\"restricted-user\">Restricted User</option>\r\n            </Input>\r\n          </div> */}\r\n          {dynamicColumnsFilter.map((item, index) => {\r\n            const path_name = item.fieldName.replaceAll(\"id_\", \"\")\r\n            return (\r\n              <div\r\n                key={path_name}\r\n                className=\"mt-50 width-300 me-1 mt-sm-0 mt-1\"\r\n              >\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                  {dynamicFilterComponents[`${path_name}_comp`]}\r\n                </Suspense>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n          {ability.can(\"post\", sessionStorage.getItem(\"current_page_perm\")) ? (\r\n            <Button\r\n              className=\"add-permission mt-sm-0 mt-1\"\r\n              color=\"primary\"\r\n              // onClick={toggleSidebar}\r\n              onClick={handleAddEdit}\r\n            >\r\n              {t(\"Add New\")} {t(pageTitle)}\r\n            </Button>\r\n          ) : null}\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst List = ({ filtersCustomAdd }) => {\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n  const [sort_dir, setSortDir] = useState(\"desc\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [sort, setSort] = useState(\"id\")\r\n  const [rowsPerPage, setRowsPerPage] = useState(10)\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n\r\n  const [filtersCustom, setFiltersCustom] = useState(filtersCustomAdd ?? {})\r\n\r\n  const [toggleCleared, setToggleCleared] = useState(false)\r\n\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [formState, setFormState] = useState(null)\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const colorsAssignee = {\r\n    Viewer: \"light-info\",\r\n    Editor: \"light-success\",\r\n    Manager: \"light-warning\",\r\n    Administrator: \"light-primary\",\r\n    \"restricted-user\": \"light-danger\"\r\n  }\r\n\r\n  const handleAddEdit = (rowData) => {\r\n    // console.log(rowData.id)\r\n    if (!rowData.id) {\r\n      setFormState(\"edit\")\r\n    } else {\r\n      setFormState(\"add\")\r\n    }\r\n    //\r\n    if (!detailPage) {\r\n      if (!detailFromGrid) {\r\n        setLoadingText(\r\n          `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n        )\r\n        setLoading(true)\r\n        dispatch(getDataById(rowData.id)).then((res) => {\r\n          if (res.meta.requestStatus === \"rejected\") {\r\n            setLoading(false)\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          } else {\r\n            setLoading(false)\r\n            setShowModal(true)\r\n          }\r\n        })\r\n      } else {\r\n        setLoadingText(\r\n          `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n        )\r\n        setLoading(true)\r\n        dispatch(setDataById(rowData)).then(() => {\r\n          setLoading(false)\r\n          setShowModal(true)\r\n        })\r\n      }\r\n    } else {\r\n      if (rowData.id) {\r\n        navigate(`${location.pathname}/edit/${rowData.id}`)\r\n      } else {\r\n        dispatch(resetSelectedData({})).then((r) => {\r\n          navigate(`${location.pathname}/add`)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    revivalBack()\r\n  }\r\n\r\n  const toggleSidebar = () => {\r\n    // console.log(\"here\")\r\n    setFormState(\"add\")\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    neutralizeBack(handleCloseModal)\r\n  }\r\n\r\n  const handleDelete = async (id) => {\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\r\n      setLoading(true)\r\n      dispatch(deleteData(id)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setLoading(false)\r\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDeleteSelected = async () => {\r\n    const countSelectedCopy = selectedRows.length\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\r\n        \"selected data. Deleted data cannot be recovered\"\r\n      )}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\r\n        pageTitle\r\n      )}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(\r\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      const values = selectedRows.map((a) => a.id)\r\n      // console.log(values)\r\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setSelectedRows([])\r\n          setToggleCleared(!toggleCleared)\r\n          setLoading(false)\r\n          toast.success(\r\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\r\n            {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            }\r\n          )\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /////PAGINATION SERVERSIDE\r\n  const handlePagination = (page) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: rowsPerPage,\r\n        page: page.selected + 1,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  const handlePerPage = (e) => {\r\n    const value = parseInt(e.currentTarget.value)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: value,\r\n        page: currentPage,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n    setRowsPerPage(value)\r\n  }\r\n\r\n  const handleDebounceFn = (inputValue) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        search: inputValue,\r\n        sort,\r\n        page: currentPage,\r\n        length: rowsPerPage,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n  }\r\n\r\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\r\n\r\n  const handleFilter = (event) => {\r\n    setSearchTerm(event)\r\n    debounceFn(event)\r\n  }\r\n\r\n  const handleFiltersChange = (value, par_name) => {\r\n    filtersCustom[par_name] = value\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        page: currentPage,\r\n        length: rowsPerPage,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleSort = (column, sortDirection) => {\r\n    setSortDir(sortDirection)\r\n    setSort(column.sortField)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        page: currentPage,\r\n        length: rowsPerPage,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleRowSelected = useCallback((state) => {\r\n    setSelectedRows(state.selectedRows)\r\n  }, [])\r\n\r\n  const CustomPagination = () => {\r\n    const count = Number(Math.ceil(store.total / rowsPerPage))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={\"\"}\r\n        nextLabel={\"\"}\r\n        pageCount={count || 1}\r\n        activeClassName=\"active\"\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={(page) => handlePagination(page)}\r\n        pageClassName={\"page-item\"}\r\n        nextLinkClassName={\"page-link\"}\r\n        nextClassName={\"page-item next\"}\r\n        previousClassName={\"page-item prev\"}\r\n        previousLinkClassName={\"page-link\"}\r\n        pageLinkClassName={\"page-link\"}\r\n        containerClassName={\r\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  const conditionalRowStyles = [\r\n    {\r\n      when: (row) => Array.isArray(row),\r\n      classNames: [\"d-table\"]\r\n    }\r\n  ]\r\n\r\n  const columns = [\r\n    ...store.dynamicColumns.map((column) => ({\r\n      name: column.columnName,\r\n      sortField: column.fieldName,\r\n      center: false,\r\n      wrap: true,\r\n      grow: 0,\r\n      sortable: true,\r\n      width: \"250px\",\r\n      selector: (row) => row[column.fieldName],\r\n      cell: (row) => renderCell(row, column)\r\n    })),\r\n    {\r\n      name: t(\"Title\"),\r\n      center: false,\r\n      sortable: true,\r\n      wrap: true,\r\n      width: \"350px\",\r\n      sortField: \"title\",\r\n      selector: (row) => row.title,\r\n      cell: (row) => {\r\n        const title = row.title,\r\n          description = row.description ? row.description : \"\"\r\n        return (\r\n          <div className=\"d-flex justify-content-left align-items-center\">\r\n            <div className=\"d-flex flex-column\">\r\n              <h6 className=\"user-name text-truncate mb-0\">{title}</h6>\r\n              <small className=\"text-truncate text-muted mb-0\">\r\n                {description}\r\n              </small>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    },\r\n\r\n    // {\r\n    //   name: t(\"Subject\"),\r\n    //   center: false,\r\n    //   sortable: true,\r\n    //   // minWidth: \"400px\",\r\n    //   sortField: \"subject\",\r\n    //   selector: (row) => row.subject,\r\n    //   cell: (row) => row.subject\r\n    // },\r\n    {\r\n      name: t(\"Assigned To\"),\r\n      sortable: false,\r\n      wrap: false,\r\n      grow: 2,\r\n      width: \"300px\",\r\n      cell: ({ assignedTo }) => {\r\n        if (assignedTo) {\r\n          return assignedTo.map((assignee, index) => {\r\n            const isLastBadge = assignedTo[assignedTo.length - 1] === index\r\n            return (\r\n              <Link\r\n                key={`${assignee}-${index}`}\r\n                to=\"/apps/roles\"\r\n                className={classnames({ \"me-50\": !isLastBadge })}\r\n              >\r\n                <Badge\r\n                  pill\r\n                  color={colorsAssignee[assignee]}\r\n                  style={{\r\n                    marginTop: \"2px\"\r\n                  }}\r\n                  className=\"text-capitalize\"\r\n                >\r\n                  {assignee?.replace(\"-\", \" \")}\r\n                </Badge>\r\n              </Link>\r\n            )\r\n          })\r\n        } else {\r\n          return null\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: t(\"Apps\"),\r\n      center: false,\r\n      sortable: false,\r\n      wrap: true,\r\n      width: \"200px\",\r\n      cell: ({ appsName }) => {\r\n        if (appsName) {\r\n          return appsName.map((assignee, index) => {\r\n            const isLastBadge = appsName[appsName.length - 1] === index\r\n            return (\r\n              <Link\r\n                key={`${assignee}-${index}`}\r\n                to=\"/apps/app\"\r\n                className={classnames({ \"me-50\": !isLastBadge })}\r\n              >\r\n                <Badge\r\n                  pill\r\n                  color={colorsAssignee[assignee]}\r\n                  className=\"text-capitalize\"\r\n                >\r\n                  {assignee.replace(\"-\", \" \")}\r\n                </Badge>\r\n              </Link>\r\n            )\r\n          })\r\n        } else {\r\n          return null\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: t(\"Resources\"),\r\n      center: false,\r\n      sortable: false,\r\n      width: \"160px\",\r\n      selector: (row) => row.menuCount,\r\n      cell: (row) => {\r\n        return (\r\n          <>\r\n            <Link\r\n              key=\"table-field-count-menu\"\r\n              to=\"/apps/permission_menu\"\r\n              className=\"me-50\"\r\n            >\r\n              <Badge pill color=\"light-info\" className=\"text-capitalize\">\r\n                {row.menuCount} {t(\"Menu\")}\r\n              </Badge>\r\n            </Link>\r\n            <Link\r\n              key=\"table-field-count-endpoint\"\r\n              to=\"/apps/permission_endpoint\"\r\n            >\r\n              <Badge pill color=\"light-warning\" className=\"text-capitalize\">\r\n                {row.endpointCount} {t(\"Endpoint\")}\r\n              </Badge>\r\n            </Link>\r\n          </>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      name: t(\"Actions\"),\r\n      center: true,\r\n      width: \"140px\",\r\n      cell: (row) => (\r\n        <GlobalActionsTable\r\n          row={row}\r\n          handleDelete={handleDelete}\r\n          handleEdit={handleAddEdit}\r\n        />\r\n      )\r\n    }\r\n  ]\r\n\r\n  const tableColumns = useMemo(\r\n    () =>\r\n      store.isLoading\r\n        ? columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column,\r\n            sortable: false,\r\n            cell: (row) =>\r\n              column.name === \"Actions\" ? (\r\n                <>\r\n                  <Skeleton\r\n                    sx={{ bgcolor: colors.dark.light }}\r\n                    animation=\"wave\"\r\n                    className=\"ms-2 me-1\"\r\n                    width={30}\r\n                    height={40}\r\n                  />\r\n                  <Skeleton\r\n                    sx={{ bgcolor: colors.dark.light }}\r\n                    animation=\"wave\"\r\n                    width={30}\r\n                    height={40}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <Skeleton\r\n                  sx={{ bgcolor: colors.dark.light }}\r\n                  animation=\"wave\"\r\n                  width=\"100%\"\r\n                  height={40}\r\n                />\r\n              )\r\n          }))\r\n        : columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column\r\n          })),\r\n    [store.isLoading, columns]\r\n  )\r\n\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      search: searchTerm\r\n    }\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n    if (!store.isLoading) {\r\n      if (store.data.length > 0) {\r\n        return store.data\r\n      } else if (store.data.length === 0 && isFiltered) {\r\n        return []\r\n      } else {\r\n        // console.log(store.allData)\r\n        // return store.allData.slice(0, rowsPerPage)\r\n      }\r\n    } else {\r\n      return Array(10).fill({})\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if ((store.data.length === 0 || getAlwaysGrid) && !store.isLoading) {\r\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\r\n      dispatch(\r\n        getDataList({\r\n          sort_dir,\r\n          sort,\r\n          search: searchTerm,\r\n          page: currentPage,\r\n          length: rowsPerPage,\r\n          ...filtersCustom\r\n        })\r\n      )\r\n    }\r\n    // console.log(store)\r\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\r\n\r\n  return (\r\n    <Fragment>\r\n      <UILoader blocking={loading} loader={<Loader />}>\r\n        <Card className=\"overflow-hidden\">\r\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\r\n            <DataTable\r\n              noHeader\r\n              subHeader\r\n              sortServer\r\n              responsive\r\n              pagination\r\n              paginationServer\r\n              paginationTotalRows={store.total}\r\n              paginationComponent={CustomPagination}\r\n              selectableRows={deleteSelection}\r\n              onSelectedRowsChange={handleRowSelected}\r\n              selectableRowsHighlight\r\n              clearSelectedRows={toggleCleared}\r\n              selectableRowsComponent={BootstrapCheckbox}\r\n              noDataComponent={<NoDataDisplay />}\r\n              style={{ \"min-height\": \"400px\" }}\r\n              highlightOnHover\r\n              pointerOnHover\r\n              columns={tableColumns}\r\n              conditionalRowStyles={conditionalRowStyles}\r\n              onSort={handleSort}\r\n              sortIcon={<ChevronDown />}\r\n              className=\"react-dataTable\"\r\n              data={dataToRender()}\r\n              subHeaderComponent={\r\n                <CustomHeader\r\n                  store={store}\r\n                  searchTerm={searchTerm}\r\n                  rowsPerPage={rowsPerPage}\r\n                  handleFilter={handleFilter}\r\n                  handlePerPage={handlePerPage}\r\n                  handleAddEdit={handleAddEdit}\r\n                  selectedRow={selectedRows}\r\n                  handleDeleteSelected={handleDeleteSelected}\r\n                  handleFiltersChange={handleFiltersChange}\r\n                  filtersCustomAdd={filtersCustomAdd}\r\n                />\r\n              }\r\n            />\r\n          </div>\r\n        </Card>\r\n\r\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\r\n      </UILoader>\r\n\r\n      {showModal && (\r\n        <ModalAddEdit\r\n          formState={formState}\r\n          show={showModal}\r\n          setShow={toggleSidebar}\r\n          detailPage={detailPage}\r\n          setFormState={setFormState}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n","export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n"],"sourceRoot":""}