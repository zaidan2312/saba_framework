{"version":3,"sources":["@core/components/sidebar/index.js","views/apps/user/Sidebar.js","@core/components/input-password-toggle/index.js"],"names":["Sidebar","props","open","size","title","width","children","closeBtn","className","toggleSidebar","bodyClassName","contentClassName","wrapperClassName","headerClassName","rest","renderCloseBtn","onClick","isOpen","toggle","classnames","modalClassName","undefined","style","String","close","tag","options","wheelPropagation","defaultValues","email","password","phone","member_of","id_role","name","username","SidebarNewUsers","t","useTranslation","colors","useContext","ThemeColors","useState","setData","idRole","setIdRole","idUnit","setIdUnit","storeRole","useSelector","state","users","roles","storeUnit","units","dispatch","useDispatch","useForm","control","setValue","setError","handleSubmit","errors","formState","useEffect","selectedUnit","data","map","item","value","id","label","length","onClosed","key","onSubmit","Object","values","every","field","checkIsValid","addUser","avatar","status","then","res","meta","requestStatus","toast","success","padding","color","main","border","iconTheme","primary","message","payload","error_reason","error","danger","type","for","defaultValue","rules","required","pattern","render","placeholder","invalid","minLength","maxLength","isClearable","theme","selectThemeColors","closeMenuOnSelect","onChange","isMulti","classNamePrefix","vaue","outline","InputPasswordToggle","forwardRef","ref","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","inputVisibility","setInputVisibility","renderIcon","defaultProps"],"mappings":"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","file":"static/js/167.628de958.chunk.js","sourcesContent":["// ** Third Party Components\nimport { X } from \"react-feather\"\nimport Proptypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\n\nimport { Modal, ModalHeader, ModalBody } from \"reactstrap\"\n\nconst Sidebar = (props) => {\n  // ** Props\n  const {\n    open,\n    size,\n    title,\n    width,\n    children,\n    closeBtn,\n    className,\n    toggleSidebar,\n    bodyClassName,\n    contentClassName,\n    wrapperClassName,\n    headerClassName,\n    ...rest\n  } = props\n\n  // ** If user passes custom close btn render that else default close btn\n  const renderCloseBtn = closeBtn ? (\n    closeBtn\n  ) : (\n    <X className=\"cursor-pointer\" size={15} onClick={toggleSidebar} />\n  )\n\n  return (\n    <Modal\n      isOpen={open}\n      toggle={toggleSidebar}\n      contentClassName={classnames(\"overflow-hidden\", {\n        [contentClassName]: contentClassName\n      })}\n      modalClassName={classnames(\"modal-slide-in\", {\n        [wrapperClassName]: wrapperClassName\n      })}\n      className={classnames({\n        [className]: className,\n        \"sidebar-lg\": size === \"lg\",\n        \"sidebar-sm\": size === \"sm\"\n      })}\n      /*eslint-disable */\n      {...(width !== undefined\n        ? {\n            style: { width: String(width) + \"px\" },\n          }\n        : {})}\n      /*eslint-enable */\n      {...rest}\n    >\n      <ModalHeader\n        className={classnames({\n          [headerClassName]: headerClassName\n        })}\n        toggle={toggleSidebar}\n        close={renderCloseBtn}\n        tag=\"div\"\n      >\n        <h5 className=\"modal-title\">\n          <span className=\"align-middle\">{title}</span>\n        </h5>\n      </ModalHeader>\n      <PerfectScrollbar options={{ wheelPropagation: false }}>\n        <ModalBody\n          className={classnames(\"flex-grow-1\", {\n            [bodyClassName]: bodyClassName\n          })}\n        >\n          {children}\n        </ModalBody>\n      </PerfectScrollbar>\n    </Modal>\n  )\n}\n\nexport default Sidebar\n\n// ** PropTypes\nSidebar.propTypes = {\n  className: Proptypes.string,\n  bodyClassName: Proptypes.string,\n  open: Proptypes.bool.isRequired,\n  title: Proptypes.string.isRequired,\n  contentClassName: Proptypes.string,\n  wrapperClassName: Proptypes.string,\n  children: Proptypes.any.isRequired,\n  size: Proptypes.oneOf([\"sm\", \"lg\"]),\n  toggleSidebar: Proptypes.func.isRequired,\n  width: Proptypes.oneOfType([Proptypes.number, Proptypes.string])\n}\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n// ** React Import\nimport { useState, useContext, useEffect } from \"react\"\nimport Sidebar from \"@components/sidebar\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport classnames from \"classnames\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { Button, Label, FormText, Form, Input } from \"reactstrap\"\nimport store, { addUser } from \"@src/views/apps/user/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport toast from \"react-hot-toast\"\nimport { useTranslation } from \"react-i18next\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport InputPasswordToggle from \"@components/input-password-toggle\"\nconst defaultValues = {\n  email: \"\",\n  password: \"\",\n  phone: \"\",\n  member_of: \"\",\n  id_role: \"\",\n  name: \"\",\n  username: \"\"\n}\n\nconst checkIsValid = (data) => {\n  return Object.values(data).every((field) =>\n    typeof field === \"object\" || field !== \"member_of\"\n      ? field !== null && field !== \"\"\n      : field.length > 0\n  )\n}\n\nconst SidebarNewUsers = ({ open, toggleSidebar }) => {\n  // ** Hooks\n  const { t } = useTranslation()\n\n  // ** Theme Colors\n  const { colors } = useContext(ThemeColors)\n\n  // ** States\n  const [data, setData] = useState({})\n  const [idRole, setIdRole] = useState(3)\n  const [idUnit, setIdUnit] = useState([])\n  const store = useSelector((state) => state.users)\n  const storeRole = useSelector((state) => state.roles)\n  const storeUnit = useSelector((state) => state.units)\n  // ** Store Vars\n  const dispatch = useDispatch()\n\n  // ** Vars\n  const {\n    control,\n    setValue,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n\n  // ** Function to handle form submit\n  const onSubmit = (data) => {\n    // console.log(data)\n    data[\"member_of\"] = idUnit !== null ? idUnit.map((item) => item.value) : []\n    data[\"id_role\"] = idRole !== null ? idRole : null\n    setData(data)\n    // console.log(data)\n    if (checkIsValid(data)) {\n      dispatch(\n        addUser({\n          id_role: data?.id_role,\n          avatar: \"\",\n          status: 1,\n          email: data.email,\n          member_of: data?.member_of,\n          phone: data.phone,\n          name: data.name,\n          username: data.username,\n          password: data.password\n        })\n      ).then((res) => {\n        if (res.meta.requestStatus === \"fulfilled\") {\n          toggleSidebar()\n          toast.success(`${t(\"Successfully Create Data\")}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          // console.log(store.errorAddEdit)\n          let message = \"\"\n          if (res.payload.errors) {\n            message = Object.values(res.payload.errors)\n          } else if (res.payload.error_reason) {\n            message = res.payload.message\n          }\n          toast.error(`${t(message)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key].length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  const handleSidebarClosed = () => {\n    for (const key in defaultValues) {\n      setValue(key, \"\")\n    }\n    // setRole(null)\n  }\n\n  useEffect(() => {\n    const selectedUnit = storeUnit.data.map((item) => ({\n      value: item.id,\n      label: item.name\n    }))\n    // console.log(selectedUnit[0])\n    setIdUnit([selectedUnit[0]])\n  }, [dispatch, storeUnit.data.length])\n\n  return (\n    <Sidebar\n      size=\"lg\"\n      open={open}\n      title={t(\"New User\")}\n      headerClassName=\"mb-1\"\n      contentClassName=\"pt-0\"\n      toggleSidebar={toggleSidebar}\n      onClosed={handleSidebarClosed}\n    >\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"name\">\n            {t(\"Full Name\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue=\"\"\n            control={control}\n            rules={{\n              required: true,\n              pattern: {\n                value: /^[a-zA-Z\\s]*$/,\n                message: t(\"Invalid name, you can only use letters\")\n              }\n            }}\n            id=\"name\"\n            name=\"name\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                id=\"name\"\n                placeholder=\"John\"\n                invalid={errors.name && true}\n              />\n            )}\n          />\n          {errors.name && (\n            <FormText color=\"danger\">{t(errors.name.message)}</FormText>\n          )}\n        </div>\n\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"email\">\n            {t(\"Email\")} <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            name=\"email\"\n            control={control}\n            rules={{\n              required: {\n                value: true,\n                message: t(\"You need to specify a valid email address\")\n              },\n              pattern: {\n                value: /^\\S+@\\S+$/i,\n                message: t(\"Not valid email adreess.\")\n              }\n            }}\n            render={({ field }) => (\n              <Input\n                type=\"email\"\n                id=\"email\"\n                placeholder=\"john.doe@example.com\"\n                invalid={errors.email && true}\n                {...field}\n              />\n            )}\n          />\n          <FormText color=\"muted\">\n            {t(\"You can use letters, numbers & periods\")}\n          </FormText>\n        </div>\n\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"username\">\n            {t(\"Username\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue=\"\"\n            control={control}\n            rules={{\n              required: true,\n              minLength: {\n                value: 4,\n                message: t(\"minimum number of character is 4\")\n              },\n              maxLength: {\n                value: 15,\n                message: t(\"maximum number of character is 15\")\n              },\n              pattern: {\n                value:\n                  /^[a-zA-Z0-9]+([a-zA-Z0-9](_|-| )[a-zA-Z0-9])*[a-zA-Z0-9]+$/,\n                message: t(\n                  \"You can use letters and numbers without white space\"\n                )\n              }\n            }}\n            id=\"username\"\n            name=\"username\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                id=\"username\"\n                placeholder=\"john.doe.007\"\n                invalid={errors.username && true}\n              />\n            )}\n          />\n          {errors.username && (\n            <FormText color=\"danger\">{t(errors.username.message)}</FormText>\n          )}\n        </div>\n\n        <div className=\"mb-1\">\n          <div className=\"d-flex justify-content-between\">\n            <Label className=\"form-label\" for=\"login-password\">\n              {t(\"Password\")} <span className=\"text-danger\">*</span>\n            </Label>\n          </div>\n          <Controller\n            defaultValue=\"\"\n            id=\"password\"\n            name=\"password\"\n            control={control}\n            rules={{\n              required: {\n                value: true,\n                message: t(\"Password is required\")\n              },\n              minLength: {\n                value: 8,\n                message: t(\"Password must have at least 8 characters\")\n              }\n            }}\n            render={({ field }) => (\n              <InputPasswordToggle\n                className=\"input-group-merge\"\n                invalid={errors.password && true}\n                {...field}\n              />\n            )}\n          />\n          {errors.password && (\n            <FormText color=\"danger\">{t(errors.password.message)}</FormText>\n          )}\n        </div>\n\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"phone\">\n            {t(\"Mobile Phone Number\")}\n          </Label>\n          <Controller\n            defaultValue=\"\"\n            control={control}\n            rules={{\n              required: false,\n              pattern: {\n                value: /^[0-9+-]+$/,\n                message: \"This is not a valid mobile phone, try again!\"\n              },\n              minLength: {\n                value: 6,\n                message: \"This number is too short.\"\n              },\n              maxLength: {\n                value: 14,\n                message: \"...And now it's too long.\"\n              }\n            }}\n            id=\"phone\"\n            name=\"phone\"\n            render={({ field }) => (\n              <Input {...field} id=\"phone\" placeholder=\"+62 813 940 10XX X\" />\n            )}\n          />\n          {errors.phone && (\n            <FormText color=\"danger\">{t(errors.phone.message)}</FormText>\n          )}\n        </div>\n        <div className=\"mb-1\">\n          <Label className=\"form-label\" for=\"id_unit\">\n            {t(\"Unit\")}\n          </Label>\n          <Select\n            id=\"id_unit\"\n            isClearable={false}\n            theme={selectThemeColors}\n            closeMenuOnSelect={false}\n            // defaultValue={null}\n            onChange={(data) => {\n              setIdUnit(data)\n            }}\n            defaultValue={\n              storeUnit.data.map((item) => ({\n                value: item.id,\n                label: item.name\n              }))[0]\n            }\n            isMulti\n            options={storeUnit.data.map((item) => ({\n              value: item.id,\n              label: item.name\n            }))}\n            className=\"react-select\"\n            classNamePrefix=\"select\"\n          />\n        </div>\n        <div className=\"mb-1\">\n          <Label for=\"role-select\">{t(\"Role\")}</Label>\n          <Select\n            id=\"id_role\"\n            isClearable={false}\n            options={storeRole.data.map((item) => ({\n              value: item.id,\n              label: item.name\n            }))}\n            defaultValue={{\n              label: \"editor\",\n              vaue: 3\n            }}\n            classNamePrefix=\"select\"\n            className={classnames(\"react-select\", {\n              \"is-invalid\": idRole === null\n            })}\n            theme={selectThemeColors}\n            onChange={(data) => {\n              // console.log(data.value)\n              setIdRole(data.value)\n            }}\n          />\n        </div>\n\n        <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n          {t(\"Submit\")}\n        </Button>\n        <Button type=\"reset\" color=\"secondary\" outline onClick={toggleSidebar}>\n          {t(\"Cancel\")}\n        </Button>\n      </Form>\n    </Sidebar>\n  )\n}\n\nexport default SidebarNewUsers\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from \"react\"\n\n// ** Third Party Components\nimport PropTypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport { Eye, EyeOff } from \"react-feather\"\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from \"reactstrap\"\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className=\"form-label\" for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          \"is-invalid\": invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? \"password\" : \"text\"}\n          placeholder={placeholder ? placeholder : \"············\"}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor,\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText\n          className=\"cursor-pointer\"\n          onClick={() => setInputVisibility(!inputVisibility)}\n        >\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props[\"htmlFor\"] === \"undefined\") {\n      throw new Error(\"htmlFor prop is required when label prop is present\")\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props[\"label\"] === \"undefined\") {\n      throw new Error(\"label prop is required when htmlFor prop is present\")\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}