{"version":3,"sources":["views/apps/unit_app/modal/index.js","@core/components/ui-loader/index.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","storeApp","apps_app","storeUnit","units","useState","selectedData","colors","useContext","ThemeColors","setLoadingText","idApp","setIdApp","unitOptions","setUnitOptions","unitOptionsSelected","setUnitOptionsSelected","useForm","control","setError","handleSubmit","errors","handleReset","resetSelectedData","useEffect","data","length","isLoading","getDataListApp","dataDropdown","filter","el","value","id_app","x","id_unit","isOpen","toggle","className","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","onSubmit","storeData","sortedObject","key","JSON","stringify","countChanges","Object","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","type","icon","postData","md","xs","for","defaultValue","domain","name","render","invalid","theme","selectThemeColors","onChange","options","classnames","classNamePrefix","isClearable","closeMenuOnSelect","e","console","log","description","outline","onClick","UILoader","props","children","tag","overlayColor","Tag","backgroundColor","defaultProps"],"mappings":"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","file":"static/js/56.9a4b4cd0.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors, sortedObject } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"../store\"\nimport { getDataList as getDataListApp } from \"../../app/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport classnames from \"classnames\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const storeApp = useSelector((state) => state.apps_app)\n  const storeUnit = useSelector((state) => state.units)\n  const [selectedData, setSelectedData] = useState(store.selectedData)\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [idApp, setIdApp] = useState(null)\n  const [unitOptions, setUnitOptions] = useState([])\n  const [unitOptionsSelected, setUnitOptionsSelected] = useState({})\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(store.selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = (data) => {\n    data[\"id_unit\"] = unitOptionsSelected.value\n    data[\"id_app\"] = idApp.value\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = (data) => {\n    if (\n      Object.values(data).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      // console.log(unitOptionsSelected)\n      data[\"id_unit\"] = unitOptionsSelected\n      data[\"id_app\"] = idApp\n      delete data[\"description\"]\n      // console.log(data)\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(data)).then((res) => {\n        //\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n          if (detailPage) {\n            dispatch(getDataById(id))\n          }\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  const handleChangeUnit = (e) => {\n    console.log(e)\n    setUnitOptionsSelected(e.value)\n    // setUnitOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\n  }\n\n  useEffect(() => {\n    if (storeApp.data.length === 0 || !storeApp.isLoading) {\n      dispatch(getDataListApp({}))\n    }\n\n    setIdApp(\n      storeApp.dataDropdown.filter(\n        (el) => el.value === store.selectedData?.id_app\n      )\n    )\n    const unitOptions = storeUnit.dataDropdown.filter((x) => x.value !== \"\")\n    setUnitOptions(unitOptions)\n    setUnitOptionsSelected(\n      unitOptions.filter((el) => el.value === store.selectedData?.id_unit)\n    )\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"domain\">\n                  {t(\"Domain Address\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.domain ?? \"\"}\n                  control={control}\n                  id=\"domain\"\n                  name=\"domain\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.domain\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"domain\"\n                      invalid={errors.domain && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"id_app\">\n                  {t(\"App\")}\n                </Label>\n                <Select\n                  id=\"id_app\"\n                  theme={selectThemeColors}\n                  defaultValue={storeApp.dataDropdown.filter(\n                    (el) => el.value === selectedData?.id_app\n                  )}\n                  onChange={(data) => {\n                    setIdApp(data.value)\n                  }}\n                  options={storeApp.dataDropdown}\n                  className={classnames(\"react-select\", {\n                    \"is-invalid\": idApp === null\n                  })}\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"id_unit\">\n                  {t(\"Unit\")}\n                </Label>\n                <Select\n                  id=\"id_unit\"\n                  isClearable={false}\n                  theme={selectThemeColors}\n                  closeMenuOnSelect={true}\n                  defaultValue={storeUnit.dataDropdown.filter(\n                    (el) => el.value === selectedData?.id_unit\n                  )}\n                  onChange={(data) => {\n                    handleChangeUnit(data)\n                  }}\n                  options={unitOptions}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"description\">\n                  {t(\"Description\")}\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.description ?? \"\"}\n                  control={control}\n                  id=\"description\"\n                  name=\"description\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.domain\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      type=\"textarea\"\n                      id=\"description\"\n                      invalid={errors.description && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n","// ** React Imports\nimport { Fragment } from \"react\"\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\"\nimport classnames from \"classnames\"\n\n// ** Reactstrap Imports\nimport { Spinner } from \"reactstrap\"\n\n// ** Styles\nimport \"./ui-loader.scss\"\n\nconst UILoader = (props) => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag\n      className={classnames(\"ui-loader\", {\n        [className]: className,\n        show: blocking\n      })}\n    >\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className=\"overlay\" /*eslint-disable */\n            {...(blocking && overlayColor\n              ? { style: { backgroundColor: overlayColor } }\n              : {})}\n            /*eslint-enable */\n          ></div>\n          <div className=\"loader\">{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: \"div\",\n  blocking: false,\n  loader: <Spinner color=\"primary\" />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n"],"sourceRoot":""}