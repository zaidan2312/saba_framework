{"version":3,"sources":["views/apps/menu/icons/material.js"],"names":["FeatherIcons","setIcon","setCanvasOpen","IconsArr","IconsComponentsArr","useState","query","setQuery","setFilteredArr","filteredComponentsArr","setFilteredComponentsArr","active","setActive","setLoadingText","t","useTranslation","handleIconCardClick","icon","key","customName","replace","split","join","toLowerCase","substring","store","useSelector","state","dispatch","useDispatch","useEffect","console","log","data","material","length","includes","push","IconTag","Icons","id","className","classnames","onClick","placement","target","trim","setIconsComponents","sm","placeholder","onChange","e","val","arr","arrComponents","filter","handleFilter","value","style","justifyContent"],"mappings":"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","file":"static/js/64.cfefef89.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, useEffect } from \"react\"\r\n\r\n// ** Third Party Components\r\nimport classnames from \"classnames\"\r\n// import * as Icons from \"react-feather\"\r\nimport * as Icons from \"@mui/icons-material\"\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Input,\r\n  CardBody,\r\n  InputGroup,\r\n  InputGroupText,\r\n  UncontrolledTooltip\r\n} from \"reactstrap\"\r\n\r\n// ** Styles\r\nimport \"@styles/base/pages/ui-feather.scss\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { setIconsComponents } from \"../../../../redux/icons\"\r\nimport { useTranslation } from \"react-i18next\"\r\n\r\nconst FeatherIcons = ({ setIcon, setCanvasOpen }) => {\r\n  const IconsArr = []\r\n  const IconsComponentsArr = []\r\n  // ** States\r\n  const [query, setQuery] = useState([]),\r\n    [filteredArr, setFilteredArr] = useState([]),\r\n    [filteredComponentsArr, setFilteredComponentsArr] = useState([]),\r\n    [active, setActive] = useState(null)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const { t } = useTranslation()\r\n\r\n  const handleFilter = (val) => {\r\n    const arr = []\r\n    const arrComponents = []\r\n    if (val.length) {\r\n      IconsArr.filter((icon) => {\r\n        if (icon.toLowerCase().includes(val.toLowerCase())) {\r\n          arr.push(icon)\r\n\r\n          const IconTag = Icons[icon]\r\n          arrComponents.push(\r\n            <Fragment key={icon}>\r\n              <Card\r\n                id={icon}\r\n                className={classnames(\r\n                  \"icon-card cursor-pointer text-center mb-2 mx-50\",\r\n                  {\r\n                    active: active === icon\r\n                  }\r\n                )}\r\n                onClick={() => handleIconCardClick(icon)}\r\n              >\r\n                <CardBody>\r\n                  <div className=\"icon-wrapper\">\r\n                    <IconTag />\r\n                  </div>\r\n                  <p className=\"icon-name text-truncate mb-0 mt-1\">{icon}</p>\r\n                </CardBody>\r\n              </Card>\r\n              <UncontrolledTooltip placement=\"top\" target={icon}>\r\n                {icon.replace(/([A-Z])/g, \" $1\").trim()}\r\n              </UncontrolledTooltip>\r\n            </Fragment>\r\n          )\r\n        }\r\n      })\r\n    }\r\n    setFilteredArr([...arr])\r\n    setFilteredComponentsArr([...arrComponents])\r\n  }\r\n\r\n  function camelToUnderscore(key) {\r\n    let result = key.replace(/([A-Z])/g, \" $1\")\r\n    return result.split(\" \").join(\"_\").toLowerCase()\r\n  }\r\n\r\n  const handleIconCardClick = (icon) => {\r\n    // console.log(icon)\r\n    const customName = `material:${camelToUnderscore(icon).substring(1)}`\r\n    setIcon(customName)\r\n    setActive(icon)\r\n    setCanvasOpen(false)\r\n  }\r\n\r\n  const renderIcons = () => {\r\n    // console.log(IconsArr)\r\n    const dataToRender = query.length ? filteredArr : IconsArr\r\n    const componentsToRender = query.length\r\n      ? filteredComponentsArr\r\n      : IconsComponentsArr\r\n    if (dataToRender.length) {\r\n      // return dataToRender.map((icon) => {\r\n      //   const IconTag = Icons[icon]\r\n      //   return (\r\n      //     <Fragment key={icon}>\r\n      //       <Card\r\n      //         id={icon}\r\n      //         className={classnames(\r\n      //           \"icon-card cursor-pointer text-center mb-2 mx-50\",\r\n      //           {\r\n      //             active: active === icon\r\n      //           }\r\n      //         )}\r\n      //         onClick={() => handleIconCardClick(icon)}\r\n      //       >\r\n      //         <CardBody>\r\n      //           <div className=\"icon-wrapper\">\r\n      //             <IconTag />\r\n      //           </div>\r\n      //           <p className=\"icon-name text-truncate mb-0 mt-1\">{icon}</p>\r\n      //         </CardBody>\r\n      //       </Card>\r\n      //       <UncontrolledTooltip placement=\"top\" target={icon}>\r\n      //         {icon.replace(/([A-Z])/g, \" $1\").trim()}\r\n      //       </UncontrolledTooltip>\r\n      //     </Fragment>\r\n      //   )\r\n      // })\r\n      return componentsToRender\r\n    } else {\r\n      return (\r\n        <div className=\"d-flex align-items-center justify-content-center w-100\">\r\n          <h4 className=\"mb-0\">{t(\"No Icons Found!\")}</h4>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const store = useSelector((state) => state[\"icons_store\"])\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    console.log(store.data.material.length)\r\n    if (store.data.material.length === 0) {\r\n      // console.log(store.data.material)\r\n      setLoadingText(`${t(\"Loading Data\")} ${t(\"Icons\")}`)\r\n\r\n      for (const key in Icons) {\r\n        if (key.includes(\"Outlined\")) {\r\n          IconsArr.push(key)\r\n\r\n          const IconTag = Icons[key]\r\n          IconsComponentsArr.push(\r\n            <Fragment key={key}>\r\n              <Card\r\n                id={key}\r\n                className={classnames(\r\n                  \"icon-card cursor-pointer text-center mb-2 mx-50\",\r\n                  {\r\n                    active: active === key\r\n                  }\r\n                )}\r\n                onClick={() => handleIconCardClick(key)}\r\n              >\r\n                <CardBody>\r\n                  <div className=\"icon-wrapper\">\r\n                    <IconTag />\r\n                  </div>\r\n                  <p className=\"icon-name text-truncate mb-0 mt-1\">{key}</p>\r\n                </CardBody>\r\n              </Card>\r\n              <UncontrolledTooltip placement=\"top\" target={key}>\r\n                {key.replace(/([A-Z])/g, \" $1\").trim()}\r\n              </UncontrolledTooltip>\r\n            </Fragment>\r\n          )\r\n        }\r\n      }\r\n      dispatch(setIconsComponents({ material: IconsComponentsArr }))\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col sm=\"12\">\r\n          <div className=\"icon-search-wrapper mt-0 mb-2 mx-auto\">\r\n            <InputGroup className=\"input-group-merge mb-1\">\r\n              <InputGroupText>\r\n                {/* <Icons.Search size={14} /> */}\r\n              </InputGroupText>\r\n              <Input\r\n                placeholder={t(\"Search icons...\")}\r\n                onChange={(e) => {\r\n                  handleFilter(e.target.value)\r\n                  setQuery(e.target.value)\r\n                }}\r\n              />\r\n            </InputGroup>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <div\r\n        className=\"d-flex flex-wrap\"\r\n        style={{\r\n          justifyContent: \"center\"\r\n        }}\r\n        id=\"icons-container\"\r\n      >\r\n        {query.length ? filteredComponentsArr : store.data.material}\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default FeatherIcons\r\n"],"sourceRoot":""}