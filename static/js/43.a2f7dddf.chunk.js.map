{"version":3,"sources":["views/apps/endpoint/modal/index.js","views/apps/endpoint/index.js","views/apps/endpoint/Table.js","views/apps/endpoint/Tree.js","views/apps/endpoint/DropDown.js","@core/components/widgets/stats/StatsHorizontal.js","@core/components/breadcrumbs/index.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","currentData","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","useState","loadingText","setLoadingText","allStore","dynamicComponents","setDynamicComponents","formDatas","formDatasError","setFormDatasError","useForm","setError","control","handleSubmit","Loader","errors","className","handleReset","resetSelectedData","handleChangeInputs","value","fieldName","isMulti","index","indexOf","splice","push","useEffect","componentsImport","dynamicFormRelation","dynamicForm","i","fieldLabel","path_name","replaceAll","MyComponent","lazy","for","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","data","map","x","selectedData","lookupMode_isM2MDefValFromGrid","defaultValue","onChange","e","target","length","isOpen","toggle","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","title","onSubmit","storeData","sortedObject","key","JSON","stringify","countChanges","Object","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","type","icon","postData","errorFields","assign","item","includes","md","xs","fallback","textAlign","outline","onClick","List","searchTerm","getApiSummaryData","dataSummary","isLoadingSummary","getAlwaysGrid","getSummaryData","statTitle","baseClassName","fontSize","renderStats","sx","bgcolor","animation","height","width","count_format","count","isTreeLayout","searchString","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","CustomHeader","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","selectedRow","handleDeleteSelected","handleFiltersChange","filtersCustomAdd","ability","AbilityContext","dynamicFilterComponents","setDynamicFilterComponents","dynamicFilterDatas","invoices","getUserData","dynamicColumnsFilter","xl","htmlFor","can","sessionStorage","getItem","storeApp","apps_app","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","selectedRows","setSelectedRows","filtersCustom","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","showModal","setShowModal","handleEdit","rowData","detailFromGrid","setDataById","isLoading","getDataListApp","handleCloseModal","revivalBack","neutralizeBack","handleDelete","a","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","countSelectedCopy","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","s","columns","dynamicColumns","column","name","columnName","sortField","center","sortable","minWidth","selector","row","cell","dataFormat","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","app_logo","img","imgHeight","imgWidth","initials","content","app_name","disabledAction","tableColumns","useMemo","dark","light","removeDefaultValue","dataTree","parse","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","keys","some","k","Array","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","par_name","currentDataAdd","setCurrentDataAdd","searchFocusIndex","setSearchFocusIndex","setSearchFoundCount","handleChange","tree","setDataList","updateDataToApi","notReload","nameMsg","mainArray","forEach","iter","isArray","children","margin","treeData","onMoveNode","node","nextParentNode","prevPath","prevTreeIndex","nextPath","nextTreeIndex","parent_id","is_app_header","canDrag","args","searchMethod","searchQuery","toLowerCase","searchFocusOffset","searchFinishCallback","matches","maxDepth","generateNodeProps","path","fontWeight","paddingLeft","buttons","Ripple","size","placement","preventDefault","hidden","disabled","defaultChecked","checked","handleChangeLookupMode","theme","selectThemeColors","dataDropdown","filter","el","options","classnames","classNamePrefix","StatsHorizontal","cardColor","stats","countTextColor","countTextStyle","titleStyle","statsMargin","solidColor","cardStyle","titleOnTop","cardColorFix","inverse","BreadCrumbs","mb","subtitle","tag","to","Wrapper","link","Link","Fragment","isLastItem","active"],"mappings":"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","file":"static/js/43.a2f7dddf.chunk.js","sourcesContent":["/* eslint-disable brace-style */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  lazy,\n  Suspense\n} from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors, sortedObject } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById,\n  dynamicForm\n} from \"../store\"\n\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState,\n  currentData = null\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const allStore = useSelector((state) => state)\n  const [dynamicComponents, setDynamicComponents] = useState({})\n  const [formDatas, setFormDatas] = useState({})\n  const [formDatasError, setFormDatasError] = useState({})\n\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n        <CardText className=\"mb-0 mt-1\">{t(loadingText)}...</CardText>\n      </Fragment>\n    )\n  }\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(allStore[storeName].selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = () => {\n    if (countChanges(formDatas)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = () => {\n    if (\n      Object.values(formDatas).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(formDatas)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n          if (detailPage) {\n            dispatch(getDataById(id))\n          }\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      // console.log(\"ERORR\")\n      // console.log(formDatas)\n      let errorFields = Object.assign({}, formDatasError)\n      for (let key in formDatas) {\n        // console.log(key, formDatas[key])\n        if (formDatas[key] === null || formDatas[key]?.length === 0) {\n          errorFields[key] = true\n        }\n      }\n      // console.log(errorFields)\n      setFormDatasError(errorFields)\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\n    // console.log(value, fieldName, isMulti)\n    if (isMulti) {\n      if (formDatas[fieldName]) {\n        const index = formDatas[fieldName].indexOf(value)\n        if (index !== -1) {\n          formDatas[fieldName].splice(index, 1)\n        } else {\n          formDatas[fieldName].push(value)\n        }\n      } else {\n        formDatas[fieldName] = [value]\n      }\n    } else {\n      formDatas[fieldName] = value\n    }\n    // formDatasError[fieldName] = false\n    setFormDatasError({ ...formDatasError, [fieldName]: false })\n  }\n\n  useEffect(() => {\n    // DYNAMIC IMPORT COMPONENTS\n    let componentsImport = {}\n    // const dynamicFormRelation = dynamicForm.filter(function (el) {\n    //   return el.type === \"dropdown\" || el.type === \"table\"\n    // })\n\n    const dynamicFormRelation = dynamicForm\n    for (let i = 0; i < dynamicFormRelation.length; i++) {\n      const fieldName = dynamicFormRelation[i][\"fieldName\"]\n      const fieldLabel = dynamicFormRelation[i][\"fieldLabel\"]\n      const path_name = dynamicFormRelation[i][\"fieldName\"].replaceAll(\n        \"id_\",\n        \"\"\n      )\n\n      formDatas[fieldName] = null\n      formDatasError[fieldName] = false\n\n      ////////////INPUT - DROPDOWN\n      if (\n        dynamicFormRelation[i][\"type\"] === \"dropdown\" ||\n        dynamicFormRelation[i][\"type\"] === \"table\"\n      ) {\n        const MyComponent = lazy(() => import(`../../${path_name}`))\n        componentsImport[`${path_name}_comp`] = (\n          <Fragment>\n            <Label className=\"form-label\" for={fieldName}>\n              {t(fieldLabel ?? \"\")}\n            </Label>\n            <MyComponent\n              key={`dynInput_${fieldName}`}\n              lookupMode={true}\n              lookupMode_fieldName={fieldName}\n              lookupMode_dropdown={\n                dynamicFormRelation[i][\"type\"] === \"dropdown\"\n              }\n              lookupMode_isMulti={\n                dynamicFormRelation[i].isMultiSelection ?? false\n              }\n              lookupMode_onChange={handleChangeInputs}\n              lookupMode_defaultValue={\n                dynamicFormRelation[i]?.isM2MDefValFromGrid\n                  ? allStore[storeName].data.map((x) => x[fieldName])\n                  : allStore[storeName]?.selectedData\n                  ? allStore[storeName].selectedData[fieldName]\n                  : \"\"\n              }\n              lookupMode_isM2MDefValFromGrid={\n                dynamicFormRelation[i]?.isM2MDefValFromGrid ?? false\n              }\n            />\n          </Fragment>\n        )\n      }\n\n      ////////////INPUT - TEXT\n      else {\n        componentsImport[`${path_name}_comp`] = (\n          <Fragment>\n            <Label className=\"form-label\" for={fieldName}>\n              {t(fieldLabel ?? \"\")}\n            </Label>\n            <Input\n              key={`dynInput_${fieldName}`}\n              defaultValue={\n                dynamicFormRelation[i]?.isM2MDefValFromGrid\n                  ? allStore[storeName].data.map((x) => x[fieldName])\n                  : allStore[storeName]?.selectedData\n                  ? allStore[storeName].selectedData[fieldName]\n                  : \"\"\n              }\n              onChange={(e) =>\n                handleChangeInputs(\n                  e.target.value,\n                  fieldName,\n                  dynamicFormRelation[i].isMultiSelection ?? false\n                )\n              }\n              // className={\n              //   !formDatasError[fieldName]\n              //     ? \"form-control is-invalid\"\n              //     : \"form-control\"\n              // }\n              id={`dynInput_${fieldName}`}\n            />\n          </Fragment>\n        )\n      }\n    }\n\n    setDynamicComponents(componentsImport)\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add Sub\")} {t(pageTitle)}\n            </h2>\n            <p className=\"mb-1\">\n              {t(\"Child for \")} {currentData ? t(currentData.title) : \"\"}\n            </p>\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              {dynamicForm.map((item, index) => {\n                const path_name = item.fieldName.replaceAll(\"id_\", \"\")\n                if ([\"dropdown\", \"table\"].includes(item.type)) {\n                  if (item.type === \"table\") {\n                    return (\n                      <Col key={path_name} md={12} xs={12}>\n                        <Suspense fallback={<div>Loading...</div>}>\n                          <div\n                            className={\n                              !formDatasError[item.fieldName]\n                                ? \"dynamicForm_input\"\n                                : \"dynamicForm_input dynamicForm_input_invalid\"\n                            }\n                          >\n                            {dynamicComponents[`${path_name}_comp`]}\n                            {item?.isM2MDefValFromGrid &&\n                              formDatas[item.fieldName] && (\n                                <div\n                                  style={{ textAlign: \"right\" }}\n                                  className=\"text-primary\"\n                                >\n                                  {formDatas[item.fieldName]?.length}{\" \"}\n                                  {t(item.fieldLabel)} {t(\"Selected\")}\n                                </div>\n                              )}\n                          </div>\n                        </Suspense>\n                      </Col>\n                    )\n                  } else {\n                    return (\n                      <Col key={path_name} md={12} xs={12}>\n                        <Suspense fallback={<div>Loading...</div>}>\n                          <div\n                            className={\n                              !formDatasError[item.fieldName]\n                                ? \"\"\n                                : \"dynamicForm_input_invalid\"\n                            }\n                          >\n                            {dynamicComponents[`${path_name}_comp`]}\n                            {item?.isM2MDefValFromGrid &&\n                              formDatas[item.fieldName] && (\n                                <div\n                                  style={{ textAlign: \"right\" }}\n                                  className=\"text-primary\"\n                                >\n                                  {formDatas[item.fieldName]?.length}{\" \"}\n                                  {t(item.fieldLabel)} {t(\"Selected\")}\n                                </div>\n                              )}\n                          </div>\n                        </Suspense>\n                      </Col>\n                    )\n                  }\n                } else {\n                  return (\n                    <Col key={path_name} md={12} xs={12}>\n                      <div\n                        className={\n                          !formDatasError[item.fieldName]\n                            ? \"\"\n                            : \"dynamicForm_input_invalid\"\n                        }\n                      >\n                        {dynamicComponents[`${path_name}_comp`]}\n                      </div>\n                    </Col>\n                  )\n                }\n              })}\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n","import { Fragment, useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport Table from \"./Table\"\nimport Tree from \"./Tree\"\nimport DropDown from \"./DropDown\"\nimport { Row, Col, Input } from \"reactstrap\"\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\nimport Icon from \"@mui/material/Icon\"\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\nimport \"./style.scss\"\nimport Breadcrumbs from \"@components/breadcrumbs\"\n\nimport {\n  storeName,\n  getAlwaysGrid,\n  getApiSummaryData,\n  getSummaryData,\n  pageTitle,\n  isTreeLayout\n} from \"./store\"\nimport { Skeleton } from \"@mui/material\"\n\nconst List = ({\n  lookupMode = false,\n  lookupMode_fieldName = \"\",\n  lookupMode_dropdown = false,\n  lookupMode_isMulti = false,\n  lookupMode_onChange,\n  lookupMode_defaultValue,\n  lookupMode_isM2MDefValFromGrid\n}) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  const handleFilter = (event) => {\n    // console.log(\"handleFilter\")\n    setSearchTerm(event)\n    // debounceFn(event)\n  }\n\n  useEffect(() => {\n    if (\n      getApiSummaryData &&\n      (store.dataSummary?.length === 0 ||\n        (!store.isLoadingSummary && getAlwaysGrid))\n    ) {\n      dispatch(getSummaryData({}))\n    }\n  }, [dispatch, store.dataSummary?.length])\n\n  const colors = [\n    \"primary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"info\",\n    \"secondary\"\n  ]\n\n  return !lookupMode_dropdown ? (\n    <Fragment>\n      <div className=\"content-header row\">\n        {!lookupMode && (\n          <Breadcrumbs\n            title={t(pageTitle)}\n            data={[{ title: t(\"App Setting\") }, { title: t(pageTitle) }]}\n          />\n        )}\n        {/* <div className=\"content-header-right text-md-end col-md col-12 mb-2 \">\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n        </div> */}\n      </div>\n      <div className=\"app-user-list\">\n        {!lookupMode && getApiSummaryData && (\n          <Row>\n            {store.dataSummary?.map((item, index) => {\n              return (\n                <Col>\n                  <StatsHorizontal\n                    color={colors[index]}\n                    statTitle={`${t(item.title)}`}\n                    icon={\n                      item.icon ? (\n                        <Icon\n                          baseClassName=\"material-icons-outlined\"\n                          fontSize=\"20\"\n                        >\n                          {item.icon}\n                        </Icon>\n                      ) : (\n                        <Icon\n                          baseClassName=\"material-icons-outlined\"\n                          fontSize=\"20\"\n                        >\n                          lightbulb\n                        </Icon>\n                      )\n                    }\n                    renderStats={\n                      store.isLoadingSummary ? (\n                        <Skeleton\n                          sx={{ bgcolor: \"#eef2f8\" }}\n                          animation=\"wave\"\n                          height={25}\n                          width={40}\n                          className=\"fw-bolder mb-75\"\n                        />\n                      ) : (\n                        <h3 className=\"fw-bolder mb-75\">\n                          {item.count_format ?? item.count}\n                        </h3>\n                      )\n                    }\n                  />\n                </Col>\n              )\n            })}\n          </Row>\n        )}\n        {isTreeLayout ? (\n          <Tree\n            searchString={searchTerm}\n            lookupMode={lookupMode}\n            lookupMode_fieldName={lookupMode_fieldName}\n            lookupMode_defaultValue={lookupMode_defaultValue}\n            lookupMode_onChange={lookupMode_onChange}\n            lookupMode_isMulti={lookupMode_isMulti}\n            lookupMode_isM2MDefValFromGrid\n          />\n        ) : (\n          <Table\n            lookupMode={lookupMode}\n            lookupMode_fieldName={lookupMode_fieldName}\n            lookupMode_defaultValue={lookupMode_defaultValue}\n            lookupMode_onChange={lookupMode_onChange}\n            lookupMode_isMulti={lookupMode_isMulti}\n            lookupMode_isM2MDefValFromGrid\n          />\n        )}\n      </div>\n    </Fragment>\n  ) : (\n    <DropDown\n      lookupMode_fieldName={lookupMode_fieldName}\n      lookupMode_onChange={lookupMode_onChange}\n      lookupMode_defaultValue={lookupMode_defaultValue}\n      lookupMode_isMulti={lookupMode_isMulti}\n      lookupMode_isM2MDefValFromGrid\n    />\n  )\n}\n\nexport default List\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef,\n  lazy,\n  Suspense\n} from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  deleteData,\n  deleteSelectedRowData,\n  disabledAction,\n  dynamicColumnsFilter,\n  setDataList\n} from \"./store\"\n\nimport { getDataList as getDataListApp } from \"../app/store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\n\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Button,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  CardText\n} from \"reactstrap\"\n\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\n\nimport { getDataList as getDataListPermission } from \"../permission/store\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport Avatar from \"@components/avatar\"\n\nconst MySwal = withReactContent(Swal)\n\n// ** Bootstrap Checkbox Component\nconst BootstrapCheckbox = forwardRef((props, ref) => (\n  <div className=\"form-check\">\n    <Input type=\"checkbox\" ref={ref} {...props} />\n  </div>\n))\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  toggleSidebar,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm,\n  selectedRow,\n  handleDeleteSelected,\n  handleFiltersChange,\n  filtersCustomAdd,\n  searchString,\n  lookupMode,\n  lookupMode_fieldName,\n  lookupMode_defaultValue,\n  lookupMode_onChange,\n  lookupMode_isMulti,\n  lookupMode_isM2MDefValFromGrid\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const dispatch = useDispatch()\n  const allStore = useSelector((state) => state)\n  const [dynamicFilterComponents, setDynamicFilterComponents] = useState({})\n  const [dynamicFilterDatas, setDynamicFilterDatas] = useState({})\n  const storeInvoice = useSelector((state) => state.invoices)\n  const userData = getUserData()\n\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\n    fieldName = `filter_${fieldName}`\n    if (isMulti) {\n      if (dynamicFilterDatas[fieldName]) {\n        const index = dynamicFilterDatas[fieldName].indexOf(value)\n        if (index !== -1) {\n          dynamicFilterDatas[fieldName].splice(index, 1)\n        } else {\n          dynamicFilterDatas[fieldName].push(value)\n        }\n      } else {\n        dynamicFilterDatas[fieldName] = [value]\n      }\n    } else {\n      dynamicFilterDatas[fieldName] = value\n    }\n    return handleFiltersChange(dynamicFilterDatas[fieldName], fieldName)\n  }\n\n  useEffect(() => {\n    // DYNAMIC IMPORT COMPONENTS\n    let componentsImport = {}\n    for (let i = 0; i < dynamicColumnsFilter.length; i++) {\n      const fieldName = dynamicColumnsFilter[i][\"fieldName\"]\n      const path_name = dynamicColumnsFilter[i][\"fieldName\"].replaceAll(\n        \"id_\",\n        \"\"\n      )\n\n      dynamicFilterDatas[`filter_${fieldName}`] = null\n      const MyComponent = lazy(() => import(`../${path_name}`))\n      componentsImport[`${path_name}_comp`] = (\n        <MyComponent\n          lookupMode={true}\n          lookupMode_fieldName={fieldName}\n          lookupMode_dropdown={true}\n          lookupMode_isMulti={dynamicColumnsFilter[i].isMultiSelection ?? false}\n          lookupMode_onChange={handleChangeInputs}\n          lookupMode_defaultValue={\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid\n              ? allStore[storeName].data.map((x) => x[fieldName])\n              : allStore[storeName]?.selectedData\n              ? allStore[storeName].selectedData[fieldName]\n              : \"\"\n          }\n          lookupMode_isM2MDefValFromGrid={\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid ?? false\n          }\n        />\n      )\n    }\n\n    setDynamicFilterComponents(componentsImport)\n  }, [dispatch, dynamicFilterDatas])\n\n  return (\n    <div\n      className={`invoice-list-table-header w-100 ms-50 mb-75 ${\n        !lookupMode ? \"mt-2 me-1\" : \"\"\n      }`}\n    >\n      <Row>\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\n          {!lookupMode && (\n            <div className=\"d-flex align-items-center w-100\">\n              <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n              <Input\n                className=\"mx-50\"\n                type=\"select\"\n                id=\"rows-per-page\"\n                value={rowsPerPage}\n                onChange={handlePerPage}\n                style={{ width: \"5rem\" }}\n              >\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n              </Input>\n              <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n            </div>\n          )}\n        </Col>\n        <Col\n          xl=\"8\"\n          className={`d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column p-0 mt-xl-0 mt-1 ${\n            !lookupMode ? \"pe-xl-1\" : \"\"\n          }`}\n        >\n          {selectedRow?.length > 0 &&\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) &&\n          !lookupMode ? (\n            <div\n              className={`d-flex align-items-center mb-sm-0 mb-1 ${\n                !lookupMode ? \"me-1\" : \"\"\n              }`}\n            >\n              <Button\n                className=\"delete-users\"\n                color=\"danger\"\n                onClick={handleDeleteSelected}\n              >\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\n              </Button>\n            </div>\n          ) : null}\n          <div className={`d-flex align-items-center mb-sm-0 mb-1 me-1`}>\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n\n          {dynamicColumnsFilter.map((item, index) => {\n            const path_name = item.fieldName.replaceAll(\"id_\", \"\")\n            return (\n              <div\n                key={path_name}\n                className={`mt-50 width-300 mt-sm-0 mt-1 ${\n                  !lookupMode ? \"me-1\" : \"\"\n                }`}\n              >\n                <Suspense fallback={<div>Loading...</div>}>\n                  {dynamicFilterComponents[`${path_name}_comp`]}\n                </Suspense>\n              </div>\n\n              // <Col key={path_name} md={12} xs={12}>\n              //   <Label className=\"form-label\" for={item.fieldName}>\n              //     {t(item.fieldLabel ?? \"\")}\n              //   </Label>\n              //   <Suspense fallback={<div>Loading...</div>}>\n              //     <div\n              //       className={\n              //         !formDatasError[item.fieldName]\n              //           ? \"dynamicForm_input\"\n              //           : \"dynamicForm_input dynamicForm_input_invalid\"\n              //       }\n              //     >\n              //       {dynamicComponents[`${path_name}_comp`]}\n              //       {item?.isM2MDefValFromGrid &&\n              //         formDatas[item.fieldName] && (\n              //           <div\n              //             style={{ textAlign: \"right\" }}\n              //             className=\"text-primary\"\n              //           >\n              //             {formDatas[item.fieldName]?.length}{\" \"}\n              //             {t(item.fieldLabel)} {t(\"Selected\")}\n              //           </div>\n              //         )}\n              //     </div>\n              //   </Suspense>\n              // </Col>\n            )\n          })}\n\n          {/* {!filtersCustomAdd[\"filter_id_permission\"] ? (\n            <div className=\"mt-50 width-200 me-1 mt-sm-0 mt-1\">\n              <Input\n                type=\"select\"\n                name=\"select\"\n                // value={role}\n                onChange={(e) =>\n                  handleFiltersChange(e.target.value, \"filter_id_permission\")\n                }\n              >\n                <option value=\"\">\n                  {t(\"Select\")} {t(\"Permission\")}\n                </option>\n                {allStore[\"apps_permission\"].data.map((item, index) => (\n                  <option key={item.id} value={item.id}>\n                    {item.title}\n                  </option>\n                ))}\n              </Input>\n            </div>\n          ) : null} */}\n          <div className=\"d-flex align-items-center table-header-actions\">\n            {ability.can(\"post\", sessionStorage.getItem(\"current_page_perm\")) &&\n            !lookupMode ? (\n              <Button\n                className=\"add-new-user\"\n                color=\"primary\"\n                onClick={toggleSidebar}\n                // onClick={handleAdd}\n              >\n                {t(\"Add New\")} {t(pageTitle)}\n              </Button>\n            ) : null}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst List = ({\n  filtersCustomAdd,\n  searchString,\n  lookupMode,\n  lookupMode_fieldName,\n  lookupMode_defaultValue,\n  lookupMode_onChange,\n  lookupMode_isMulti,\n  lookupMode_isM2MDefValFromGrid\n}) => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const storeApp = useSelector((state) => state.apps_app)\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const { colors } = useContext(ThemeColors)\n\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(lookupMode ? 5 : 10)\n  const [selectedRows, setSelectedRows] = useState([])\n\n  const [filtersCustom, setFiltersCustom] = useState(filtersCustomAdd ?? {})\n\n  const [toggleCleared, setToggleCleared] = useState(false)\n\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n\n  const handleEdit = (rowData) => {\n    setFormState(\"edit\")\n    if (!detailFromGrid) {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(getDataById(rowData.id)).then((res) => {\n        if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    } else {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(setDataById(rowData)).then(() => {\n        if (storeApp.data.length === 0 && !storeApp.isLoading) {\n          dispatch(getDataListApp({})).then((res) => {\n            setLoading(false)\n            setShowModal(true)\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    // console.log(\"here\")\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const handleDeleteSelected = async () => {\n    const countSelectedCopy = selectedRows.length\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\n        \"selected data. Deleted data cannot be recovered\"\n      )}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\n        pageTitle\n      )}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\n      )\n      setLoading(true)\n      const values = selectedRows.map((a) => a.id)\n      // console.log(values)\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setSelectedRows([])\n          setToggleCleared(!toggleCleared)\n          setLoading(false)\n          toast.success(\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\n            {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            }\n          )\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /////PAGINATION SERVERSIDE\n  const handlePagination = (page) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1,\n        ...filtersCustom\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage,\n        ...filtersCustom\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  const handleDebounceFn = (inputValue) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        search: inputValue,\n        sort,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\n\n  const handleFilter = (event) => {\n    setSearchTerm(event)\n    debounceFn(event)\n  }\n\n  const handleChangeLookupMode = (\n    e,\n    id,\n    lookupMode_fieldName,\n    lookupMode_isMulti\n  ) => {\n    return lookupMode_onChange(id, lookupMode_fieldName, lookupMode_isMulti)\n  }\n\n  const handleFiltersChange = (value, par_name) => {\n    filtersCustom[par_name] = value\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const handleRowSelected = useCallback((state) => {\n    setSelectedRows(state.selectedRows)\n    if (lookupMode && lookupMode_isMulti) {\n      lookupMode_onChange(\n        state.selectedRows.map((s) => s.id),\n        lookupMode_fieldName,\n        lookupMode_isMulti\n      )\n    }\n  }, [])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const renderCell = (row, column) => {\n    const field = row[column.fieldName]\n    const dataFormat = column.dataFormat\n    if (dataFormat) {\n      if (dataFormat.includes(\":\")) {\n        const columnTypeFormat = dataFormat.split(\":\")\n        const columnType = columnTypeFormat[0]\n        const columnFormat = columnTypeFormat[1]\n        let columnFormated = row[column.fieldName]\n        if (columnType === \"date\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        if (columnType === \"datetime\") {\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\n          if (columnFormat) {\n            columnFormated = Moment(field).format(columnFormat)\n          }\n        }\n        return columnFormated\n      }\n    }\n    return row[column.fieldName]\n  }\n\n  const columns = [\n    ...store.dynamicColumns.map((column) => ({\n      name: column.columnName,\n      sortField: column.fieldName,\n      center: false,\n      sortable: true,\n      minWidth: column.minWidth,\n      selector: (row) => row[column.fieldName],\n      cell: (row) => renderCell(row, column)\n    })),\n    {\n      name: t(\"App\"),\n      center: false,\n      sortable: false,\n      selector: (row) => row?.app_logo,\n      cell: (row) => (\n        <div className=\"d-flex justify-content-left align-items-center\">\n          {row?.app_logo ? (\n            <Avatar\n              className=\"me-1\"\n              img={row?.app_logo}\n              width=\"32\"\n              height=\"32\"\n              imgHeight=\"25\"\n              imgWidth=\"30\"\n              color={\"light-primary\"}\n            />\n          ) : (\n            <Avatar\n              initials\n              className=\"me-1\"\n              // color={row.avatarColor}\n              content={row?.app_name ?? \"\"}\n            />\n          )}\n\n          <div className=\"d-flex flex-column\">\n            <span className=\"fw-bolder\">{row.app_name}</span>\n          </div>\n        </div>\n      )\n    },\n    // {\n    //   name: t(\"App Name\"),\n    //   sortField: \"attributes\",\n    //   center: false,\n    //   sortable: true,\n    //   selector: (row) => row.attributes,\n    //   cell: (row) => row.attributes\n    // },\n    !lookupMode && {\n      name: t(\"Actions\"),\n      center: true,\n      width: \"140px\",\n      cell: (row) => (\n        <GlobalActionsTable\n          disabledAction={disabledAction}\n          row={row}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n        />\n      )\n      // (\n      //   <Input\n      //     disabled={row.hidden}\n      //     defaultChecked={row.checked}\n      //     onChange={(e) =>\n      //       handleChangeLookupMode(\n      //         e,\n      //         row.id,\n      //         lookupMode_fieldName,\n      //         lookupMode_isMulti\n      //       )\n      //     }\n      //     type=\"checkbox\"\n      //     id={`checkbox-${row.id}`}\n      //   />\n      // )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: t(column.name),\n            ...column,\n            sortable: false,\n            cell: (row) =>\n              column.name === \"Actions\" ? (\n                <Fragment>\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    className=\"ms-2 me-1\"\n                    width={30}\n                    height={40}\n                  />\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    width={30}\n                    height={40}\n                  />\n                </Fragment>\n              ) : (\n                <Skeleton\n                  sx={{ bgcolor: colors.dark.light }}\n                  animation=\"wave\"\n                  width=\"100%\"\n                  height={40}\n                />\n              )\n          }))\n        : columns.map((column) => ({\n            name: t(column.name),\n            ...column\n          })),\n    [store.isLoading, columns]\n  )\n\n  const dataToRender = () => {\n    const filters = {\n      search: searchTerm\n    }\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  const removeDefaultValue = (data, dataTree) => {\n    // console.log(dataTree)\n    let mainArray = JSON.parse(JSON.stringify(dataTree))\n    // mainArray.forEach(function iter(a) {\n    //   if (data.includes(a.id)) {\n    //     a[\"checked\"] = true\n    //     a[\"hidden\"] = true\n    //   }\n    //   // console.log(a.id, !data.includes(a.id))\n\n    //   // eslint-disable-next-line no-unused-expressions\n    //   Array.isArray(a.children) && a.children.forEach(iter)\n    // })\n    // dispatch(setDataList(mainArray))\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(\n        getDataList({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage,\n          ...filtersCustom\n        })\n      ).then((x) => {\n        if (lookupMode && lookupMode_isM2MDefValFromGrid) {\n          removeDefaultValue(lookupMode_defaultValue, x.payload.data)\n        }\n      })\n    }\n    if (store.data.length > 0 && lookupMode_isM2MDefValFromGrid && lookupMode) {\n      removeDefaultValue(lookupMode_defaultValue, store.data)\n    }\n  }, [dispatch, sort_dir, sort, currentPage, filtersCustom])\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              responsive\n              pagination\n              paginationServer\n              paginationTotalRows={store.total}\n              paginationComponent={CustomPagination}\n              selectableRows\n              onSelectedRowsChange={handleRowSelected}\n              selectableRowsHighlight\n              // onRowClicked={handleRowSelected}\n              clearSelectedRows={toggleCleared}\n              selectableRowsComponent={BootstrapCheckbox}\n              noDataComponent={<NoDataDisplay />}\n              // fixedHeader\n              // fixedHeaderScrollHeight=\"600px\"\n              style={{ \"min-height\": \"400px\" }}\n              highlightOnHover\n              pointerOnHover\n              columns={tableColumns}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  toggleSidebar={toggleSidebar}\n                  selectedRow={selectedRows}\n                  handleDeleteSelected={handleDeleteSelected}\n                  handleFiltersChange={handleFiltersChange}\n                  filtersCustomAdd={filtersCustomAdd}\n                  lookupMode={lookupMode}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={false}\n          setFormState={setFormState}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef,\n  Component\n} from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  deleteData,\n  deleteSelectedRowData,\n  setDataList,\n  putData\n} from \"./store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid,\n  Copy,\n  Slack,\n  User,\n  Settings,\n  Database,\n  Edit2,\n  MoreVertical,\n  Trash2,\n  Archive,\n  Eye,\n  CheckCircle,\n  CheckSquare,\n  Check,\n  Square,\n  Plus\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\n\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Label,\n  Button,\n  CardBody,\n  CardTitle,\n  CardHeader,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  Badge,\n  UncontrolledTooltip,\n  CardText\n} from \"reactstrap\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nconst MySwal = withReactContent(Swal)\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport SortableTree from \"@nosferatu500/react-sortable-tree\"\nimport { Loader } from \"@src/shared/CommonComponents\"\n\nconst List = ({\n  searchString,\n  lookupMode,\n  lookupMode_fieldName,\n  lookupMode_defaultValue,\n  lookupMode_onChange,\n  lookupMode_isMulti,\n  lookupMode_isM2MDefValFromGrid\n}) => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { t } = useTranslation()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const ability = useContext(AbilityContext)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n  const [currentDataAdd, setCurrentDataAdd] = useState(null)\n\n  const [searchFocusIndex, setSearchFocusIndex] = useState(0)\n  const [searchFoundCount, setSearchFoundCount] = useState(null)\n\n  const { colors } = useContext(ThemeColors)\n\n  const handleEdit = (rowData) => {\n    setFormState(\"edit\")\n    if (!detailFromGrid) {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(getDataById(rowData.id)).then((res) => {\n        if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        } else {\n          setLoading(false)\n          setShowModal(true)\n        }\n      })\n    } else {\n      setLoadingText(\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n      )\n      setLoading(true)\n      dispatch(setDataById(rowData)).then(() => {\n        setLoading(false)\n        setShowModal(true)\n      })\n    }\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const toggleSidebar = (row = null) => {\n    // console.log(row.id)\n    setCurrentDataAdd(row)\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const handleChange = (tree) => {\n    dispatch(setDataList(tree))\n  }\n\n  const handleChangeLookupMode = (\n    e,\n    id,\n    lookupMode_fieldName,\n    lookupMode_isMulti\n  ) => {\n    let mainArray = JSON.parse(JSON.stringify(store.data))\n    mainArray.forEach(function iter(a) {\n      if (a.id === id) {\n        a.checked = e.target.checked\n      }\n      // eslint-disable-next-line no-unused-expressions\n      Array.isArray(a.children) && a.children.forEach(iter)\n    })\n    handleChange(mainArray)\n    return lookupMode_onChange(id, lookupMode_fieldName, lookupMode_isMulti)\n  }\n\n  const eventCanDragNode = (args) => {\n    // console.log(args)\n    if (args.node.is_app_header) {\n      return false\n    }\n    return true\n  }\n\n  const onMoveNode = ({\n    treeData,\n    node,\n    nextParentNode,\n    prevPath,\n    prevTreeIndex,\n    nextPath,\n    nextTreeIndex\n  }) => {\n    // console.log(nextParentNode)\n    const data = {\n      id: node.id,\n      title: node.title,\n      parent_id: nextParentNode.is_app_header ? null : nextParentNode.id\n    }\n    updateDataToApi(data, true)\n  }\n\n  const updateDataToApi = (data, notReload = false) => {\n    // console.log(data)\n    setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} Data`)\n    if (notReload) data[\"notReload\"] = true\n    const nameMsg = data.title\n    dispatch(putData(data, notReload)).then((res) => {\n      // console.log(res)\n      if (res.meta.requestStatus === \"fulfilled\") {\n        toast.success(\n          `${t(\"Successfully Updated\")} ${t(pageTitle)} ${nameMsg}`,\n          {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          }\n        )\n      } else if (res.meta.requestStatus === \"rejected\") {\n        toast.error(res.payload.message, {\n          style: {\n            padding: \"16px\",\n            color: colors.danger.main,\n            border: `1px solid ${colors.danger.main}`\n          },\n          iconTheme: {\n            primary: colors.danger.main\n          }\n        })\n      }\n    })\n  }\n\n  const customSearchMethod = ({ node, searchQuery }) => {\n    return (\n      searchQuery &&\n      node.title.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1\n    )\n  }\n\n  const selectPrevMatch = () =>\n    setSearchFocusIndex(\n      searchFocusIndex !== null\n        ? (searchFoundCount + searchFocusIndex - 1) % searchFoundCount\n        : searchFoundCount - 1\n    )\n\n  const selectNextMatch = () =>\n    setSearchFocusIndex(\n      searchFocusIndex !== null ? (searchFocusIndex + 1) % searchFoundCount : 0\n    )\n\n  const removeDefaultValue = (data, dataTree) => {\n    // console.log(dataTree)\n    let mainArray = JSON.parse(JSON.stringify(dataTree))\n    mainArray.forEach(function iter(a) {\n      if (data.includes(a.id)) {\n        a[\"checked\"] = true\n        a[\"hidden\"] = true\n      }\n      // console.log(a.id, !data.includes(a.id))\n\n      // eslint-disable-next-line no-unused-expressions\n      Array.isArray(a.children) && a.children.forEach(iter)\n    })\n    // console.log(data)\n    // console.log(mainArray)\n    dispatch(setDataList(mainArray))\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(getDataList({})).then((x) => {\n        // console.log(lookupMode_isM2MDefValFromGrid)\n        if (lookupMode && lookupMode_isM2MDefValFromGrid) {\n          removeDefaultValue(lookupMode_defaultValue, x.payload.data)\n        }\n      })\n    }\n    // console.log(lookupMode_isM2MDefValFromGrid)\n    if (store.data.length > 0 && lookupMode_isM2MDefValFromGrid && lookupMode) {\n      removeDefaultValue(lookupMode_defaultValue, store.data)\n    }\n  }, [dispatch, store.data.length])\n\n  return (\n    <Fragment>\n      <UILoader blocking={store.isLoading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <div\n              style={{\n                height: !lookupMode ? 800 : 350,\n                margin: !lookupMode ? 20 : 10\n              }}\n            >\n              <SortableTree\n                treeData={store.data}\n                onChange={handleChange}\n                onMoveNode={!lookupMode ? onMoveNode : null}\n                canDrag={!lookupMode ? eventCanDragNode : false}\n                searchMethod={customSearchMethod}\n                searchQuery={searchString}\n                searchFocusOffset={searchFocusIndex}\n                searchFinishCallback={(matches) => {\n                  setSearchFoundCount(matches.length)\n                  setSearchFocusIndex(\n                    matches.length > 0 ? searchFocusIndex % matches.length : 0\n                  )\n                }}\n                // onlyExpandSearchedNodes\n                maxDepth={4}\n                generateNodeProps={({ node, path }) => ({\n                  style: {\n                    fontSize: node.is_app_header ? `16px` : \"14px\",\n                    fontWeight: node.is_app_header ? `bold` : \"normal\"\n                  },\n                  title: node.icon ? (\n                    <>\n                      <div\n                        style={{\n                          paddingLeft: node.is_app_header ? 0 : 10,\n                          fontWeight: node.is_app_header ? `bold` : 400\n                        }}\n                      >\n                        {node.title}\n                      </div>\n                    </>\n                  ) : (\n                    <div\n                      style={{ fontWeight: node.is_app_header ? `bold` : 400 }}\n                    >\n                      {node.title}\n                    </div>\n                  ),\n                  buttons: [\n                    ability.can(\n                      \"post\",\n                      sessionStorage.getItem(\"current_page_perm\")\n                    ) && !lookupMode ? (\n                      <>\n                        <Button.Ripple\n                          className=\"btn-icon rounded-circle\"\n                          color=\"flat-primary\"\n                          id=\"btn-edit\"\n                          onClick={(e) => {\n                            toggleSidebar(node)\n                          }}\n                        >\n                          <Plus size={16} />\n                        </Button.Ripple>\n                        <UncontrolledTooltip placement=\"left\" target=\"btn-edit\">\n                          {t(\"Add Child\")}\n                        </UncontrolledTooltip>\n                      </>\n                    ) : null,\n                    ability.can(\n                      \"update\",\n                      sessionStorage.getItem(\"current_page_perm\")\n                    ) &&\n                    !lookupMode &&\n                    !node.is_app_header ? (\n                      <>\n                        <Button.Ripple\n                          className=\"btn-icon rounded-circle\"\n                          color=\"flat-info\"\n                          id=\"btn-edit\"\n                          onClick={(e) => {\n                            e.preventDefault()\n                            handleEdit(node)\n                          }}\n                        >\n                          <Edit2 size={16} />\n                        </Button.Ripple>\n                        <UncontrolledTooltip placement=\"left\" target=\"btn-edit\">\n                          {t(\"Edit\")}\n                        </UncontrolledTooltip>\n                      </>\n                    ) : null,\n                    ability.can(\n                      \"delete\",\n                      sessionStorage.getItem(\"current_page_perm\")\n                    ) &&\n                    !lookupMode &&\n                    !node.is_app_header ? (\n                      <>\n                        <Button.Ripple\n                          id=\"btn-delete\"\n                          className=\"btn-icon rounded-circle\"\n                          color=\"flat-danger\"\n                          onClick={(e) => {\n                            e.preventDefault()\n                            handleDelete(node.id)\n                          }}\n                        >\n                          <Trash2 size={16} />\n                        </Button.Ripple>\n                        <UncontrolledTooltip\n                          placement=\"left\"\n                          target=\"btn-delete\"\n                        >\n                          {t(\"Delete\")}\n                        </UncontrolledTooltip>\n                      </>\n                    ) : null,\n                    lookupMode && !node.is_app_header ? (\n                      <div\n                        className={\n                          node.hidden\n                            ? \"form-check form-check-secondary\"\n                            : \"form-check form-check-primary\"\n                        }\n                      >\n                        <Input\n                          disabled={node.hidden}\n                          defaultChecked={node.checked}\n                          onChange={(e) =>\n                            handleChangeLookupMode(\n                              e,\n                              node.id,\n                              lookupMode_fieldName,\n                              lookupMode_isMulti\n                            )\n                          }\n                          type=\"checkbox\"\n                          id={`checkbox-${node.id}`}\n                        />\n                      </div>\n                    ) : null\n                  ]\n                })}\n              />\n            </div>\n          </div>\n        </Card>\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={false}\n          setFormState={setFormState}\n          currentData={currentDataAdd}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n","import { Fragment, useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\"\nimport \"./style.scss\"\nimport { selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\nimport Select from \"react-select\"\n\nimport { storeName, getDataList, getAlwaysGrid } from \"./store\"\n\nconst List = ({\n  lookupMode_fieldName = \"\",\n  lookupMode_isMulti = false,\n  lookupMode_onChange,\n  lookupMode_defaultValue\n}) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const onChangeInput = (e) => {\n    return lookupMode_onChange(e, lookupMode_fieldName)\n  }\n\n  useEffect(() => {\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\n      dispatch(getDataList({}))\n    }\n  }, [dispatch, store.data.length])\n\n  return (\n    <Fragment>\n      <Select\n        theme={selectThemeColors}\n        defaultValue={\n          !lookupMode_isMulti\n            ? store.dataDropdown.filter(\n                (el) => el.value === lookupMode_defaultValue\n              )\n            : lookupMode_defaultValue\n        }\n        isMulti={lookupMode_isMulti}\n        // onChange={lookupMode_onChange}\n        onChange={onChangeInput}\n        options={store.dataDropdown}\n        className={classnames(\"react-select\", {\n          \"is-invalid\": store.selectedData?.id === null\n        })}\n        classNamePrefix=\"select\"\n      />\n    </Fragment>\n  )\n}\n\nexport default List\n","// ** Third Party Components\nimport PropTypes from \"prop-types\"\nimport classnames from \"classnames\"\n\n// ** Reactstrap Imports\nimport { Card, CardBody } from \"reactstrap\"\nimport { Fragment } from \"react\"\n\nconst StatsHorizontal = ({\n  icon,\n  color,\n  cardColor,\n  stats,\n  renderStats,\n  statTitle,\n  className,\n  countTextColor,\n  countTextStyle = {},\n  titleStyle = {},\n  statsMargin,\n  solidColor = false,\n  cardStyle = {},\n  titleOnTop = false\n}) => {\n  const cardColorFix = !solidColor ? `bg-light-${cardColor}` : `bg-${cardColor}`\n  return (\n    <Card\n      style={{ ...cardStyle }}\n      {...(cardColor ? { className: cardColorFix, inverse: true } : {})}\n    >\n      <CardBody className={className}>\n        {!titleOnTop ? (\n          <div className=\"d-flex justify-content-between align-items-center\">\n            {renderStats ? (\n              renderStats\n            ) : (\n              <Fragment>\n                <div>\n                  {renderStats ? (\n                    renderStats\n                  ) : (\n                    <h3\n                      className={classnames(\"fw-bolder\", {\n                        \"mb-0\": !statsMargin,\n                        [statsMargin]: statsMargin\n                      })}\n                      style={{\n                        color: countTextColor ?? \"#5e5873\",\n                        ...countTextStyle\n                      }}\n                    >\n                      {stats}\n                    </h3>\n                  )}\n\n                  <p style={{ ...titleStyle }} className=\"card-text\">\n                    {statTitle}\n                  </p>\n                </div>\n                <div\n                  className={`avatar avatar-stats p-50 m-0 ${\n                    color ? `bg-light-${color}` : \"bg-light-primary\"\n                  }`}\n                >\n                  <div className=\"avatar-content\">{icon}</div>\n                </div>\n              </Fragment>\n            )}\n          </div>\n        ) : (\n          <Fragment>\n            <div>\n              <p style={{ ...titleStyle }} className=\"card-text\">\n                {statTitle}\n              </p>\n            </div>\n            <div className=\"d-flex justify-content-between align-items-center\">\n              {renderStats ? (\n                renderStats\n              ) : (\n                <Fragment>\n                  <div>\n                    {renderStats ? (\n                      renderStats\n                    ) : (\n                      <h3\n                        className={classnames(\"fw-bolder\", {\n                          \"mb-0\": !statsMargin,\n                          [statsMargin]: statsMargin\n                        })}\n                        style={{\n                          color: countTextColor ?? \"#5e5873\",\n                          ...countTextStyle\n                        }}\n                      >\n                        {stats}\n                      </h3>\n                    )}\n                  </div>\n                  <div\n                    className={`avatar avatar-stats p-50 m-0 ${\n                      color ? `bg-light-${color}` : \"bg-light-primary\"\n                    }`}\n                  >\n                    <div className=\"avatar-content\">{icon}</div>\n                  </div>\n                </Fragment>\n              )}\n            </div>\n          </Fragment>\n        )}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StatsHorizontal\n\n// ** PropTypes\nStatsHorizontal.propTypes = {\n  stats: PropTypes.string,\n  renderStats: PropTypes.any,\n  className: PropTypes.string,\n  icon: PropTypes.element,\n  color: PropTypes.string,\n  cardColor: PropTypes.string,\n  statTitle: PropTypes.string,\n  statsMargin: PropTypes.oneOf([\n    \"mb-0\",\n    \"mb-25\",\n    \"mb-50\",\n    \"mb-75\",\n    \"mb-1\",\n    \"mb-2\",\n    \"mb-3\",\n    \"mb-4\",\n    \"mb-5\"\n  ])\n}\n","// ** React Imports\nimport { Fragment } from \"react\"\nimport { Link } from \"react-router-dom\"\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from \"react-feather\"\nimport { useTranslation } from \"react-i18next\"\n\n// ** Reactstrap Imports\nimport {\n  Breadcrumb,\n  DropdownMenu,\n  DropdownItem,\n  BreadcrumbItem,\n  DropdownToggle,\n  UncontrolledButtonDropdown\n} from \"reactstrap\"\n\nconst BreadCrumbs = (props) => {\n  const { t } = useTranslation()\n  // ** Props\n  const { data, title, mb, subtitle } = props\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment\n      const isLastItem = data.length - 1 === index\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      )\n    })\n  }\n\n  return (\n    <div\n      className={`content-header-left col-md-9 col-8 ${\n        mb || mb === 0 ? `mb-${mb}` : \"mb-2\"\n      }`}\n    >\n      <div className=\"row breadcrumbs-top\">\n        <div className=\"col-12\">\n          {title ? (\n            <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n          ) : (\n            \"\"\n          )}\n          <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n            <Breadcrumb>\n              <BreadcrumbItem tag=\"li\">\n                <Link to=\"/\">{t(\"Home\")}</Link>\n              </BreadcrumbItem>\n              {renderBreadCrumbs()}\n            </Breadcrumb>\n          </div>\n        </div>\n        <div className=\"col-12\">{subtitle ?? \"\"}</div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired\n    })\n  )\n}\n"],"sourceRoot":""}