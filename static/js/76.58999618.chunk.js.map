{"version":3,"sources":["views/apps/permission_endpoint/modal/index.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","t","useTranslation","id","useParams","colors","useContext","ThemeColors","useState","setLoadingText","dispatch","useDispatch","allStore","useSelector","state","dynamicComponents","setDynamicComponents","formDatas","formDatasError","setFormDatasError","useForm","setError","control","handleSubmit","handleReset","errors","resetSelectedData","handleChangeInputs","value","fieldName","isMulti","Array","isArray","index","indexOf","splice","push","useEffect","componentsImport","dynamicFormRelation","dynamicForm","filter","el","type","i","path_name","replaceAll","MyComponent","lazy","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","storeName","data","map","x","selectedData","lookupMode_isM2MDefValFromGrid","length","isOpen","toggle","className","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","onSubmit","storeData","sortedObject","key","JSON","stringify","countChanges","Object","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","icon","postData","errorFields","assign","item","includes","md","xs","for","fieldLabel","fallback","textAlign","outline","onClick"],"mappings":"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","file":"static/js/76.58999618.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  lazy,\n  Suspense\n} from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors, sortedObject } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport store, {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById,\n  dynamicForm\n} from \"../store\"\nimport { Loader } from \"@src/shared/CommonComponents\"\nimport { getDataList as getDataListApp } from \"../../app/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport classnames from \"classnames\"\n// import List from \"../../menu\"\n// import {List as PermissionComponent} from \"../../permission\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const dispatch = useDispatch()\n  const allStore = useSelector((state) => state)\n  const [dynamicComponents, setDynamicComponents] = useState({})\n  const [formDatas, setFormDatas] = useState({})\n  const [formDatasError, setFormDatasError] = useState({})\n\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(allStore[storeName].selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = () => {\n    if (countChanges(formDatas)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = () => {\n    if (\n      Object.values(formDatas).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(formDatas)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n          if (detailPage) {\n            dispatch(getDataById(id))\n          }\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      // console.log(\"ERORR\")\n      // console.log(formDatas)\n      let errorFields = Object.assign({}, formDatasError)\n      for (let key in formDatas) {\n        // console.log(key, formDatas[key])\n        if (formDatas[key] === null || formDatas[key]?.length === 0) {\n          errorFields[key] = true\n        }\n      }\n      // console.log(errorFields)\n      setFormDatasError(errorFields)\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\n    // console.log(value, fieldName, isMulti)\n    if (isMulti && !Array.isArray(value)) {\n      if (formDatas[fieldName]) {\n        const index = formDatas[fieldName].indexOf(value)\n        if (index !== -1) {\n          formDatas[fieldName].splice(index, 1)\n        } else {\n          formDatas[fieldName].push(value)\n        }\n      } else {\n        formDatas[fieldName] = [value]\n      }\n    } else {\n      formDatas[fieldName] = value\n    }\n    setFormDatasError({ ...formDatasError, [fieldName]: false })\n  }\n\n  useEffect(() => {\n    // DYNAMIC IMPORT COMPONENTS\n    let componentsImport = {}\n    const dynamicFormRelation = dynamicForm.filter(function (el) {\n      return el.type === \"dropdown\" || el.type === \"table\"\n    })\n\n    for (let i = 0; i < dynamicFormRelation.length; i++) {\n      const fieldName = dynamicFormRelation[i][\"fieldName\"]\n      const path_name = dynamicFormRelation[i][\"fieldName\"].replaceAll(\n        \"id_\",\n        \"\"\n      )\n\n      formDatas[fieldName] = null\n      formDatasError[fieldName] = false\n      const MyComponent = lazy(() => import(`../../${path_name}`))\n      componentsImport[`${path_name}_comp`] = (\n        <MyComponent\n          lookupMode={true}\n          lookupMode_fieldName={fieldName}\n          lookupMode_dropdown={dynamicFormRelation[i][\"type\"] === \"dropdown\"}\n          lookupMode_isMulti={dynamicFormRelation[i].isMultiSelection ?? false}\n          lookupMode_onChange={handleChangeInputs}\n          lookupMode_defaultValue={\n            dynamicFormRelation[i]?.isM2MDefValFromGrid\n              ? allStore[storeName].data.map((x) => x[fieldName])\n              : allStore[storeName]?.selectedData\n              ? allStore[storeName].selectedData[fieldName]\n              : \"\"\n          }\n          lookupMode_isM2MDefValFromGrid={\n            dynamicFormRelation[i]?.isM2MDefValFromGrid ?? false\n          }\n        />\n      )\n    }\n\n    setDynamicComponents(componentsImport)\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={\n          allStore[storeName].isLoadingAddEdit ||\n          allStore[storeName].isLoadingDetail\n        }\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              {dynamicForm.map((item, index) => {\n                if ([\"dropdown\", \"table\"].includes(item.type)) {\n                  const path_name = item.fieldName.replaceAll(\"id_\", \"\")\n                  return (\n                    <Col key={path_name} md={12} xs={12}>\n                      {item.type !== \"table\" && (\n                        <Label className=\"form-label\" for={item.fieldName}>\n                          {t(item.fieldLabel ?? \"\")}\n                        </Label>\n                      )}\n                      <Suspense fallback={<div>Loading...</div>}>\n                        <div\n                          className={\n                            !formDatasError[item.fieldName]\n                              ? \"dynamicForm_input\"\n                              : \"dynamicForm_input dynamicForm_input_invalid\"\n                          }\n                        >\n                          {dynamicComponents[`${path_name}_comp`]}\n                          {item?.isM2MDefValFromGrid &&\n                            formDatas[item.fieldName] && (\n                              <div\n                                style={{ textAlign: \"right\" }}\n                                className=\"text-primary\"\n                              >\n                                {formDatas[item.fieldName]?.length}{\" \"}\n                                {t(item.fieldLabel)} {t(\"Selected\")}\n                              </div>\n                            )}\n                        </div>\n                      </Suspense>\n                    </Col>\n                  )\n                }\n              })}\n\n              {/* <Col md={12} xs={12}>\n                <List lookupMode={true} lookupMode_isMulti={true} />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"id_permission\">\n                  {t(\"Permission\")}\n                </Label>\n                <Suspense fallback={<div>Loading...</div>}>\n                  {dynamicComponents[\"permission_comp\"]}\n                </Suspense>\n              </Col> */}\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n"],"sourceRoot":""}