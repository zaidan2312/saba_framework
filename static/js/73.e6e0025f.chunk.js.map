{"version":3,"sources":["views/apps/app/modal/index.js","utility/canvasUtils.js"],"names":["ORIENTATION_TO_ANGLE","ModalAddEdit","show","setShow","detailPage","formState","setFormState","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","useState","codeApp","setCodeApp","appType","setAppType","mainLanguage","setMainLanguage","framework","setFramework","setLoadingText","imageSrc","setImageSrc","x","y","crop","setCrop","rotation","setRotation","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","useForm","control","setError","handleSubmit","errors","Option","components","appTypeOptions","value","label","icon","className","sixe","IconImgOption","props","src","data","style","width","alt","appMainLanguageOptions","appFrameworkOptions","countChanges","storeData","sortedObject","selectedData","key","JSON","stringify","handleInputName","event","newValue","target","replace","replaceAll","toLowerCase","updateDataToApi","a","Object","values","every","field","includes","getCroppedImg","croppedImage","appLogo","pageTitle","putData","then","res","meta","requestStatus","toast","success","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","length","type","postDataToApi","formData","description","programming_language","main_language","language_others","framework_ver","dependencies","favicon","console","log","postData","handleReset","resetSelectedData","useDropzone","multiple","onDrop","acceptedFiles","file","onFileChange","getRootProps","getInputProps","onCropComplete","useCallback","croppedArea","readFile","Promise","resolve","reader","FileReader","addEventListener","result","readAsDataURL","imageDataUrl","getOrientation","orientation","getRotatedImage","useEffect","logo","isOpen","toggle","blocking","isLoadingAddEdit","isLoadingDetail","loader","onSubmit","md","xs","for","defaultValue","name","render","onInput","invalid","code","disabled","readOnly","theme","selectThemeColors","filter","el","info","onChange","options","classnames","classNamePrefix","margin","image","aspect","showGrid","onCropChange","onRotationChange","onZoomChange","restrictPosition","objectFit","size","href","onClick","e","preventDefault","min","max","step","outline","createImage","url","reject","Image","setAttribute","getRadianAngle","degreeValue","Math","PI","rotateSize","height","rotRad","abs","cos","sin","pixelCrop","flip","horizontal","vertical","asBlob","asFile","canvas","document","createElement","ctx","getContext","bBoxWidth","bBoxHeight","translate","rotate","scale","drawImage","getImageData","putImageData","toDataURL","toBlob","URL","createObjectURL"],"mappings":"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","file":"static/js/73.e6e0025f.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n  useRef,\n  createRef\n} from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  ListGroup,\n  ListGroupItem\n} from \"reactstrap\"\nimport { useDropzone } from \"react-dropzone\"\nimport { FileText, X, DownloadCloud } from \"react-feather\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors, sortedObject } from \"@utils\"\nimport Select, { components } from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"../store\"\n\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ApiIcon from \"@mui/icons-material/Api\"\nimport WebIcon from \"@mui/icons-material/Web\"\nimport InstallMobileIcon from \"@mui/icons-material/InstallMobile\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport classnames from \"classnames\"\nimport { getOrientation } from \"get-orientation/browser\"\nimport {\n  getCroppedImg,\n  getRotatedImage\n} from \"../../../../utility/canvasUtils\"\nimport Cropper from \"react-easy-crop\"\nimport Slider from \"@mui/material/Slider\"\nconst ORIENTATION_TO_ANGLE = {\n  3: 180,\n  6: 90,\n  8: -90\n}\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [codeApp, setCodeApp] = useState(\"\")\n  const [appType, setAppType] = useState(\"\")\n  const [mainLanguage, setMainLanguage] = useState(\"\")\n  const [framework, setFramework] = useState(\"\")\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [imageSrc, setImageSrc] = useState(null)\n  const [crop, setCrop] = useState({ x: 0, y: 0 })\n  const [rotation, setRotation] = useState(0)\n  const [zoom, setZoom] = useState(1)\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null)\n  // const [fileToUpload, setFileToUpload] = useState()\n\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  const { Option } = components\n  const IconOption = (props) => (\n    <Option {...props}>\n      {props.data.icon}\n      {props.data.label}\n    </Option>\n  )\n\n  const appTypeOptions = [\n    {\n      value: \"service\",\n      label: \"Service\",\n      icon: <ApiIcon className=\"me-1\" sixe={32} />\n    },\n    {\n      value: \"web\",\n      label: \"Web App\",\n      icon: <WebIcon className=\"me-1\" sixe={32} />\n    },\n    {\n      value: \"mobile\",\n      label: \"Mobile App\",\n      icon: <InstallMobileIcon className=\"me-1\" sixe={32} />\n    }\n  ]\n\n  const IconImgOption = (props) => (\n    <Option {...props}>\n      <img\n        className=\"me-1\"\n        src={props.data.icon}\n        style={{ width: 36 }}\n        alt={props.data.label}\n      />\n      {props.data.label}\n    </Option>\n  )\n\n  const appMainLanguageOptions = [\n    {\n      value: \"python\",\n      label: \"Python\",\n      icon: \"https://logos-download.com/wp-content/uploads/2016/10/Python_logo_wordmark.png\"\n    },\n    {\n      value: \"javascript\",\n      label: \"Javascript\",\n      icon: \"https://javascriptsu.files.wordpress.com/2020/12/js.jpg\"\n    }\n  ]\n\n  const appFrameworkOptions = [\n    {\n      value: \"react\",\n      label: \"React\",\n      icon: \"https://logos-download.com/wp-content/uploads/2016/09/React_logo_wordmark.png\"\n    },\n    {\n      value: \"angular\",\n      label: \"Angular\",\n      icon: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQgREvN-e1uVZXVDc2w_zLeey0Li4buQ26gF0ZmCYxaBMoybo4uQTncS3Z5WxHRyZNfA&usqp=CAU\"\n    },\n    {\n      value: \"flask\",\n      label: \"Flask\",\n      icon: \"https://miro.medium.com/max/1079/1*nvtdCw77Al6LgV8wt_ma6Q.png\"\n    },\n    {\n      value: \"flutter\",\n      label: \"Flutter\",\n      icon: \"https://png.pngitem.com/pimgs/s/480-4803274_google-flutter-hd-png-download.png\"\n    }\n  ]\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(store.selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const handleInputName = (event) => {\n    const value = event.target.value\n    const newValue = value\n      .replace(/[^a-zA-Z0-9 ]/g, \"\")\n      .replaceAll(\" \", \"_\")\n      .toLowerCase()\n    setCodeApp(newValue)\n  }\n\n  const updateDataToApi = async (data) => {\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        // console.log(rotation)\n        // console.log(crop)\n        if (\n          imageSrc.includes(\"data:image/png;base64\") ||\n          crop !== 0 ||\n          rotation !== { x: 0, y: 0 }\n        ) {\n          const croppedImage = await getCroppedImg(\n            imageSrc,\n            croppedAreaPixels,\n            rotation\n          )\n          data[\"logo\"] = { appLogo: croppedImage }\n        }\n        // console.log(data)\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n            if (detailPage) {\n              dispatch(getDataById(id))\n            }\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = async (formData) => {\n    const data = {}\n    data[\"name\"] = formData[\"name\"]\n    data[\"code\"] = codeApp\n    data[\"info\"] = {\n      description: formData[\"description\"],\n      appType: appType,\n      programming_language: {\n        main_language: mainLanguage,\n        language_others: [],\n        framework: framework,\n        framework_ver: null,\n        dependencies: []\n      }\n    }\n    data[\"logo\"] = {\n      appLogo:\n        \"https://res.cloudinary.com/insaba/image/upload/v1661262584/app/insaba_starterkit_services/logo.png\",\n      favicon:\n        \"https://res.cloudinary.com/insaba/image/upload/v1661262584/app/insaba_starterkit_services/favicon.png\"\n    }\n\n    if (imageSrc) {\n      const croppedImage = await getCroppedImg(\n        imageSrc,\n        croppedAreaPixels,\n        rotation\n      )\n      console.log(\"donee\", { croppedImage })\n      data[\"logo\"][\"appLogo\"] = croppedImage\n    }\n    // console.log(data)\n\n    if (\n      Object.values(data).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(data)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n          if (detailPage) {\n            dispatch(getDataById(id))\n          }\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  const handleReset = () => {\n    dispatch(resetSelectedData())\n  }\n\n  // ** UPLOAD\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    onDrop: (acceptedFiles) => {\n      const file = acceptedFiles[0]\n      onFileChange(file)\n    }\n  })\n\n  const handleRemoveAllFiles = (e) => {\n    setImageSrc(null)\n  }\n\n  //////CROP\n\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels)\n  }, [])\n\n  function readFile(file) {\n    return new Promise((resolve) => {\n      const reader = new FileReader()\n      reader.addEventListener(\"load\", () => resolve(reader.result), false)\n      reader.readAsDataURL(file)\n    })\n  }\n\n  const onFileChange = async (file) => {\n    let imageDataUrl = await readFile(file)\n    const orientation = await getOrientation(file)\n    const rotation = ORIENTATION_TO_ANGLE[orientation]\n    if (rotation) {\n      imageDataUrl = await getRotatedImage(imageDataUrl, rotation)\n    }\n\n    setImageSrc(imageDataUrl)\n  }\n\n  useEffect(() => {\n    if (formState === \"edit\") {\n      setImageSrc(store.selectedData.logo.appLogo ?? null)\n    }\n  }, [])\n\n  return (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              <Col md={8} xs={12}>\n                <Row>\n                  <Col md={12} xs={12} className=\"mb-1\">\n                    <Label className=\"form-label\" for=\"name\">\n                      {t(\"App Name\")}\n                      <span className=\"text-danger\">*</span>\n                    </Label>\n                    <Controller\n                      defaultValue={store.selectedData?.name ?? \"\"}\n                      control={control}\n                      id=\"name\"\n                      name=\"name\"\n                      render={({ field }) => (\n                        <Input\n                          {...field}\n                          className={\n                            errors.name\n                              ? \"form-control is-invalid\"\n                              : \"form-control\"\n                          }\n                          onInput={handleInputName}\n                          id=\"name\"\n                          invalid={errors.name && true}\n                        />\n                      )}\n                    />\n                  </Col>\n\n                  <Col md={12} xs={12} className=\"mb-1\">\n                    <Label className=\"form-label\" for=\"code\">\n                      {t(\"Code\")}\n                      <span className=\"text-danger\">*</span>\n                    </Label>\n                    <Controller\n                      defaultValue={store.selectedData?.code ?? codeApp}\n                      control={control}\n                      id=\"code\"\n                      name=\"code\"\n                      render={({ field }) => (\n                        <Input\n                          disabled={true}\n                          readOnly={true}\n                          {...field}\n                          value={store.selectedData?.code ?? codeApp}\n                          className={\n                            errors.code\n                              ? \"form-control is-invalid\"\n                              : \"form-control\"\n                          }\n                          id=\"code\"\n                          invalid={errors.code && true}\n                        />\n                      )}\n                    />\n                  </Col>\n\n                  <Col md={12} xs={12} className=\"mb-1\">\n                    <Label className=\"form-label\" for=\"appType\">\n                      {t(\"App Type\")}\n                    </Label>\n                    <Select\n                      id=\"appType\"\n                      theme={selectThemeColors}\n                      defaultValue={appTypeOptions.filter(\n                        (el) => el.value === store.selectedData?.info?.appType\n                      )}\n                      onChange={(data) => {\n                        setAppType(data.value)\n                      }}\n                      options={appTypeOptions}\n                      components={{ Option: IconOption }}\n                      className={classnames(\"react-select\", {\n                        \"is-invalid\": appType === null\n                      })}\n                      classNamePrefix=\"select\"\n                    />\n                  </Col>\n                </Row>\n              </Col>\n\n              <Col md={4} xs={12}>\n                {/* <Label className=\"form-label\" for=\"name\">\n                  {t(\"App Logo\")}\n                  <span className=\"text-danger\">*</span>\n                </Label> */}\n\n                <CardBody\n                  style={{ padding: 0, margin: \"auto\" }}\n                  className=\"text-center\"\n                >\n                  {imageSrc && (\n                    <div className=\"crop-container2\">\n                      <Cropper\n                        image={imageSrc}\n                        crop={crop}\n                        rotation={rotation}\n                        zoom={zoom}\n                        aspect={1}\n                        showGrid={false}\n                        onCropChange={setCrop}\n                        onRotationChange={setRotation}\n                        onCropComplete={onCropComplete}\n                        onZoomChange={setZoom}\n                        restrictPosition={false}\n                        // cropSize={{ width: \"110px\", height: \"110px\" }}\n                        objectFit=\"vertical-cover\"\n                      />\n                    </div>\n                  )}\n                  {!imageSrc ? (\n                    <div {...getRootProps({ className: \"dropzone\" })}>\n                      <input {...getInputProps()} />\n                      <div className=\"d-flex align-items-center justify-content-center flex-column\">\n                        <DownloadCloud size={64} />\n                        <h5>{t(\"Drop Files here or click to upload\")}</h5>\n                        <p className=\"text-secondary\">\n                          {t(\"Drop files here or click\")}{\" \"}\n                          <a href=\"/\" onClick={(e) => e.preventDefault()}>\n                            {t(\"browse\")}\n                          </a>{\" \"}\n                          {t(\"through your machine\")}\n                        </p>\n                      </div>\n                    </div>\n                  ) : null}\n                  {imageSrc ? (\n                    <Fragment>\n                      <div className=\"d-flex justify-content-left align-items-center\">\n                        <div\n                          style={{ width: \"95px\" }}\n                          className=\"d-flex flex-column me-1\"\n                        >\n                          <span>{t(\"Zoom\")}</span>\n                        </div>\n                        <Slider\n                          value={zoom}\n                          min={1}\n                          max={3}\n                          step={0.1}\n                          aria-labelledby=\"Zoom\"\n                          onChange={(e, zoom) => setZoom(zoom)}\n                        />\n                      </div>\n\n                      <div className=\"d-flex justify-content-left align-items-center  mb-1\">\n                        <div\n                          style={{ width: \"95px\" }}\n                          className=\"d-flex flex-column me-1\"\n                        >\n                          <span>{t(\"Rotation\")}</span>\n                        </div>\n                        <Slider\n                          value={rotation}\n                          min={0}\n                          max={360}\n                          step={1}\n                          aria-labelledby=\"Rotation\"\n                          onChange={(e, rotation) => setRotation(rotation)}\n                        />\n                      </div>\n\n                      {/* <ListGroup className=\"my-2\">{fileList}</ListGroup> */}\n                      <div className=\"d-flex justify-content-center\">\n                        <Button\n                          color=\"danger\"\n                          outline\n                          onClick={handleRemoveAllFiles}\n                        >\n                          {t(\"Change\")}\n                        </Button>\n                      </div>\n                    </Fragment>\n                  ) : null}\n                </CardBody>\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"main_language\">\n                  {t(\"Programming Language\")}\n                </Label>\n                <Select\n                  id=\"main_language\"\n                  theme={selectThemeColors}\n                  defaultValue={appMainLanguageOptions.filter(\n                    (el) =>\n                      el.value ===\n                      store.selectedData?.info?.programming_language\n                        ?.main_language\n                  )}\n                  onChange={(data) => {\n                    setMainLanguage(data.value)\n                  }}\n                  options={appMainLanguageOptions}\n                  components={{ Option: IconImgOption }}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"framework\">\n                  {t(\"Framework\")}\n                </Label>\n                <Select\n                  id=\"framework\"\n                  theme={selectThemeColors}\n                  defaultValue={appFrameworkOptions.filter(\n                    (el) =>\n                      el.value ===\n                      store.selectedData?.info?.programming_language?.framework\n                  )}\n                  onChange={(data) => {\n                    setFramework(data.value)\n                  }}\n                  options={appFrameworkOptions}\n                  components={{ Option: IconImgOption }}\n                  className=\"react-select\"\n                  classNamePrefix=\"select\"\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"description\">\n                  {t(\"Description\")}\n                  <span className=\"text-danger\"></span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.name ?? \"\"}\n                  control={control}\n                  id=\"description\"\n                  name=\"description\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      type=\"textarea\"\n                      className=\"form-control\"\n                      id=\"description\"\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  )\n}\n\nexport default ModalAddEdit\n","export const createImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener(\"load\", () => resolve(image))\n    image.addEventListener(\"error\", (error) => reject(error))\n    image.setAttribute(\"crossOrigin\", \"anonymous\") // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nexport function getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function rotateSize(width, height, rotation) {\n  const rotRad = getRadianAngle(rotation)\n\n  return {\n    width:\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height:\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height)\n  }\n}\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n */\nexport async function getCroppedImg(\n  imageSrc,\n  pixelCrop,\n  rotation = 0,\n  flip = { horizontal: false, vertical: false },\n  asBlob = false,\n  asFile = false\n) {\n  // console.log(imageSrc)\n  // console.log(pixelCrop)\n  // console.log(asBlob)\n\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n\n  if (!ctx) {\n    return null\n  }\n\n  const rotRad = getRadianAngle(rotation)\n\n  // calculate bounding box of the rotated image\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\n    image.width,\n    image.height,\n    rotation\n  )\n\n  // set canvas size to match the bounding box\n  canvas.width = bBoxWidth\n  canvas.height = bBoxHeight\n\n  // translate canvas context to a central location to allow rotating and flipping around the center\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2)\n  ctx.rotate(rotRad)\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1)\n  ctx.translate(-image.width / 2, -image.height / 2)\n\n  // draw rotated image\n  ctx.drawImage(image, 0, 0)\n\n  // croppedAreaPixels values are bounding box relative\n  // extract the cropped image using these values\n  const data = ctx.getImageData(\n    pixelCrop.x,\n    pixelCrop.y,\n    pixelCrop.width,\n    pixelCrop.height\n  )\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n\n  // paste generated rotate image at the top left corner\n  ctx.putImageData(data, 0, 0)\n\n  if (!asBlob) {\n    // As Base64 string\n    // return canvas.toDataURL(\"image/jpeg\")\n    return canvas.toDataURL(\"image/png\")\n  } else if (asFile) {\n    // As a blob\n    return new Promise((resolve, reject) => {\n      canvas.toBlob((file) => {\n        resolve(file)\n      }, \"image/png\")\n    })\n  } else {\n    // As a blob\n    return new Promise((resolve, reject) => {\n      canvas.toBlob((file) => {\n        resolve(URL.createObjectURL(file))\n      }, \"image/png\")\n    })\n  }\n}\n\nexport async function getRotatedImage(imageSrc, rotation = 0) {\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n\n  const orientationChanged =\n    rotation === 90 || rotation === -90 || rotation === 270 || rotation === -270\n  if (orientationChanged) {\n    canvas.width = image.height\n    canvas.height = image.width\n  } else {\n    canvas.width = image.width\n    canvas.height = image.height\n  }\n\n  ctx.translate(canvas.width / 2, canvas.height / 2)\n  ctx.rotate((rotation * Math.PI) / 180)\n  ctx.drawImage(image, -image.width / 2, -image.height / 2)\n\n  return new Promise((resolve) => {\n    canvas.toBlob((file) => {\n      resolve(URL.createObjectURL(file))\n    }, \"image/png\")\n  })\n}\n"],"sourceRoot":""}