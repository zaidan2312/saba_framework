{"version":3,"sources":["assets/images/banner/banner-19.jpg","assets/images/banner/banner-20.jpg","views/dashboard/widgets/WidgetAnnouncement.js","@core/components/ui-loader/index.js","../node_modules/@mui/icons-material/esm/Fullscreen.js","../node_modules/@mui/icons-material/esm/FullscreenExit.js","../node_modules/@mui/icons-material/InsertInvitationOutlined.js"],"names":["params","spaceBetween","centeredSlides","autoplay","delay","disableOnInteraction","autoHeight","pagination","clickable","type","bulletClassName","navigation","WidgetAnnouncement","lg","md","t","useTranslation","store","useSelector","state","dynamicStore","dispatch","useDispatch","navigate","useNavigate","storeName","useState","isFullscreen","setIsFullscreen","element","document","getElementById","exitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","useEffect","pageData","data","length","isLoading","getDataList","endpointName","baseUrl","handleKeydown","event","addEventListener","removeEventListener","imgs","img1","img2","xs","style","minHeight","className","padding","fontSize","tag","blocking","loader","id","cursor","Ripple","onClick","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","color","FullscreenExit","size","Fullscreen","map","slide","index","backgroundImage","img_path","backgroundSize","backgroundPosition","height","display","flexDirection","alignItems","borderRadius","title","textAlign","maxHeight","dangerouslySetInnerHTML","__html","description","e","UILoader","props","children","overlayColor","Tag","classnames","backgroundColor","defaultProps","createSvgIcon","_jsx","d","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx"],"mappings":"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","file":"static/js/146.997b2d2c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/banner-19.8c6336b6.jpg\";","export default __webpack_public_path__ + \"static/media/banner-20.76c5efd4.jpg\";","import UILoader from \"@components/ui-loader\"\r\nimport { Loader } from \"@src/shared/CommonComponents\"\r\nimport { getDataList } from \"@src/shared/dynamic_pages/store\"\r\nimport \"moment-timezone\"\r\nimport \"moment/locale/id\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { Button, Card, CardBody, CardHeader, CardTitle, Col } from \"reactstrap\"\r\n\r\nimport InsertInvitationOutlinedIcon from \"@mui/icons-material/InsertInvitationOutlined\"\r\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\"\r\n\r\nimport img2 from \"@src/assets/images/banner/banner-19.jpg\"\r\nimport img1 from \"@src/assets/images/banner/banner-20.jpg\"\r\nimport { Fullscreen, FullscreenExit } from \"@mui/icons-material\"\r\n\r\nconst params = {\r\n  spaceBetween: 30,\r\n  centeredSlides: true,\r\n  autoplay: {\r\n    delay: 7000,\r\n    disableOnInteraction: true\r\n  },\r\n  autoHeight: true,\r\n  pagination: {\r\n    clickable: true,\r\n    type: \"bullets\",\r\n    bulletClassName: \"custom-bullet\"\r\n  },\r\n  navigation: false\r\n}\r\n\r\nconst WidgetAnnouncement = ({ lg, md }) => {\r\n  const { t } = useTranslation()\r\n  // const store = useSelector((state) => state[storeName])\r\n  const store = useSelector((state) => state.dynamicStore)\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  const storeName = \"widget_announcement\"\r\n  const endpointName = \"api/announcement\"\r\n\r\n  const [isFullscreen, setIsFullscreen] = useState(false)\r\n  const element = document.getElementById(\"announcement-widget-div\")\r\n  // const toggleFullscreen = () => {\r\n  //   if (!isFullscreen) {\r\n  //     if (divElement.requestFullscreen) {\r\n  //       divElement.requestFullscreen()\r\n  //     } else if (divElement.mozRequestFullScreen) {\r\n  //       divElement.mozRequestFullScreen()\r\n  //     } else if (divElement.webkitRequestFullscreen) {\r\n  //       divElement.webkitRequestFullscreen()\r\n  //     } else if (divElement.msRequestFullscreen) {\r\n  //       divElement.msRequestFullscreen()\r\n  //     }\r\n  //   } else {\r\n  //     if (\r\n  //       document.fullscreenElement ||\r\n  //       document.mozFullScreenElement ||\r\n  //       document.webkitFullscreenElement ||\r\n  //       document.msFullscreenElement\r\n  //     ) {\r\n  //       if (document.exitFullscreen) {\r\n  //         document.exitFullscreen()\r\n  //       } else if (document.mozCancelFullScreen) {\r\n  //         document.mozCancelFullScreen()\r\n  //       } else if (document.webkitExitFullscreen) {\r\n  //         document.webkitExitFullscreen()\r\n  //       } else if (document.msExitFullscreen) {\r\n  //         document.msExitFullscreen()\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   setIsFullscreen(!isFullscreen)\r\n  // }\r\n\r\n  const requestFullscreen = () => {\r\n    if (element.requestFullscreen) {\r\n      element.requestFullscreen()\r\n    } else if (element.mozRequestFullScreen) {\r\n      element.mozRequestFullScreen()\r\n    } else if (element.webkitRequestFullscreen) {\r\n      element.webkitRequestFullscreen()\r\n    } else if (element.msRequestFullscreen) {\r\n      element.msRequestFullscreen()\r\n    }\r\n\r\n    setIsFullscreen(true)\r\n  }\r\n\r\n  const exitFullscreen = () => {\r\n    if (\r\n      document.fullscreenElement ||\r\n      document.mozFullScreenElement ||\r\n      document.webkitFullscreenElement ||\r\n      document.msFullscreenElement\r\n    ) {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen()\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen()\r\n      } else if (document.webkitExitFullscreen) {\r\n        document.webkitExitFullscreen()\r\n      } else if (document.msExitFullscreen) {\r\n        document.msExitFullscreen()\r\n      }\r\n    }\r\n\r\n    setIsFullscreen(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !store.pageData[storeName] ||\r\n      (store.pageData[storeName]?.data?.length === 0 &&\r\n        !store.pageData[storeName]?.isLoading)\r\n    ) {\r\n      dispatch(\r\n        getDataList({\r\n          storeName: storeName,\r\n          endpointName: endpointName,\r\n          baseUrl: \"sso\"\r\n        })\r\n      )\r\n    }\r\n\r\n    const handleKeydown = (event) => {\r\n      if (document.fullscreenElement === null) {\r\n        exitFullscreen()\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"fullscreenchange\", handleKeydown)\r\n    return () => {\r\n      document.removeEventListener(\"fullscreenchange\", handleKeydown)\r\n    }\r\n  }, [isFullscreen])\r\n\r\n  const imgs = [img1, img2, img1, img2]\r\n  {\r\n    return store.pageData[storeName]?.isLoading ? (\r\n      <Col lg={lg ?? \"12\"} xs=\"12\" md={md ?? \"12\"}>\r\n        <Card style={{ minHeight: \"200px\" }}>\r\n          <CardHeader>\r\n            <div className=\"d-flex align-items-center\">\r\n              <InsertInvitationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\r\n              <CardTitle\r\n                style={{\r\n                  padding: \"20px 20px 5px 20px\",\r\n                  fontSize: \"1.3rem\"\r\n                }}\r\n                tag=\"h4\"\r\n              >\r\n                {t(\"Announcements\")}\r\n              </CardTitle>\r\n            </div>\r\n          </CardHeader>\r\n          <UILoader blocking={true} loader={<Loader />}>\r\n            <CardBody></CardBody>\r\n          </UILoader>\r\n        </Card>\r\n      </Col>\r\n    ) : store.pageData[storeName]?.data?.length > 0 ? (\r\n      <Col lg={lg ?? \"12\"} xs=\"12\" md={md ?? \"12\"}>\r\n        <Card id=\"announcement-widget-div\" className=\"card-announcements-slide\">\r\n          <CardBody\r\n            className=\"text-center p-0\"\r\n            style={{\r\n              cursor: \"pointer\"\r\n            }}\r\n          >\r\n            <Button.Ripple\r\n              onClick={!isFullscreen ? requestFullscreen : exitFullscreen}\r\n              className=\"btn-icon btn-announcement-fs\"\r\n              color=\"flat-secondary\"\r\n            >\r\n              {!isFullscreen ? (\r\n                <Fullscreen size={16} />\r\n              ) : (\r\n                <FullscreenExit size={16} />\r\n              )}\r\n            </Button.Ripple>\r\n\r\n            <Swiper {...params}>\r\n              {store.pageData[storeName]?.data.map((slide, index) => {\r\n                return (\r\n                  <SwiperSlide key={`swiper_${slide.id}`}>\r\n                    <div\r\n                      key={index}\r\n                      style={{\r\n                        backgroundImage: `url(${\r\n                          slide.img_path ?? imgs[index] ?? img1\r\n                        })`,\r\n                        backgroundSize: \"cover\",\r\n                        backgroundPosition: \"center\",\r\n                        height: !isFullscreen ? \"300px\" : \"100vh\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        // justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        borderRadius: \"8px\"\r\n                      }}\r\n                    >\r\n                      <h3\r\n                        style={{\r\n                          color: \"white\",\r\n                          padding: \"20px 20px 5px 20px\",\r\n                          fontSize: \"1.3rem\"\r\n                        }}\r\n                      >\r\n                        {slide.title}\r\n                      </h3>\r\n                      {/* <p\r\n                        style={{\r\n                          color: \"white\",\r\n                          textAlign: \"center\",\r\n                          padding: \"20px\"\r\n                        }}\r\n                      >\r\n                        {slide.description.length > 800\r\n                          ? `${slide.description.substring(0, 800)}...`\r\n                          : slide.description}\r\n                      </p> */}\r\n                      <div\r\n                        className=\"slide-container-announcement\"\r\n                        style={{\r\n                          color: \"white\",\r\n                          textAlign: \"center\",\r\n                          padding: \"5px 20px 0 20px\",\r\n                          maxHeight: !isFullscreen ? \"228px\" : \"100vh\"\r\n                        }}\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: slide?.description\r\n                        }}\r\n                      ></div>\r\n                    </div>\r\n                    <div className=\"slide-overlay\"></div>\r\n                    <Button.Ripple\r\n                      onClick={(e) => {\r\n                        navigate(\r\n                          `/dyn_pages/_admin_/my_announcements/view/${slide.id}?refresh=1&isOrigin=true`\r\n                        )\r\n                      }}\r\n                      className=\"round btn-announcement-card\"\r\n                      color=\"secondary\"\r\n                    >\r\n                      {t(\"Read more\")}...\r\n                    </Button.Ripple>\r\n                  </SwiperSlide>\r\n                )\r\n              })}\r\n            </Swiper>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    ) : null\r\n  }\r\n}\r\n\r\nexport default WidgetAnnouncement\r\n","// ** React Imports\nimport { Fragment } from \"react\"\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\"\nimport classnames from \"classnames\"\n\n// ** Reactstrap Imports\nimport { Spinner } from \"reactstrap\"\n\n// ** Styles\nimport \"./ui-loader.scss\"\n\nconst UILoader = (props) => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag\n      className={classnames(\"ui-loader\", {\n        [className]: className,\n        show: blocking\n      })}\n    >\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className=\"overlay\" /*eslint-disable */\n            {...(blocking && overlayColor\n              ? { style: { backgroundColor: overlayColor } }\n              : {})}\n            /*eslint-enable */\n          ></div>\n          <div className=\"loader\">{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: \"div\",\n  blocking: false,\n  loader: <Spinner color=\"primary\" />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"\n}), 'Fullscreen');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z\"\n}), 'FullscreenExit');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V9h14v10zm0-12H5V5h14v2zm-2 5h-5v5h5v-5z\"\n}), 'InsertInvitationOutlined');\nexports.default = _default;"],"sourceRoot":""}