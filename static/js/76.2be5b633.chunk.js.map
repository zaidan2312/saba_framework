{"version":3,"sources":["views/apps/endpoint/modal/index.js"],"names":["ModalAddEdit","_ref","show","setShow","detailPage","formState","setFormState","_ref$currentData","currentData","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","_useState","useState","_useState2","_slicedToArray","loadingText","setLoadingText","allStore","_useState3","_useState4","dynamicComponents","setDynamicComponents","_useState5","_useState6","formDatas","_useState7","_useState8","formDatasError","setFormDatasError","_useForm","useForm","setError","control","handleSubmit","Loader","errors","_jsxs","Fragment","children","_jsx","Spinner","CardText","className","handleReset","resetSelectedData","handleChangeInputs","value","fieldName","isMulti","arguments","length","undefined","index","indexOf","splice","push","_objectSpread","_defineProperty","useEffect","componentsImport","dynamicFormRelation","dynamicForm","_loop","i","fieldLabel","path_name","replaceAll","_dynamicFormRelation$","_dynamicFormRelation$2","_allStore$storeName","_dynamicFormRelation$3","_dynamicFormRelation$4","MyComponent","lazy","concat","Label","for","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","data","map","x","selectedData","lookupMode_isM2MDefValFromGrid","_dynamicFormRelation$5","_allStore$storeName2","Input","defaultValue","onChange","e","_dynamicFormRelation$6","target","Modal","isOpen","toggle","UILoader","blocking","isLoadingAddEdit","isLoadingDetail","loader","ModalHeader","ModalBody","pageTitle","title","Form","onSubmit","storeData","sortedObject","key","JSON","stringify","countChanges","Object","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","_data$key","type","icon","postData","errorFields","assign","_formDatas$key","Row","item","_formDatas$item$field","_formDatas$item$field2","includes","Col","md","xs","Suspense","fallback","textAlign","Button","outline","onClick"],"mappings":"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","file":"static/js/76.2be5b633.chunk.js","sourcesContent":["/* eslint-disable brace-style */\r\n/* eslint-disable multiline-ternary */\r\nimport {\r\n  Fragment,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  lazy,\r\n  Suspense\r\n} from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors, sortedObject } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById,\r\n  dynamicForm\r\n} from \"../store\"\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nconst ModalAddEdit = ({\r\n  show,\r\n  setShow,\r\n  detailPage,\r\n  formState,\r\n  setFormState,\r\n  currentData = null\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const allStore = useSelector((state) => state)\r\n  const [dynamicComponents, setDynamicComponents] = useState({})\r\n  const [formDatas, setFormDatas] = useState({})\r\n  const [formDatasError, setFormDatasError] = useState({})\r\n\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n  const Loader = () => {\r\n    return (\r\n      <Fragment>\r\n        <Spinner />\r\n        <CardText className=\"mb-0 mt-1\">{t(loadingText)}...</CardText>\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  const countChanges = (data) => {\r\n    if (formState === \"edit\") {\r\n      const storeData = { ...sortedObject(allStore[storeName].selectedData) }\r\n      delete storeData[\"id\"]\r\n      for (let key in storeData) {\r\n        if (!(key in data)) delete storeData[key]\r\n      }\r\n      // console.log(JSON.stringify(sortedObject(storeData)))\r\n      // console.log(JSON.stringify(sortedObject(data)))\r\n      return (\r\n        JSON.stringify(sortedObject(storeData)) !==\r\n        JSON.stringify(sortedObject(data))\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  const updateDataToApi = () => {\r\n    if (countChanges(formDatas)) {\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field !== null && field !== \"\"\r\n        })\r\n      ) {\r\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\r\n        dispatch(putData(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            setShow(!show)\r\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n            if (detailPage) {\r\n              dispatch(getDataById(id))\r\n            }\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = () => {\r\n    if (\r\n      Object.values(formDatas).every((field) => {\r\n        return field !== null && field !== \"\"\r\n      })\r\n    ) {\r\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\r\n      dispatch(postData(formDatas)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setShow(!show)\r\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n          if (detailPage) {\r\n            dispatch(getDataById(id))\r\n          }\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      // console.log(\"ERORR\")\r\n      // console.log(formDatas)\r\n      let errorFields = Object.assign({}, formDatasError)\r\n      for (let key in formDatas) {\r\n        // console.log(key, formDatas[key])\r\n        if (formDatas[key] === null || formDatas[key]?.length === 0) {\r\n          errorFields[key] = true\r\n        }\r\n      }\r\n      // console.log(errorFields)\r\n      setFormDatasError(errorFields)\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    dispatch(resetSelectedData())\r\n  }\r\n\r\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\r\n    // console.log(value, fieldName, isMulti)\r\n    if (isMulti) {\r\n      if (formDatas[fieldName]) {\r\n        const index = formDatas[fieldName].indexOf(value)\r\n        if (index !== -1) {\r\n          formDatas[fieldName].splice(index, 1)\r\n        } else {\r\n          formDatas[fieldName].push(value)\r\n        }\r\n      } else {\r\n        formDatas[fieldName] = [value]\r\n      }\r\n    } else {\r\n      formDatas[fieldName] = value\r\n    }\r\n    // formDatasError[fieldName] = false\r\n    setFormDatasError({ ...formDatasError, [fieldName]: false })\r\n  }\r\n\r\n  useEffect(() => {\r\n    // DYNAMIC IMPORT COMPONENTS\r\n    let componentsImport = {}\r\n    // const dynamicFormRelation = dynamicForm.filter(function (el) {\r\n    //   return el.type === \"dropdown\" || el.type === \"table\"\r\n    // })\r\n\r\n    const dynamicFormRelation = dynamicForm\r\n    for (let i = 0; i < dynamicFormRelation.length; i++) {\r\n      const fieldName = dynamicFormRelation[i][\"fieldName\"]\r\n      const fieldLabel = dynamicFormRelation[i][\"fieldLabel\"]\r\n      const path_name = dynamicFormRelation[i][\"fieldName\"].replaceAll(\r\n        \"id_\",\r\n        \"\"\r\n      )\r\n\r\n      formDatas[fieldName] = null\r\n      formDatasError[fieldName] = false\r\n\r\n      ////////////INPUT - DROPDOWN\r\n      if (\r\n        dynamicFormRelation[i][\"type\"] === \"dropdown\" ||\r\n        dynamicFormRelation[i][\"type\"] === \"table\"\r\n      ) {\r\n        const MyComponent = lazy(() => import(`../../${path_name}`))\r\n        componentsImport[`${path_name}_comp`] = (\r\n          <Fragment>\r\n            <Label className=\"form-label\" for={fieldName}>\r\n              {t(fieldLabel ?? \"\")}\r\n            </Label>\r\n            <MyComponent\r\n              key={`dynInput_${fieldName}`}\r\n              lookupMode={true}\r\n              lookupMode_fieldName={fieldName}\r\n              lookupMode_dropdown={\r\n                dynamicFormRelation[i][\"type\"] === \"dropdown\"\r\n              }\r\n              lookupMode_isMulti={\r\n                dynamicFormRelation[i].isMultiSelection ?? false\r\n              }\r\n              lookupMode_onChange={handleChangeInputs}\r\n              lookupMode_defaultValue={\r\n                dynamicFormRelation[i]?.isM2MDefValFromGrid\r\n                  ? allStore[storeName].data.map((x) => x[fieldName])\r\n                  : allStore[storeName]?.selectedData\r\n                  ? allStore[storeName].selectedData[fieldName]\r\n                  : \"\"\r\n              }\r\n              lookupMode_isM2MDefValFromGrid={\r\n                dynamicFormRelation[i]?.isM2MDefValFromGrid ?? false\r\n              }\r\n            />\r\n          </Fragment>\r\n        )\r\n      }\r\n\r\n      ////////////INPUT - TEXT\r\n      else {\r\n        componentsImport[`${path_name}_comp`] = (\r\n          <Fragment>\r\n            <Label className=\"form-label\" for={fieldName}>\r\n              {t(fieldLabel ?? \"\")}\r\n            </Label>\r\n            <Input\r\n              key={`dynInput_${fieldName}`}\r\n              defaultValue={\r\n                dynamicFormRelation[i]?.isM2MDefValFromGrid\r\n                  ? allStore[storeName].data.map((x) => x[fieldName])\r\n                  : allStore[storeName]?.selectedData\r\n                  ? allStore[storeName].selectedData[fieldName]\r\n                  : \"\"\r\n              }\r\n              onChange={(e) =>\r\n                handleChangeInputs(\r\n                  e.target.value,\r\n                  fieldName,\r\n                  dynamicFormRelation[i].isMultiSelection ?? false\r\n                )\r\n              }\r\n              // className={\r\n              //   !formDatasError[fieldName]\r\n              //     ? \"form-control is-invalid\"\r\n              //     : \"form-control\"\r\n              // }\r\n              id={`dynInput_${fieldName}`}\r\n            />\r\n          </Fragment>\r\n        )\r\n      }\r\n    }\r\n\r\n    setDynamicComponents(componentsImport)\r\n  }, [])\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={show}\r\n      toggle={() => {\r\n        handleReset()\r\n        setShow(!show)\r\n      }}\r\n      className=\"modal-dialog-centered modal-lg\"\r\n    >\r\n      <UILoader\r\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\r\n        loader={<Loader />}\r\n      >\r\n        <ModalHeader\r\n          className=\"bg-transparent\"\r\n          toggle={() => {\r\n            handleReset()\r\n            setShow(!show)\r\n          }}\r\n        ></ModalHeader>\r\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\r\n          <div className=\"text-center mb-2\">\r\n            <h2 className=\"mb-1\">\r\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add Sub\")} {t(pageTitle)}\r\n            </h2>\r\n            <p className=\"mb-1\">\r\n              {t(\"Child for \")} {currentData ? t(currentData.title) : \"\"}\r\n            </p>\r\n          </div>\r\n          <Form\r\n            onSubmit={\r\n              formState === \"edit\"\r\n                ? handleSubmit(updateDataToApi)\r\n                : handleSubmit(postDataToApi)\r\n            }\r\n          >\r\n            <Row className=\"gy-1 pt-75\">\r\n              {dynamicForm.map((item, index) => {\r\n                const path_name = item.fieldName.replaceAll(\"id_\", \"\")\r\n                if ([\"dropdown\", \"table\"].includes(item.type)) {\r\n                  if (item.type === \"table\") {\r\n                    return (\r\n                      <Col key={path_name} md={12} xs={12}>\r\n                        <Suspense fallback={<div>Loading...</div>}>\r\n                          <div\r\n                            className={\r\n                              !formDatasError[item.fieldName]\r\n                                ? \"dynamicForm_input\"\r\n                                : \"dynamicForm_input dynamicForm_input_invalid\"\r\n                            }\r\n                          >\r\n                            {dynamicComponents[`${path_name}_comp`]}\r\n                            {item?.isM2MDefValFromGrid &&\r\n                              formDatas[item.fieldName] && (\r\n                                <div\r\n                                  style={{ textAlign: \"right\" }}\r\n                                  className=\"text-primary\"\r\n                                >\r\n                                  {formDatas[item.fieldName]?.length}{\" \"}\r\n                                  {t(item.fieldLabel)} {t(\"Selected\")}\r\n                                </div>\r\n                              )}\r\n                          </div>\r\n                        </Suspense>\r\n                      </Col>\r\n                    )\r\n                  } else {\r\n                    return (\r\n                      <Col key={path_name} md={12} xs={12}>\r\n                        <Suspense fallback={<div>Loading...</div>}>\r\n                          <div\r\n                            className={\r\n                              !formDatasError[item.fieldName]\r\n                                ? \"\"\r\n                                : \"dynamicForm_input_invalid\"\r\n                            }\r\n                          >\r\n                            {dynamicComponents[`${path_name}_comp`]}\r\n                            {item?.isM2MDefValFromGrid &&\r\n                              formDatas[item.fieldName] && (\r\n                                <div\r\n                                  style={{ textAlign: \"right\" }}\r\n                                  className=\"text-primary\"\r\n                                >\r\n                                  {formDatas[item.fieldName]?.length}{\" \"}\r\n                                  {t(item.fieldLabel)} {t(\"Selected\")}\r\n                                </div>\r\n                              )}\r\n                          </div>\r\n                        </Suspense>\r\n                      </Col>\r\n                    )\r\n                  }\r\n                } else {\r\n                  return (\r\n                    <Col key={path_name} md={12} xs={12}>\r\n                      <div\r\n                        className={\r\n                          !formDatasError[item.fieldName]\r\n                            ? \"\"\r\n                            : \"dynamicForm_input_invalid\"\r\n                        }\r\n                      >\r\n                        {dynamicComponents[`${path_name}_comp`]}\r\n                      </div>\r\n                    </Col>\r\n                  )\r\n                }\r\n              })}\r\n\r\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n                <Button\r\n                  type=\"reset\"\r\n                  color=\"secondary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    setFormState(\"add\")\r\n                    setShow(false)\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </ModalBody>\r\n      </UILoader>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ModalAddEdit\r\n"],"sourceRoot":""}