{"version":3,"sources":["views/apps/permission/modal/index.js","views/apps/permission/Form.js"],"names":["ModalAddEdit","_ref","show","setShow","detailPage","formState","setFormState","t","useTranslation","dispatch","useParams","id","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","_useState","useState","_useState2","_slicedToArray","setLoadingText","sortedObject","unordered","Object","keys","sort","reduce","obj","key","handleReset","resetSelectedData","_jsx","Modal","isOpen","toggle","className","children","_jsxs","UILoader","blocking","isLoadingAddEdit","isLoadingDetail","loader","Loader","ModalHeader","ModalBody","pageTitle","FormAddEdit","updateDataToApi","data","storeData","_objectSpread","selectedData","JSON","stringify","countChanges","values","every","field","concat","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","error","payload","message","danger","_data$key","length","setError","type","icon","postDataToApi","postData","_data$key2","_store$selectedData$t","_store$selectedData","_store$selectedData$d","_store$selectedData2","_store$selectedData$s","_store$selectedData3","_useForm","useForm","control","handleSubmit","errors","Form","onSubmit","Row","Col","md","xs","Label","for","Controller","defaultValue","title","name","render","_ref2","Input","invalid","description","_ref3","subject","_ref4","Button","outline","onClick"],"mappings":"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","file":"static/js/74.29777541.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"../store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport FormAddEdit from \"../Form\"\r\n\r\nconst ModalAddEdit = ({\r\n  show,\r\n  setShow,\r\n  detailPage,\r\n  formState,\r\n  setFormState\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  // const [tgl1, setTgl1] = useState(null)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  // const {\r\n  //   control,\r\n  //   setError,\r\n  //   handleSubmit,\r\n  //   formState: { errors }\r\n  // } = useForm({})\r\n\r\n  function sortedObject(unordered) {\r\n    return Object.keys(unordered)\r\n      .sort()\r\n      .reduce((obj, key) => {\r\n        obj[key] = unordered[key]\r\n        return obj\r\n      }, {})\r\n  }\r\n\r\n  const countChanges = (data) => {\r\n    if (formState === \"edit\") {\r\n      const storeData = { ...sortedObject(store.selectedData) }\r\n      delete storeData[\"id\"]\r\n      for (let key in storeData) {\r\n        if (!(key in data)) delete storeData[key]\r\n      }\r\n      // console.log(JSON.stringify(sortedObject(storeData)))\r\n      // console.log(JSON.stringify(sortedObject(data)))\r\n      return (\r\n        JSON.stringify(sortedObject(storeData)) !==\r\n        JSON.stringify(sortedObject(data))\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  const updateDataToApi = (data) => {\r\n    if (countChanges(data)) {\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field !== null && field !== \"\"\r\n        })\r\n      ) {\r\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\r\n        dispatch(putData(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            setShow(!show)\r\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = (data) => {\r\n    if (\r\n      Object.values(data).every((field) => {\r\n        return field !== null && field !== \"\"\r\n      })\r\n    ) {\r\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\r\n      dispatch(postData(data)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setShow(!show)\r\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key] !== null && data[key]?.length === 0) {\r\n          setError(key, {\r\n            type: \"manual\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleReset() {\r\n    dispatch(resetSelectedData())\r\n    setFormState(\"add\")\r\n    return setShow(false)\r\n  }\r\n\r\n  return !detailPage ? (\r\n    <Modal\r\n      isOpen={show}\r\n      toggle={() => {\r\n        handleReset()\r\n        setShow(!show)\r\n      }}\r\n      className=\"modal-dialog-centered modal-lg\"\r\n    >\r\n      <UILoader\r\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\r\n        loader={<Loader />}\r\n      >\r\n        <ModalHeader\r\n          className=\"bg-transparent\"\r\n          toggle={() => {\r\n            handleReset()\r\n            setShow(!show)\r\n          }}\r\n        ></ModalHeader>\r\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\r\n          <div className=\"text-center mb-2\">\r\n            <h2 className=\"mb-1\">\r\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\r\n            </h2>\r\n          </div>\r\n          <FormAddEdit\r\n            formState={formState}\r\n            updateDataToApi={updateDataToApi}\r\n            postDataToApi={postDataToApi}\r\n            handleReset={handleReset}\r\n          />\r\n          {/* <Form\r\n            onSubmit={\r\n              formState === \"edit\"\r\n                ? handleSubmit(updateDataToApi)\r\n                : handleSubmit(postDataToApi)\r\n            }\r\n          >\r\n            <Row className=\"gy-1 pt-75\">\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"title\">\r\n                  {t(\"Title\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.title ?? \"\"}\r\n                  control={control}\r\n                  id=\"title\"\r\n                  name=\"title\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.title\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"title\"\r\n                      invalid={errors.title && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"description\">\r\n                  {t(\"Description\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.description ?? \"\"}\r\n                  control={control}\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.description\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"description\"\r\n                      invalid={errors.description && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"subject\">\r\n                  {t(\"Subject\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.subject ?? \"\"}\r\n                  control={control}\r\n                  id=\"subject\"\r\n                  name=\"subject\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.subject\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"subject\"\r\n                      invalid={errors.subject && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n                <Button\r\n                  type=\"reset\"\r\n                  color=\"secondary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    setFormState(\"add\")\r\n                    setShow(false)\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form> */}\r\n        </ModalBody>\r\n      </UILoader>\r\n    </Modal>\r\n  ) : null\r\n}\r\n\r\nexport default ModalAddEdit\r\n","/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"./store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nconst FormAddEdit = ({\r\n  formState,\r\n  updateDataToApi,\r\n  postDataToApi,\r\n  handleReset\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={\r\n        formState === \"edit\"\r\n          ? handleSubmit(updateDataToApi)\r\n          : handleSubmit(postDataToApi)\r\n      }\r\n    >\r\n      <Row className=\"gy-1 pt-75\">\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"title\">\r\n            {t(\"Title\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.title ?? \"\"}\r\n            control={control}\r\n            id=\"title\"\r\n            name=\"title\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.title ? \"form-control is-invalid\" : \"form-control\"\r\n                }\r\n                id=\"title\"\r\n                invalid={errors.title && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"description\">\r\n            {t(\"Description\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.description ?? \"\"}\r\n            control={control}\r\n            id=\"description\"\r\n            name=\"description\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.description\r\n                    ? \"form-control is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                id=\"description\"\r\n                invalid={errors.description && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"subject\">\r\n            {t(\"Subject\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.subject ?? \"\"}\r\n            control={control}\r\n            id=\"subject\"\r\n            name=\"subject\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.subject ? \"form-control is-invalid\" : \"form-control\"\r\n                }\r\n                id=\"subject\"\r\n                invalid={errors.subject && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n          <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n            {t(\"Submit\")}\r\n          </Button>\r\n          <Button type=\"reset\" color=\"secondary\" outline onClick={handleReset}>\r\n            {t(\"Cancel\")}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default FormAddEdit\r\n"],"sourceRoot":""}