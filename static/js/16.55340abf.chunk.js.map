{"version":3,"sources":["views/apps/permission/modal/index.js","views/apps/permission/Form.js","views/apps/permission/Table.js","../../src/mounts.js","../../src/index.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","t","useTranslation","dispatch","useParams","id","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","useState","setLoadingText","sortedObject","unordered","Object","keys","sort","reduce","obj","key","handleReset","resetSelectedData","isOpen","toggle","className","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","updateDataToApi","data","storeData","selectedData","JSON","stringify","countChanges","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","error","payload","message","danger","length","setError","type","icon","postDataToApi","postData","FormAddEdit","useForm","control","handleSubmit","errors","onSubmit","md","xs","for","defaultValue","title","name","render","invalid","description","subject","outline","onClick","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","CustomHeader","handleAddEdit","handlePerPage","rowsPerPage","handleFilter","searchTerm","handleFiltersChange","selectedRow","handleDeleteSelected","filtersCustomAdd","ability","AbilityContext","allStore","dynamicFilterComponents","setDynamicFilterComponents","dynamicFilterDatas","handleChangeInputs","value","fieldName","isMulti","index","indexOf","splice","push","useEffect","componentsImport","i","dynamicColumnsFilter","path_name","replaceAll","MyComponent","lazy","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","map","x","lookupMode_isM2MDefValFromGrid","lg","htmlFor","onChange","width","e","target","item","fallback","can","sessionStorage","getItem","List","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","setSort","setRowsPerPage","selectedRows","setSelectedRows","filtersCustom","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","showModal","setShowModal","navigate","useNavigate","location","useLocation","colorsAssignee","Viewer","Editor","Manager","Administrator","rowData","pathname","r","detailFromGrid","setDataById","getDataById","handleCloseModal","revivalBack","handleDelete","a","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","countSelectedCopy","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","conditionalRowStyles","when","row","Array","isArray","classNames","columns","dynamicColumns","column","columnName","sortField","center","wrap","grow","sortable","selector","cell","renderCell","assignedTo","assignee","isLastBadge","to","classnames","pill","marginTop","replace","appsName","menuCount","endpointCount","handleEdit","tableColumns","useMemo","isLoading","sx","bgcolor","dark","light","animation","height","getAlwaysGrid","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","count","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","deleteSelection","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","some","k","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","par_name","neutralizeBack","mounts","getter","swal","noop","extractReactParams","reactParams","otherParams","mountKeys","mount","React","domElement","ReactDOM","unrender","_main","this","__mountedDomElements","__params","superDidOpen","superDidDestroy","didOpen","popup","didDestroy","update","argsToParams","args","params","forEach","ParentSwal"],"mappings":"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","file":"static/js/16.55340abf.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"../store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport FormAddEdit from \"../Form\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  // const [tgl1, setTgl1] = useState(null)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  // const {\n  //   control,\n  //   setError,\n  //   handleSubmit,\n  //   formState: { errors }\n  // } = useForm({})\n\n  function sortedObject(unordered) {\n    return Object.keys(unordered)\n      .sort()\n      .reduce((obj, key) => {\n        obj[key] = unordered[key]\n        return obj\n      }, {})\n  }\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(store.selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = (data) => {\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = (data) => {\n    if (\n      Object.values(data).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(data)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  function handleReset() {\n    dispatch(resetSelectedData())\n    setFormState(\"add\")\n    return setShow(false)\n  }\n\n  return !detailPage ? (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <FormAddEdit\n            formState={formState}\n            updateDataToApi={updateDataToApi}\n            postDataToApi={postDataToApi}\n            handleReset={handleReset}\n          />\n          {/* <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"title\">\n                  {t(\"Title\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.title ?? \"\"}\n                  control={control}\n                  id=\"title\"\n                  name=\"title\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.title\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"title\"\n                      invalid={errors.title && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"description\">\n                  {t(\"Description\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.description ?? \"\"}\n                  control={control}\n                  id=\"description\"\n                  name=\"description\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.description\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"description\"\n                      invalid={errors.description && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"subject\">\n                  {t(\"Subject\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.subject ?? \"\"}\n                  control={control}\n                  id=\"subject\"\n                  name=\"subject\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.subject\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"subject\"\n                      invalid={errors.subject && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form> */}\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  ) : null\n}\n\nexport default ModalAddEdit\n","/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"./store\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst FormAddEdit = ({\n  formState,\n  updateDataToApi,\n  postDataToApi,\n  handleReset\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  return (\n    <Form\n      onSubmit={\n        formState === \"edit\"\n          ? handleSubmit(updateDataToApi)\n          : handleSubmit(postDataToApi)\n      }\n    >\n      <Row className=\"gy-1 pt-75\">\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"title\">\n            {t(\"Title\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.title ?? \"\"}\n            control={control}\n            id=\"title\"\n            name=\"title\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.title ? \"form-control is-invalid\" : \"form-control\"\n                }\n                id=\"title\"\n                invalid={errors.title && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"description\">\n            {t(\"Description\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.description ?? \"\"}\n            control={control}\n            id=\"description\"\n            name=\"description\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.description\n                    ? \"form-control is-invalid\"\n                    : \"form-control\"\n                }\n                id=\"description\"\n                invalid={errors.description && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"subject\">\n            {t(\"Subject\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.subject ?? \"\"}\n            control={control}\n            id=\"subject\"\n            name=\"subject\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.subject ? \"form-control is-invalid\" : \"form-control\"\n                }\n                id=\"subject\"\n                invalid={errors.subject && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col xs={12} className=\"text-center mt-2 pt-50\">\n          <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n            {t(\"Submit\")}\n          </Button>\n          <Button type=\"reset\" color=\"secondary\" outline onClick={handleReset}>\n            {t(\"Cancel\")}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nexport default FormAddEdit\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable multiline-ternary */\nimport {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n  forwardRef,\n  lazy,\n  Suspense\n} from \"react\"\nimport classnames from \"classnames\"\nimport { Link, useNavigate, useLocation } from \"react-router-dom\"\nimport { useTranslation } from \"react-i18next\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport ModalAddEdit from \"./modal\"\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\nimport {\n  storeName,\n  pageTitle,\n  serverSideGrid,\n  detailFromGrid,\n  deleteSelection,\n  getApiAfterPut,\n  getApiAfterPost,\n  getApiAfterDelete,\n  getSummarysData,\n  detailPage,\n  getAlwaysGrid,\n  getDataList,\n  getDataById,\n  setDataById,\n  resetSelectedData,\n  deleteData,\n  deleteSelectedRowData,\n  dynamicColumnsFilter\n} from \"./store\"\nimport { getInvoice } from \"../../invoices/store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport ReactPaginate from \"react-paginate\"\nimport DataTable from \"react-data-table-component\"\nimport debounce from \"lodash.debounce\"\nimport {\n  ChevronDown,\n  Share,\n  Printer,\n  FileText,\n  File,\n  Grid,\n  Copy,\n  Slack,\n  User,\n  Settings,\n  Database,\n  Edit2,\n  MoreVertical,\n  Trash2,\n  Archive,\n  Eye,\n  CheckCircle,\n  CheckSquare,\n  Check,\n  Square\n} from \"react-feather\"\n\nimport { getUserData } from \"@utils\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport toast from \"react-hot-toast\"\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  Label,\n  Button,\n  CardBody,\n  CardTitle,\n  CardHeader,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  Badge,\n  UncontrolledTooltip,\n  CardText\n} from \"reactstrap\"\n\nimport \"@styles/react/libs/react-select/_react-select.scss\"\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { Skeleton } from \"@mui/material\"\nimport Moment from \"moment\"\n\nconst MySwal = withReactContent(Swal)\nconst BootstrapCheckbox = forwardRef((props, ref) => (\n  <div className=\"form-check\">\n    <Input type=\"checkbox\" ref={ref} {...props} />\n  </div>\n))\n\n// ** Table Header\nconst CustomHeader = ({\n  store,\n  handleAddEdit,\n  handlePerPage,\n  rowsPerPage,\n  handleFilter,\n  searchTerm,\n  selectedRow,\n  handleDeleteSelected,\n  handleFiltersChange,\n  filtersCustomAdd\n}) => {\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const allStore = useSelector((state) => state)\n  const [dynamicFilterComponents, setDynamicFilterComponents] = useState({})\n  const [dynamicFilterDatas, setDynamicFilterDatas] = useState({})\n\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\n    fieldName = `filter_${fieldName}`\n    if (isMulti) {\n      if (dynamicFilterDatas[fieldName]) {\n        const index = dynamicFilterDatas[fieldName].indexOf(value)\n        if (index !== -1) {\n          dynamicFilterDatas[fieldName].splice(index, 1)\n        } else {\n          dynamicFilterDatas[fieldName].push(value)\n        }\n      } else {\n        dynamicFilterDatas[fieldName] = [value]\n      }\n    } else {\n      dynamicFilterDatas[fieldName] = value\n    }\n    return handleFiltersChange(dynamicFilterDatas[fieldName], fieldName)\n  }\n\n  useEffect(() => {\n    // DYNAMIC IMPORT COMPONENTS\n    let componentsImport = {}\n    for (let i = 0; i < dynamicColumnsFilter.length; i++) {\n      const fieldName = dynamicColumnsFilter[i][\"fieldName\"]\n      const path_name = dynamicColumnsFilter[i][\"fieldName\"].replaceAll(\n        \"id_\",\n        \"\"\n      )\n\n      dynamicFilterDatas[`filter_${fieldName}`] = null\n      const MyComponent = lazy(() => import(`../${path_name}`))\n      componentsImport[`${path_name}_comp`] = (\n        <MyComponent\n          lookupMode={true}\n          lookupMode_fieldName={fieldName}\n          lookupMode_dropdown={true}\n          lookupMode_isMulti={dynamicColumnsFilter[i].isMultiSelection ?? false}\n          lookupMode_onChange={handleChangeInputs}\n          lookupMode_defaultValue={\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid\n              ? allStore[storeName].data.map((x) => x[fieldName])\n              : allStore[storeName]?.selectedData\n              ? allStore[storeName].selectedData[fieldName]\n              : \"\"\n          }\n          lookupMode_isM2MDefValFromGrid={\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid ?? false\n          }\n        />\n      )\n    }\n\n    setDynamicFilterComponents(componentsImport)\n  }, [dispatch, dynamicFilterDatas])\n\n  return (\n    <Row className=\"text-nowrap w-100 my-75 g-0 permission-header\">\n      <Col xs={12} lg={4} className=\"d-flex align-items-center\">\n        <div className=\"d-flex align-items-center justify-content-center justify-content-lg-start\">\n          <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\n          <Input\n            className=\"mx-50\"\n            type=\"select\"\n            id=\"rows-per-page\"\n            value={rowsPerPage}\n            onChange={handlePerPage}\n            style={{ width: \"5rem\" }}\n          >\n            <option value=\"10\">10</option>\n            <option value=\"25\">25</option>\n            <option value=\"50\">50</option>\n          </Input>\n          <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\n        </div>\n      </Col>\n      <Col xs={12} lg={8}>\n        <div className=\"d-flex align-items-center justify-content-lg-end justify-content-start flex-md-nowrap flex-wrap mt-lg-0 mt-1\">\n          <div className=\"d-flex align-items-center me-1\">\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\n              {t(\"Search\")}:\n            </label>\n            <Input\n              id=\"search-invoice\"\n              className=\"ms-50 w-100\"\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => handleFilter(e.target.value)}\n            />\n          </div>\n          {/* <div className=\"mt-50 width-200 me-1 mt-sm-0 mt-1\">\n            <Input\n              type=\"select\"\n              name=\"select\"\n              // value={role}\n              onChange={(e) => handleAssignedToChange(e.target.value)}\n            >\n              <option value=\"\">Select Role</option>\n              <option value=\"administrator\">Administrator</option>\n              <option value=\"manager\">Manager</option>\n              <option value=\"user\">User</option>\n              <option value=\"support\">Support</option>\n              <option value=\"restricted-user\">Restricted User</option>\n            </Input>\n          </div> */}\n          {dynamicColumnsFilter.map((item, index) => {\n            const path_name = item.fieldName.replaceAll(\"id_\", \"\")\n            return (\n              <div\n                key={path_name}\n                className=\"mt-50 width-300 me-1 mt-sm-0 mt-1\"\n              >\n                <Suspense fallback={<div>Loading...</div>}>\n                  {dynamicFilterComponents[`${path_name}_comp`]}\n                </Suspense>\n              </div>\n            )\n          })}\n\n          {ability.can(\"post\", sessionStorage.getItem(\"current_page_perm\")) ? (\n            <Button\n              className=\"add-permission mt-sm-0 mt-1\"\n              color=\"primary\"\n              // onClick={toggleSidebar}\n              onClick={handleAddEdit}\n            >\n              {t(\"Add New\")} {t(pageTitle)}\n            </Button>\n          ) : null}\n        </div>\n      </Col>\n    </Row>\n  )\n}\n\nconst List = ({ filtersCustomAdd }) => {\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n\n  const { t } = useTranslation()\n  const ability = useContext(AbilityContext)\n\n  const { colors } = useContext(ThemeColors)\n  const [sort_dir, setSortDir] = useState(\"desc\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sort, setSort] = useState(\"id\")\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [selectedRows, setSelectedRows] = useState([])\n\n  const [filtersCustom, setFiltersCustom] = useState(filtersCustomAdd ?? {})\n\n  const [toggleCleared, setToggleCleared] = useState(false)\n\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const [showModal, setShowModal] = useState(false)\n  const [formState, setFormState] = useState(null)\n  const navigate = useNavigate()\n  const location = useLocation()\n  const colorsAssignee = {\n    Viewer: \"light-info\",\n    Editor: \"light-success\",\n    Manager: \"light-warning\",\n    Administrator: \"light-primary\",\n    \"restricted-user\": \"light-danger\"\n  }\n\n  const handleAddEdit = (rowData) => {\n    // console.log(rowData.id)\n    if (!rowData.id) {\n      setFormState(\"edit\")\n    } else {\n      setFormState(\"add\")\n    }\n    //\n    if (!detailPage) {\n      if (!detailFromGrid) {\n        setLoadingText(\n          `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n        )\n        setLoading(true)\n        dispatch(getDataById(rowData.id)).then((res) => {\n          if (res.meta.requestStatus === \"rejected\") {\n            setLoading(false)\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          } else {\n            setLoading(false)\n            setShowModal(true)\n          }\n        })\n      } else {\n        setLoadingText(\n          `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\n        )\n        setLoading(true)\n        dispatch(setDataById(rowData)).then(() => {\n          setLoading(false)\n          setShowModal(true)\n        })\n      }\n    } else {\n      if (rowData.id) {\n        navigate(`${location.pathname}/edit/${rowData.id}`)\n      } else {\n        dispatch(resetSelectedData({})).then((r) => {\n          navigate(`${location.pathname}/add`)\n        })\n      }\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    revivalBack()\n  }\n\n  const toggleSidebar = () => {\n    // console.log(\"here\")\n    setFormState(\"add\")\n    setSidebarOpen(!sidebarOpen)\n    setShowModal(!showModal)\n    neutralizeBack(handleCloseModal)\n  }\n\n  const handleDelete = async (id) => {\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\n      setLoading(true)\n      dispatch(deleteData(id)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setLoading(false)\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  const handleDeleteSelected = async () => {\n    const countSelectedCopy = selectedRows.length\n    const result = await MySwal.fire({\n      title: `${t(\"Are you sure?\")}`,\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\n        \"selected data. Deleted data cannot be recovered\"\n      )}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\n        pageTitle\n      )}!`,\n      cancelButtonText: `${t(\"Cancel\")}`,\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: \"btn btn-outline-danger ms-1\"\n      },\n      buttonsStyling: false\n    })\n    if (result.value) {\n      setLoadingText(\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\n      )\n      setLoading(true)\n      const values = selectedRows.map((a) => a.id)\n      // console.log(values)\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setSelectedRows([])\n          setToggleCleared(!toggleCleared)\n          setLoading(false)\n          toast.success(\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\n            {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            }\n          )\n        } else if (res.meta.requestStatus === \"rejected\") {\n          setLoading(false)\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /////PAGINATION SERVERSIDE\n  const handlePagination = (page) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: rowsPerPage,\n        page: page.selected + 1,\n        ...filtersCustom\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  const handlePerPage = (e) => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        length: value,\n        page: currentPage,\n        ...filtersCustom\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  const handleDebounceFn = (inputValue) => {\n    dispatch(\n      getDataList({\n        sort_dir,\n        search: inputValue,\n        sort,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\n\n  const handleFilter = (event) => {\n    setSearchTerm(event)\n    debounceFn(event)\n  }\n\n  const handleFiltersChange = (value, par_name) => {\n    filtersCustom[par_name] = value\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const handleSort = (column, sortDirection) => {\n    setSortDir(sortDirection)\n    setSort(column.sortField)\n    dispatch(\n      getDataList({\n        sort_dir,\n        sort,\n        search: searchTerm,\n        page: currentPage,\n        length: rowsPerPage,\n        ...filtersCustom\n      })\n    )\n  }\n\n  const handleRowSelected = useCallback((state) => {\n    setSelectedRows(state.selectedRows)\n  }, [])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        pageCount={count || 1}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        containerClassName={\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\n        }\n      />\n    )\n  }\n\n  const conditionalRowStyles = [\n    {\n      when: (row) => Array.isArray(row),\n      classNames: [\"d-table\"]\n    }\n  ]\n\n  const columns = [\n    ...store.dynamicColumns.map((column) => ({\n      name: column.columnName,\n      sortField: column.fieldName,\n      center: false,\n      wrap: true,\n      grow: 0,\n      sortable: true,\n      width: \"250px\",\n      selector: (row) => row[column.fieldName],\n      cell: (row) => renderCell(row, column)\n    })),\n    {\n      name: t(\"Title\"),\n      center: false,\n      sortable: true,\n      wrap: true,\n      width: \"350px\",\n      sortField: \"title\",\n      selector: (row) => row.title,\n      cell: (row) => {\n        const title = row.title,\n          description = row.description ? row.description : \"\"\n        return (\n          <div className=\"d-flex justify-content-left align-items-center\">\n            <div className=\"d-flex flex-column\">\n              <h6 className=\"user-name text-truncate mb-0\">{title}</h6>\n              <small className=\"text-truncate text-muted mb-0\">\n                {description}\n              </small>\n            </div>\n          </div>\n        )\n      }\n    },\n\n    // {\n    //   name: t(\"Subject\"),\n    //   center: false,\n    //   sortable: true,\n    //   // minWidth: \"400px\",\n    //   sortField: \"subject\",\n    //   selector: (row) => row.subject,\n    //   cell: (row) => row.subject\n    // },\n    {\n      name: t(\"Assigned To\"),\n      sortable: false,\n      wrap: false,\n      grow: 2,\n      width: \"300px\",\n      cell: ({ assignedTo }) => {\n        if (assignedTo) {\n          return assignedTo.map((assignee, index) => {\n            const isLastBadge = assignedTo[assignedTo.length - 1] === index\n            return (\n              <Link\n                key={`${assignee}-${index}`}\n                to=\"/apps/roles\"\n                className={classnames({ \"me-50\": !isLastBadge })}\n              >\n                <Badge\n                  pill\n                  color={colorsAssignee[assignee]}\n                  style={{\n                    marginTop: \"2px\"\n                  }}\n                  className=\"text-capitalize\"\n                >\n                  {assignee?.replace(\"-\", \" \")}\n                </Badge>\n              </Link>\n            )\n          })\n        } else {\n          return null\n        }\n      }\n    },\n    {\n      name: t(\"Apps\"),\n      center: false,\n      sortable: false,\n      wrap: true,\n      width: \"200px\",\n      cell: ({ appsName }) => {\n        if (appsName) {\n          return appsName.map((assignee, index) => {\n            const isLastBadge = appsName[appsName.length - 1] === index\n            return (\n              <Link\n                key={`${assignee}-${index}`}\n                to=\"/apps/app\"\n                className={classnames({ \"me-50\": !isLastBadge })}\n              >\n                <Badge\n                  pill\n                  color={colorsAssignee[assignee]}\n                  className=\"text-capitalize\"\n                >\n                  {assignee.replace(\"-\", \" \")}\n                </Badge>\n              </Link>\n            )\n          })\n        } else {\n          return null\n        }\n      }\n    },\n    {\n      name: t(\"Resources\"),\n      center: false,\n      sortable: false,\n      width: \"160px\",\n      selector: (row) => row.menuCount,\n      cell: (row) => {\n        return (\n          <>\n            <Link\n              key=\"table-field-count-menu\"\n              to=\"/apps/permission_menu\"\n              className=\"me-50\"\n            >\n              <Badge pill color=\"light-info\" className=\"text-capitalize\">\n                {row.menuCount} {t(\"Menu\")}\n              </Badge>\n            </Link>\n            <Link\n              key=\"table-field-count-endpoint\"\n              to=\"/apps/permission_endpoint\"\n            >\n              <Badge pill color=\"light-warning\" className=\"text-capitalize\">\n                {row.endpointCount} {t(\"Endpoint\")}\n              </Badge>\n            </Link>\n          </>\n        )\n      }\n    },\n    {\n      name: t(\"Actions\"),\n      center: true,\n      width: \"140px\",\n      cell: (row) => (\n        <GlobalActionsTable\n          row={row}\n          handleDelete={handleDelete}\n          handleEdit={handleAddEdit}\n        />\n      )\n    }\n  ]\n\n  const tableColumns = useMemo(\n    () =>\n      store.isLoading\n        ? columns.map((column) => ({\n            name: t(column.name),\n            ...column,\n            sortable: false,\n            cell: (row) =>\n              column.name === \"Actions\" ? (\n                <>\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    className=\"ms-2 me-1\"\n                    width={30}\n                    height={40}\n                  />\n                  <Skeleton\n                    sx={{ bgcolor: colors.dark.light }}\n                    animation=\"wave\"\n                    width={30}\n                    height={40}\n                  />\n                </>\n              ) : (\n                <Skeleton\n                  sx={{ bgcolor: colors.dark.light }}\n                  animation=\"wave\"\n                  width=\"100%\"\n                  height={40}\n                />\n              )\n          }))\n        : columns.map((column) => ({\n            name: t(column.name),\n            ...column\n          })),\n    [store.isLoading, columns]\n  )\n\n  const dataToRender = () => {\n    const filters = {\n      search: searchTerm\n    }\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n    if (!store.isLoading) {\n      if (store.data.length > 0) {\n        return store.data\n      } else if (store.data.length === 0 && isFiltered) {\n        return []\n      } else {\n        // console.log(store.allData)\n        // return store.allData.slice(0, rowsPerPage)\n      }\n    } else {\n      return Array(10).fill({})\n    }\n  }\n\n  useEffect(() => {\n    if ((store.data.length === 0 || getAlwaysGrid) && !store.isLoading) {\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\n      dispatch(\n        getDataList({\n          sort_dir,\n          sort,\n          search: searchTerm,\n          page: currentPage,\n          length: rowsPerPage,\n          ...filtersCustom\n        })\n      )\n    }\n    // console.log(store)\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\n\n  return (\n    <Fragment>\n      <UILoader blocking={loading} loader={<Loader />}>\n        <Card className=\"overflow-hidden\">\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\n            <DataTable\n              noHeader\n              subHeader\n              sortServer\n              responsive\n              pagination\n              paginationServer\n              paginationTotalRows={store.total}\n              paginationComponent={CustomPagination}\n              selectableRows={deleteSelection}\n              onSelectedRowsChange={handleRowSelected}\n              selectableRowsHighlight\n              clearSelectedRows={toggleCleared}\n              selectableRowsComponent={BootstrapCheckbox}\n              noDataComponent={<NoDataDisplay />}\n              style={{ \"min-height\": \"400px\" }}\n              highlightOnHover\n              pointerOnHover\n              columns={tableColumns}\n              conditionalRowStyles={conditionalRowStyles}\n              onSort={handleSort}\n              sortIcon={<ChevronDown />}\n              className=\"react-dataTable\"\n              data={dataToRender()}\n              subHeaderComponent={\n                <CustomHeader\n                  store={store}\n                  searchTerm={searchTerm}\n                  rowsPerPage={rowsPerPage}\n                  handleFilter={handleFilter}\n                  handlePerPage={handlePerPage}\n                  handleAddEdit={handleAddEdit}\n                  selectedRow={selectedRows}\n                  handleDeleteSelected={handleDeleteSelected}\n                  handleFiltersChange={handleFiltersChange}\n                  filtersCustomAdd={filtersCustomAdd}\n                />\n              }\n            />\n          </div>\n        </Card>\n\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\n      </UILoader>\n\n      {showModal && (\n        <ModalAddEdit\n          formState={formState}\n          show={showModal}\n          setShow={toggleSidebar}\n          detailPage={detailPage}\n          setFormState={setFormState}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default List\n","export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n"],"sourceRoot":""}