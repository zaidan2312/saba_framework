{"version":3,"sources":["views/apps/permission/modal/index.js","views/apps/permission/Form.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","t","useTranslation","dispatch","useParams","id","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","useState","setLoadingText","sortedObject","unordered","Object","keys","sort","reduce","obj","key","handleReset","resetSelectedData","isOpen","toggle","className","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","updateDataToApi","data","storeData","selectedData","JSON","stringify","countChanges","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","error","payload","message","danger","length","setError","type","icon","postDataToApi","postData","FormAddEdit","useForm","control","handleSubmit","errors","onSubmit","md","xs","for","defaultValue","title","name","render","invalid","description","subject","outline","onClick"],"mappings":"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","file":"static/js/73.aa40c60c.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"../store\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport FormAddEdit from \"../Form\"\n\nconst ModalAddEdit = ({\n  show,\n  setShow,\n  detailPage,\n  formState,\n  setFormState\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  // const [tgl1, setTgl1] = useState(null)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  // const {\n  //   control,\n  //   setError,\n  //   handleSubmit,\n  //   formState: { errors }\n  // } = useForm({})\n\n  function sortedObject(unordered) {\n    return Object.keys(unordered)\n      .sort()\n      .reduce((obj, key) => {\n        obj[key] = unordered[key]\n        return obj\n      }, {})\n  }\n\n  const countChanges = (data) => {\n    if (formState === \"edit\") {\n      const storeData = { ...sortedObject(store.selectedData) }\n      delete storeData[\"id\"]\n      for (let key in storeData) {\n        if (!(key in data)) delete storeData[key]\n      }\n      // console.log(JSON.stringify(sortedObject(storeData)))\n      // console.log(JSON.stringify(sortedObject(data)))\n      return (\n        JSON.stringify(sortedObject(storeData)) !==\n        JSON.stringify(sortedObject(data))\n      )\n    } else {\n      return true\n    }\n  }\n\n  const updateDataToApi = (data) => {\n    if (countChanges(data)) {\n      if (\n        Object.values(data).every((field) => {\n          return field !== null && field !== \"\"\n        })\n      ) {\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\n        dispatch(putData(data)).then((res) => {\n          // console.log(res)\n          if (res.meta.requestStatus === \"fulfilled\") {\n            setShow(!show)\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\n              style: {\n                padding: \"16px\",\n                color: colors.success.main,\n                border: `1px solid ${colors.success.main}`\n              },\n              iconTheme: {\n                primary: colors.success.main\n              }\n            })\n          } else if (res.meta.requestStatus === \"rejected\") {\n            toast.error(res.payload.message, {\n              style: {\n                padding: \"16px\",\n                color: colors.danger.main,\n                border: `1px solid ${colors.danger.main}`\n              },\n              iconTheme: {\n                primary: colors.danger.main\n              }\n            })\n          }\n        })\n      } else {\n        for (const key in data) {\n          if (data[key]?.length === 0) {\n            setError(key, {\n              type: \"manual\"\n            })\n          }\n        }\n      }\n    } else {\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\n    }\n  }\n\n  const postDataToApi = (data) => {\n    if (\n      Object.values(data).every((field) => {\n        return field !== null && field !== \"\"\n      })\n    ) {\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\n      dispatch(postData(data)).then((res) => {\n        // console.log(res)\n        if (res.meta.requestStatus === \"fulfilled\") {\n          setShow(!show)\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\n            style: {\n              padding: \"16px\",\n              color: colors.success.main,\n              border: `1px solid ${colors.success.main}`\n            },\n            iconTheme: {\n              primary: colors.success.main\n            }\n          })\n        } else if (res.meta.requestStatus === \"rejected\") {\n          toast.error(res.payload.message, {\n            style: {\n              padding: \"16px\",\n              color: colors.danger.main,\n              border: `1px solid ${colors.danger.main}`\n            },\n            iconTheme: {\n              primary: colors.danger.main\n            }\n          })\n        }\n      })\n    } else {\n      for (const key in data) {\n        if (data[key] !== null && data[key]?.length === 0) {\n          setError(key, {\n            type: \"manual\"\n          })\n        }\n      }\n    }\n  }\n\n  function handleReset() {\n    dispatch(resetSelectedData())\n    setFormState(\"add\")\n    return setShow(false)\n  }\n\n  return !detailPage ? (\n    <Modal\n      isOpen={show}\n      toggle={() => {\n        handleReset()\n        setShow(!show)\n      }}\n      className=\"modal-dialog-centered modal-lg\"\n    >\n      <UILoader\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\n        loader={<Loader />}\n      >\n        <ModalHeader\n          className=\"bg-transparent\"\n          toggle={() => {\n            handleReset()\n            setShow(!show)\n          }}\n        ></ModalHeader>\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\n          <div className=\"text-center mb-2\">\n            <h2 className=\"mb-1\">\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\n            </h2>\n          </div>\n          <FormAddEdit\n            formState={formState}\n            updateDataToApi={updateDataToApi}\n            postDataToApi={postDataToApi}\n            handleReset={handleReset}\n          />\n          {/* <Form\n            onSubmit={\n              formState === \"edit\"\n                ? handleSubmit(updateDataToApi)\n                : handleSubmit(postDataToApi)\n            }\n          >\n            <Row className=\"gy-1 pt-75\">\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"title\">\n                  {t(\"Title\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.title ?? \"\"}\n                  control={control}\n                  id=\"title\"\n                  name=\"title\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.title\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"title\"\n                      invalid={errors.title && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"description\">\n                  {t(\"Description\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.description ?? \"\"}\n                  control={control}\n                  id=\"description\"\n                  name=\"description\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.description\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"description\"\n                      invalid={errors.description && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col md={12} xs={12}>\n                <Label className=\"form-label\" for=\"subject\">\n                  {t(\"Subject\")}\n                  <span className=\"text-danger\">*</span>\n                </Label>\n                <Controller\n                  defaultValue={store.selectedData?.subject ?? \"\"}\n                  control={control}\n                  id=\"subject\"\n                  name=\"subject\"\n                  render={({ field }) => (\n                    <Input\n                      {...field}\n                      className={\n                        errors.subject\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                      id=\"subject\"\n                      invalid={errors.subject && true}\n                    />\n                  )}\n                />\n              </Col>\n\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n                  {t(\"Submit\")}\n                </Button>\n                <Button\n                  type=\"reset\"\n                  color=\"secondary\"\n                  outline\n                  onClick={() => {\n                    handleReset()\n                    setFormState(\"add\")\n                    setShow(false)\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n              </Col>\n            </Row>\n          </Form> */}\n        </ModalBody>\n      </UILoader>\n    </Modal>\n  ) : null\n}\n\nexport default ModalAddEdit\n","/* eslint-disable multiline-ternary */\nimport { Fragment, useContext, useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport toast from \"react-hot-toast\"\nimport Cleave from \"cleave.js/react\"\nimport {\n  Row,\n  Col,\n  Form,\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  CardText\n} from \"reactstrap\"\nimport { useTranslation } from \"react-i18next\"\nimport UILoader from \"@components/ui-loader\"\nimport Spinner from \"@components/spinner/Loading-spinner\"\nimport \"moment/locale/id\"\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\nimport { selectThemeColors } from \"@utils\"\nimport Select from \"react-select\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport {\n  storeName,\n  pageTitle,\n  postData,\n  putData,\n  resetSelectedData,\n  getDataById\n} from \"./store\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nconst FormAddEdit = ({\n  formState,\n  updateDataToApi,\n  postDataToApi,\n  handleReset\n}) => {\n  const { t } = useTranslation()\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state[storeName])\n  const { colors } = useContext(ThemeColors)\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({})\n\n  return (\n    <Form\n      onSubmit={\n        formState === \"edit\"\n          ? handleSubmit(updateDataToApi)\n          : handleSubmit(postDataToApi)\n      }\n    >\n      <Row className=\"gy-1 pt-75\">\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"title\">\n            {t(\"Title\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.title ?? \"\"}\n            control={control}\n            id=\"title\"\n            name=\"title\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.title ? \"form-control is-invalid\" : \"form-control\"\n                }\n                id=\"title\"\n                invalid={errors.title && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"description\">\n            {t(\"Description\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.description ?? \"\"}\n            control={control}\n            id=\"description\"\n            name=\"description\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.description\n                    ? \"form-control is-invalid\"\n                    : \"form-control\"\n                }\n                id=\"description\"\n                invalid={errors.description && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col md={12} xs={12}>\n          <Label className=\"form-label\" for=\"subject\">\n            {t(\"Subject\")}\n            <span className=\"text-danger\">*</span>\n          </Label>\n          <Controller\n            defaultValue={store.selectedData?.subject ?? \"\"}\n            control={control}\n            id=\"subject\"\n            name=\"subject\"\n            render={({ field }) => (\n              <Input\n                {...field}\n                className={\n                  errors.subject ? \"form-control is-invalid\" : \"form-control\"\n                }\n                id=\"subject\"\n                invalid={errors.subject && true}\n              />\n            )}\n          />\n        </Col>\n\n        <Col xs={12} className=\"text-center mt-2 pt-50\">\n          <Button type=\"submit\" className=\"me-1\" color=\"primary\">\n            {t(\"Submit\")}\n          </Button>\n          <Button type=\"reset\" color=\"secondary\" outline onClick={handleReset}>\n            {t(\"Cancel\")}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nexport default FormAddEdit\n"],"sourceRoot":""}