{"version":3,"sources":["utility/generateForm/relationsCrudMenu.js","shared/dynamic_pages/detail/index.js"],"names":["RelationsCrudMenu","relationsCrudData","pageTitle","useParams","moduleId","relPageId","pageId","id","pageType","useState","storeName","store","useSelector","state","dynamicStore","t","useTranslation","navigate","useNavigate","location","useLocation","params","setSectionTitle","handleClick","e","item","preventDefault","pathname","replaceAll","replace","data","length","color","outline","caret","renderIcon","pageAttributes","menuIcon","className","sectionTitle","style","overflowY","maxHeight","tag","active","onClick","divider","map","index","renderLinkMenu","Ripple","console","log","DynamicPage","lazy","DetailPage","relPageType","relId","isOrigin","useSearchParams","searchParams","pageAttr","setPageAttr","setStoreName","dispatch","useDispatch","useContext","ThemeColors","colors","loading","setLoading","loadingPostPut","setLoadingPostPut","loadingText","setLoadingText","setActive","toggleTab","tab","useLastMenuTabs","lastMenuTabs","setLastMenuTabs","loadingFirst","setLoadingFirst","defValuesAdd","setDefValuesAdd","errorToast","res","errorFieldsMsg","payload","error","errors","errorFields","errorx","response","message","toast","padding","danger","main","border","iconTheme","primary","succesToast","type","text","success","hasRelationCrud","hasRelationsCrud","crudOpt","dynamicForm","some","obj","relationsCrud","hasRelationsCrud_onTabs","children","childx","tabContent","childx2","hasRelationsCrud_onColumns","child","reloadOtherPage","afterEditReloadOtherPage","setTimeout","url","store_to_reset","pageData","resetData","afterAddReloadOtherPage","afterAddReloadOtherDetailPage","selectedData","current_id","getDataById","endpointName","redirectOtherPage","defaultUrl","result","resultCount","operator","redirectPageCondition","afterEditRedirectPageCondition","afterAddRedirectPageCondition","it","fieldName","fieldValue","includes","getDepthValue","value","valueType","newfieldValue","Date","newValue","eval","undefined","redirectPageAttr","afterEditRedirectPage","afterAddRedirectPage","defaultPayload","baseUrl","callback_page","window","href","updateDataToApi","url1","slice","lastIndexOf","url2","gridTheme","putDataTree","then","meta","requestStatus","getApiSummaryAfterPut","getSummaryData","catch","putData","postDataToApi","a","saveAsState","postData","generatedData","generatedId","detailFromGrid","setSelectedData","rowData","resss","getApiSummaryAfterPost","postDataToApiMulti","postDataMulti","handleFormSubmit","postAfterPostData","repeater","handleReset","resetSelectedData","get","findIndex","navLink","handleResetRel","storeMenu","my_menu","getPageAttr","sourceType","dynamicPartUrl","dataMyMenu","find","routePath","currentMenuData","fetch","axiosSso","useJwt","ssoAxiosInterceptor","storeNameFix","setStorePageAttributes","ress","initDetailData","finally","_","timestamp","getTime","origin","default","json","isLoadingDetail","parseInt","fixId","endpointNameDetail","getFieldTitle","detailPageFieldTitle","Array","isArray","titleFixArr","i","paramValue","parseStrAndField","push","join","detailPageFieldTitleSeparator","getHeaderTitle","values","checkKeyPresenceInArray","key","Object","keys","getDefaultValuesAdd","defValues","search","split","p","pSplit","getParAlias","queryStrAlias","reduce","isNaN","formFillWithFilter","lastParamsKeys","item_det","index_det","useEffect","Prism","highlightAll","storeDeveloper","developer","setEditModeJsonState","isDiscard","setEditModeJson","JSON","stringify","editorValid","setEditorValid","tempJsonAttr","setTempJsonAttr","handleEditorChange","event","setEditModeJsonAttr","handleEditorValidation","markers","saveJson","changedJson","parse","x","renderPage","xl","lg","xs","order","md","size","sx","bgcolor","dark","light","animation","width","height","blocking","overlayColor","loader","detailPageFieldTitleHeader","detailPageFieldSubHeader","target","defaultFormValues","editForm","initialPageId","initialPageAttr","filter"],"mappings":"gNA4KeA,IA7IW,SAAC,GAAsC,IAAD,kBAAnCC,EAAmC,EAAnCA,kBAAmBC,EAAgB,EAAhBA,UAC9C,EAAsDC,cAA9CC,EAAR,EAAQA,SAAgCC,GAAxC,EAAkBC,OAAlB,EAA0BC,GAA1B,EAA8BC,SAA9B,EAAwCH,WACxC,EAAkCI,mBAChCL,EAAQ,UAAMA,EAAN,YAAkBC,GAAlB,UAAmCA,IAD7C,mBAAOK,EAAP,KAGMC,GAHN,KAGcC,aAAY,SAACC,GAAD,OAAWA,EAAMC,iBACnCC,EAAMC,cAAND,EACR,EAA4BN,mBAAS,KAArC,mBAOMQ,GAPN,UAOiBC,eACXC,EAAWC,cACXC,EAASlB,cACf,EAAwCM,qBAAxC,mBAAqBa,GAArB,WAEMC,EAAc,SAACC,EAAGC,GACtBD,EAAEE,iBAEFJ,EAAgBG,EAAKvB,WACrBe,EAAS,GAAD,OACHE,EAASQ,SAASC,WAAlB,WAAiCP,EAAOhB,WAAa,IADlD,YAEJoB,EAAKnB,QAEP,CAAEuB,SAAS,KAyBf,OACE,cAAC,WAAD,WACoB,OAAjB5B,QAAiB,IAAjBA,GAAA,UAAAA,EAAmB6B,YAAnB,eAAyBC,QAAS,EACjC,eAAC,IAAD,WACE,eAAC,IAAD,CAAgBC,MAAM,UAAUC,SAAO,EAACC,OAAK,EAA7C,UACGC,qBAAU,oBACTxB,EAAMyB,eAAe1B,UADZ,aACT,EAAiC2B,gBADxB,QACoC,gBAC7C,oBACA,IAEF,sBAAMC,UAAU,kCAAhB,SACGvB,EAAC,8BACAJ,EAAMyB,eAAe1B,UADrB,aACA,EAAiCR,iBADjC,eAEED,QAFF,IAEEA,OAFF,EAEEA,EAAmBsC,oBAFrB,QAGE,mBAKR,eAAC,IAAD,CACEC,MAAO,CACLC,UAAW,OACXC,UAAW,QAEbC,IAAI,MALN,UAUE,eAAC,IAAD,CACEC,QAASvB,EAAOhB,UAChBsC,IAAI,IACJE,QAAS,SAACrB,GACRA,EAAEE,iBACFJ,EAAgBpB,GAChBe,EAAS,GAAD,OACHE,EAASQ,SAASC,WAAlB,WAAiCP,EAAOhB,WAAa,KACxD,CAAEwB,SAAS,KARjB,UAYGM,qBAAW,gBAAiB,yBAA0B,GAAI,IAC3D,sBAAMG,UAAU,eAAhB,SAAgCvB,EAAEb,QAEpC,cAAC,IAAD,CAAc4C,SAAO,IAzBvB,OA2BG7C,QA3BH,IA2BGA,GA3BH,UA2BGA,EAAmB6B,YA3BtB,aA2BG,EAAyBiB,KAAI,SAACtB,EAAMuB,GACnC,OApEW,SAACvB,GACtB,OAME,cALA,CAKC,IAAD,CACEmB,OAAQvB,EAAOhB,YAAcoB,EAAKnB,OAElCuC,QAAS,SAACrB,GAAD,OAAOD,EAAYC,EAAGC,IAE/BkB,IAAI,IALN,UAOGR,qBAAU,OAACV,QAAD,IAACA,OAAD,EAACA,EAAMY,SAAU,oBAAqB,GAAI,IACrD,sBAAMC,UAAU,eAAhB,SAAgCvB,EAAEU,EAAKvB,eARzC,eAEeuB,EAAKnB,SA2DL2C,CAAexB,YAI1BJ,EAAOhB,aAAP,OAAqBJ,QAArB,IAAqBA,OAArB,EAAqBA,EAAmB6B,KAAK,GAAGxB,QAClD,eAAC,IAAO4C,OAAR,CACEjB,SAAO,EACPY,QAAS,SAACrB,GACRA,EAAEE,iBACFyB,QAAQC,IAAI/B,EAAOhB,WACnBiB,EAAgBpB,GAChBe,EAAS,GAAD,OACHE,EAASQ,SAASC,WAAlB,WAAiCP,EAAOhB,WAAa,KACxD,CAAEwB,SAAS,KAGfG,MAAM,YAXR,UAaGG,qBAAW,sBAAuB,oBAAqB,IACxD,sBAAMG,UAAU,qBAAhB,SAAsCvB,EAAE,aAG1C,cAAC,WAAD,UACE,eAAC,IAAD,CACE8B,QAAS,SAACrB,GAAD,OAAOD,EAAYC,EAAD,OAAIvB,QAAJ,IAAIA,OAAJ,EAAIA,EAAmB6B,KAAK,KACvDE,MAAM,iBAFR,UAIGG,qBAAU,iBACTlC,QADS,IACTA,OADS,EACTA,EAAmB6B,KAAK,GAAGO,gBADlB,QAC8B,gBACvC,oBACA,IAEF,sBAAMC,UAAU,qBAAhB,SACGvB,EAAC,OAACd,QAAD,IAACA,GAAD,UAACA,EAAmB6B,KAAK,UAAzB,aAAC,EAA4B5B,sB,wuHC5GvCmD,YAAcC,kDAAK,kBAAM,8DAEzBC,WAAa,SAAbA,aAAoB,IAAD,wCACvB,gBAAcvC,wDAAND,EAAR,gBAAQA,EACR,WASIZ,2DARFC,SADF,WACEA,SACAE,OAFF,WAEEA,OACAC,GAHF,WAGEA,GACAC,SAJF,WAIEA,SACAH,UALF,WAKEA,UACAmD,YANF,WAMEA,YACAC,MAPF,WAOEA,MACAC,SARF,WAQEA,SAEF,iBAAuBC,2DAAvB,0JAAOC,aAAP,qBACA,UAAgCnD,qDAAS,MAAzC,4IAAOoD,SAAP,cAAiBC,YAAjB,cACA,WAAkCrD,qDAChCL,SAAQ,UAAMA,SAAN,YAAkBE,QAAlB,UAAgCA,SAD1C,6IAAOI,UAAP,cAAkBqD,aAAlB,cAGMC,SAAWC,sDACXtD,MAAQC,qDAAY,SAACC,GAAD,OAAWA,EAAMC,gBAE3C,YAAmBoD,uDAAWC,iEAAtBC,OAAR,YAAQA,OACR,WAA8B3D,sDAAS,GAAvC,6IAAO4D,QAAP,cAAgBC,WAAhB,cACA,WAA4C7D,sDAAS,GAArD,6IAAO8D,eAAP,cAAuBC,kBAAvB,cACA,WAAsC/D,qDAAS,eAA/C,8IAAOgE,YAAP,eAAoBC,eAApB,eACMzD,SAAWC,2DACXC,SAAWC,2DACjB,YAA4BX,qDAAS,KAArC,+IAAOmC,OAAP,eAAe+B,UAAf,eACMC,UAAY,SAACC,GACbjC,SAAWiC,GACbF,UAAUE,IAId,iBAA0CC,iEAAlCC,aAAR,iBAAQA,aAAcC,gBAAtB,iBAAsBA,gBAEtB,YAAwCvE,sDAAS,GAAjD,+IAAOwE,aAAP,eAAqBC,gBAArB,eACA,YAAwCzE,qDAAS,IAAjD,+IAAO0E,aAAP,eAAqBC,gBAArB,eACMC,WAAa,SAACC,GAAS,IAAD,QACtBC,EAAiB,GACrB,UAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAKE,eAAT,iBAAI,EAAcC,aAAlB,OAAI,EAAqBC,OAAQ,CAAC,IAAD,IACzBC,EAAW,OAAGL,QAAH,IAAGA,GAAH,UAAGA,EAAKE,eAAR,iBAAG,EAAcC,aAAjB,aAAG,EAAqBC,OACzC,IAAK,IAAIE,KAAT,OAAmBN,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAKE,eAAxB,iBAAmB,EAAcC,aAAjC,aAAmB,EAAqBC,OAAQ,CAAC,IAAD,IAC9CH,EAAc,UAAMK,EAAN,cAAkBL,EAAlB,cAAsCI,EAAYC,GAAlD,WAGX,CAAC,IAAD,UACLL,EAAc,iBACZD,QADY,IACZA,GADY,UACZA,EAAKE,eADO,iBACZ,EAAcC,aADF,iBACZ,EAAqBI,gBADT,iBACZ,EAA+B/D,YADnB,aACZ,EAAqCgE,eADzB,QACoC,iBAEpD,OAAOC,gDAAMN,MAAN,oBACFH,EAAIE,eADF,iBACF,EAAaC,aADX,aACF,EAAoBK,QADlB,kBACmCP,GACxC,CACE/C,MAAO,CACLwD,QAAS,OACThE,MAAOoC,OAAO6B,OAAOC,KACrBC,OAAO,aAAD,OAAe/B,OAAO6B,OAAOC,OAErCE,UAAW,CACTC,QAASjC,OAAO6B,OAAOC,SAMzBI,YAAc,WAAmB,IAAlBC,EAAiB,uDAAV,MACpBC,EAAgB,QAATD,EAAiB,UAAY,UAC1C,OAAOR,gDAAMU,QAAN,UACF1F,EAAE,gBAAD,OAAiByF,IADhB,YAC2BzF,EAAE8C,SAAS3D,YAC3C,CACEsC,MAAO,CACLwD,QAAS,OACThE,MAAOoC,OAAOqC,QAAQP,KACtBC,OAAO,aAAD,OAAe/B,OAAOqC,QAAQP,OAEtCE,UAAW,CACTC,QAASjC,OAAOqC,QAAQP,SAMhC,SAASQ,kBAAmB,IAAD,kBACrBC,EAAgB,OAAG9C,eAAH,IAAGA,UAAH,UAAGA,SAAU+C,eAAb,iBAAG,EAAmB9E,YAAtB,iBAAG,EAAyB+E,mBAA5B,aAAG,EAAsCC,MAC3D,SAACC,GAAD,MAAuB,mBAAX,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKR,QAAL,OAAiCQ,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAKC,kBAG7CC,EAAuB,OAAGpD,eAAH,IAAGA,UAAH,UAAGA,SAAU+C,eAAb,iBAAG,EAAmB9E,YAAtB,iBAAG,EAAyB+E,mBAA5B,aAAG,EAAsCC,MAClE,SAACrF,GAC4B,IAAD,EAA1B,GAAkB,SAAdA,EAAK8E,OACC,OAAJ9E,QAAI,IAAJA,KAAMyF,WAAgB,OAAJzF,QAAI,IAAJA,GAAA,UAAAA,EAAMyF,gBAAN,eAAgBnF,QAAS,GAE7C,OAAON,EAAKyF,SAASnE,KAAI,SAACoE,GAAY,IAAD,EACnC,GAAU,OAANA,QAAM,IAANA,KAAQC,aAAoB,OAAND,QAAM,IAANA,GAAA,UAAAA,EAAQC,kBAAR,eAAoBrF,QAAS,EAErD,OAAOoF,EAAOC,WAAWN,MAAK,SAACO,GAK7B,MACmB,kBAAjBA,EAAQd,OAAR,OAAoCc,QAApC,IAAoCA,OAApC,EAAoCA,EAASL,qBAOzD,OAAO,KAIPM,EAA0B,OAAGzD,eAAH,IAAGA,UAAH,UAAGA,SAAU+C,eAAb,iBAAG,EAAmB9E,YAAtB,iBAAG,EAAyB+E,mBAA5B,aAAG,EAAsCC,MACrE,SAACrF,GAC+B,IAAD,EAA7B,GAAkB,YAAdA,EAAK8E,OACC,OAAJ9E,QAAI,IAAJA,KAAMyF,WAAgB,OAAJzF,QAAI,IAAJA,GAAA,UAAAA,EAAMyF,gBAAN,eAAgBnF,QAAS,GAC7C,OAAON,EAAKyF,SAASJ,MACnB,SAACS,GAAD,MAA0B,kBAAfA,EAAMhB,OAAN,OAAkCgB,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAOP,kBAI1D,OAAO,KASX,OACEL,GAAoBM,GAA2BK,EAInD,IAAME,gBAAkB,SAACjB,GACD,IAAD,EAArB,GAAa,SAATA,EACF,OAAI1C,eAAJ,IAAIA,UAAJ,UAAIA,SAAU+C,eAAd,OAAI,EAAmBa,0BACrBC,YAAW,WAAO,IAAD,IACP,OAAR7D,eAAQ,IAARA,UAAA,UAAAA,SAAU+C,eAAV,mBAAmBa,gCAAnB,SAA6C1E,KAAI,SAAC4E,GAAS,IAAD,EAClDC,EAAiBD,EAAI/F,WAAW,IAAK,KAC3C,UAAIjB,MAAMkH,SAASD,UAAnB,OAAI,EAAgC9F,MAClCkC,SAAS8D,+CAAUF,SAGtB,UAEA,GAAa,QAATrB,EAAgB,CAAC,IAAD,IAY6B,IAAtD,GAXA,OAAI1C,eAAJ,IAAIA,UAAJ,UAAIA,SAAU+C,eAAd,OAAI,EAAmBmB,yBACrBL,YAAW,WAAO,IAAD,IACP,OAAR7D,eAAQ,IAARA,UAAA,UAAAA,SAAU+C,eAAV,mBAAmBmB,+BAAnB,SAA4ChF,KAAI,SAAC4E,GAAS,IAAD,EACjDC,EAAiBD,EAAI/F,WAAW,IAAK,KAC3C,UAAIjB,MAAMkH,SAASD,UAAnB,OAAI,EAAgC9F,MAClCkC,SAAS8D,+CAAUF,SAGtB,KAGL,OAAI/D,eAAJ,IAAIA,UAAJ,UAAIA,SAAU+C,eAAd,OAAI,EAAmBoB,8BACb,OAARnE,eAAQ,IAARA,UAAA,UAAAA,SAAU+C,eAAV,mBAAmBoB,qCAAnB,SAAkDjF,KAAI,SAAC4E,GAAS,IAAD,EACvDC,EAAiBD,EAAI/F,WAAW,IAAK,KAC3C,aAAIjB,MAAMkH,SAASD,UAAnB,OAAI,EAAgCK,aAAc,CAAC,IAAD,MAC1CC,EAAU,UAAGvH,MAAMkH,SAASD,GAAgBK,oBAAlC,aAAG,EAA6C1H,GAChEyD,SACEmE,+CAAY,CACV5H,GAAI2H,EACJxH,UAAWkH,EACXQ,aAAY,UACVzH,MAAMyB,eAAewF,UADX,iBACV,EAAsChB,eAD5B,aACV,EAA+CwB,sBASzDC,kBAAoB,SAApBA,kBAAqB9B,KAAMf,QAAS8C,YAAgB,IAAD,gFACnDC,QAAS,EACTC,YAAc,EACdC,UAAW,EAEXC,sBACO,SAATnC,KAAA,OACI1C,eADJ,IACIA,UADJ,4BACIA,SAAU+C,eADd,+BACI,oBAAmB+B,+BADvB,OAEI9E,eAFJ,IAEIA,UAFJ,4BAEIA,SAAU+C,eAFd,+BAEI,oBAAmBgC,8BACrBF,wBACmB,OAArBA,4BAAqB,IAArBA,6CAAuB3F,KAAI,SAAC8F,IAE1B,IAAIC,UAAS,OAAGD,SAAH,IAAGA,QAAH,EAAGA,GAAIC,UAChBC,WAAaD,UAAUE,SAAS,KAChCC,+CAAczD,QAASsD,UAAW,MAClCtD,QAAQsD,WAEZ,GAAM,OAAFD,SAAE,IAAFA,OAAIJ,UAAJ,OAAgBI,SAAhB,IAAgBA,OAAIK,MAEtB,GADAT,UAAW,EACW,cAAhB,OAAFI,SAAE,IAAFA,QAAA,EAAAA,GAAIM,YAA8C,UAAhB,OAAFN,SAAE,IAAFA,QAAA,EAAAA,GAAIM,WAAsB,CAC5D,IAAMC,cAAgB,IAAIC,KAAKN,YAE3BO,SAAW,KAEbA,SADgB,WAAZ,OAAFT,SAAE,IAAFA,QAAA,EAAAA,GAAIK,OACK,IAAIG,KAEJ,IAAIA,KAAJ,OAASR,SAAT,IAASA,QAAT,EAASA,GAAIK,OAIxBX,OADmB,OAAf,OAAFM,SAAE,IAAFA,QAAA,EAAAA,GAAIJ,UACGW,cAAgBE,SACC,QAAf,OAAFT,SAAE,IAAFA,QAAA,EAAAA,GAAIJ,UACJW,eAAiBE,SACA,OAAf,OAAFT,SAAE,IAAFA,QAAA,EAAAA,GAAIJ,UACJW,cAAgBE,SACC,QAAf,OAAFT,SAAE,IAAFA,QAAA,EAAAA,GAAIJ,UACJW,eAAiBE,SAEjBF,gBAAkBE,aAEF,aAAhB,OAAFT,SAAE,IAAFA,QAAA,EAAAA,GAAIM,WACQ,SAAf,OAAFN,SAAE,IAAFA,QAAA,EAAAA,GAAIJ,UACNF,OAASQ,cAAU,OAAKF,SAAL,IAAKA,QAAL,EAAKA,GAAIK,OACF,SAAf,OAAFL,SAAE,IAAFA,QAAA,EAAAA,GAAIJ,YACbF,OAASQ,cAAU,OAAKF,SAAL,IAAKA,QAAL,EAAKA,GAAIK,QAG9BX,OAASgB,KAAK,IAAD,OAAKR,WAAL,mBAAmBF,SAAnB,IAAmBA,QAAnB,EAAmBA,GAAIJ,SAAvB,mBAAmCI,SAAnC,IAAmCA,QAAnC,EAAmCA,GAAIK,MAAvC,WAGfV,cACAD,QAEkB,OAAfQ,iBACgBS,IAAfT,YACe,cAAfA,YACe,KAAfA,eAKV,IAAIU,iBACO,SAATlD,KAAA,OACI1C,eADJ,IACIA,UADJ,4BACIA,SAAU+C,eADd,+BACI,oBAAmB8C,sBADvB,OAEI7F,eAFJ,IAEIA,UAFJ,4BAEIA,SAAU+C,eAFd,+BAEI,oBAAmB+C,qBAEzB,GAAKpB,QAKH,GAAIkB,iBACF,OAAOxI,SAAS,cAAD,OAAewI,wBALhC,GAAInB,WACF,OAAOrH,SAASqH,aAShBsB,eAAiB,CACrBlJ,UAAWA,UACX0H,aAAY,OAAEvE,eAAF,IAAEA,UAAF,4BAAEA,SAAU+C,eAAZ,+BAAE,oBAAmBwB,aACjCyB,QAAO,OAAEhG,eAAF,IAAEA,UAAF,4BAAEA,SAAU+C,eAAZ,+BAAE,oBAAmBiD,QAC5BC,cAAeC,OAAO5I,SAAS6I,MAG3BC,gBAAkB,SAACnI,GAAoC,IAAD,EAC1DA,EAAI,2OAAQA,GAAS8H,gBACrB,IAAMM,EAAO/I,SAASQ,SAASwI,MAAM,EAAGhJ,SAASQ,SAASyI,YAAY,MAChEC,EAAOH,EAAKC,MAAM,EAAGD,EAAKE,YAAY,MAE5C1F,eAAe,GAAD,OACT3D,EAAE,YADO,YACQA,EAAE8C,SAAS3D,WADnB,YACiCa,EAAE,UADnC,UAGdyD,mBAAmBD,gBACkB,cAAzB,OAARV,eAAQ,IAARA,UAAA,UAAAA,SAAU+C,eAAV,eAAmB0D,WACrBtG,SAASuG,+CAAYzI,IAClB0I,MAAK,SAAClF,GAEL,GADAd,mBAAmBD,gBACY,cAA3Be,EAAImF,KAAKC,cAA+B,CAAC,IAAD,EACI,IAA9C,UAAI7G,eAAJ,IAAIA,UAAJ,UAAIA,SAAU+C,eAAd,OAAI,EAAmB+D,sBACrB3G,SACE4G,+CAAe,CACbxC,aAAY,OAAEvE,eAAF,IAAEA,UAAF,UAAEA,SAAU+C,eAAZ,aAAE,EAAmBwB,aACjC1H,UAAWA,UACXmJ,QAAO,OAAEhG,eAAF,IAAEA,UAAF,UAAEA,SAAU+C,eAAZ,aAAE,EAAmBiD,WAIlCrC,gBAAgB,QAEhBa,kBAAkB,OAAQvG,EAAMuI,GAEhC/D,YAAY,YACwB,aAA3BhB,EAAImF,KAAKC,eAClBrF,WAAWC,MAGduF,OAAM,SAACpF,GACNtC,QAAQsC,MAAMA,GACdJ,WAAWI,MAGfzB,SAAS8G,+CAAQhJ,IACd0I,MAAK,SAAClF,GAGL,GADAd,mBAAkB,GACa,cAA3Bc,EAAImF,KAAKC,cAA+B,CAAC,IAAD,EAeI,IAA9C,UAAI7G,eAAJ,IAAIA,UAAJ,UAAIA,SAAU+C,eAAd,OAAI,EAAmB+D,sBACrB3G,SACE4G,+CAAe,CACbxC,aAAY,OAAEvE,eAAF,IAAEA,UAAF,UAAEA,SAAU+C,eAAZ,aAAE,EAAmBwB,aACjC1H,UAAWA,UACXmJ,QAAO,OAAEhG,eAAF,IAAEA,UAAF,UAAEA,SAAU+C,eAAZ,aAAE,EAAmBiD,WAIlCrC,gBAAgB,QAEhBa,kBAAkB,OAAQvG,EAAMuI,GAChC/D,YAAY,YAEwB,aAA3BhB,EAAImF,KAAKC,eAClBrF,WAAWC,MAGduF,OAAM,SAACpF,GACNtC,QAAQsC,MAAMA,GACdJ,WAAWI,OAKbsF,cAAa,0PAAG,WACpBjJ,GADoB,qIAAAkJ,EAAA,qFAEA,KACpBC,EAHoB,gCAKpBnJ,EAAI,2OAAQA,GAAS8H,gBACjBM,EAAO/I,SAASQ,SAASwI,MAAM,EAAGhJ,SAASQ,SAASyI,YAAY,MACpE1F,eAAe,GAAD,OAAI3D,EAAE,YAAN,YAAqB8C,SAAS3D,YAC5CsE,mBAAkB,GAClBR,SAASkH,+CAASpJ,IACf0I,MAAK,SAAClF,GAEL,GADAd,mBAAkB,GACa,cAA3Bc,EAAImF,KAAKC,cAA+B,CAAC,IAAD,EAmCK,IA7B/C,GAAIhE,oBAAsBuE,EAAa,CAAC,IAAD,IAGpB,EAFbE,EAAa,OAAG7F,QAAH,IAAGA,GAAH,UAAGA,EAAKE,eAAR,iBAAG,EAAc1D,YAAjB,aAAG,EAAoBA,KACpCsJ,EAAW,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAe5K,GACjC,GAAI6K,EACE,OAACvH,eAAD,IAACA,UAAD,UAACA,SAAU+C,eAAX,OAAC,EAAmByE,gBAMtBnB,EAAI,UAAM/I,SAASQ,SAASwI,MAC1B,EACAhJ,SAASQ,SAASyI,YAAY,MAF5B,iBAGMgB,GACVpH,SACEsH,+CAAgB,CACdC,QAASJ,EACTzK,UAAWA,aAEb8J,MAAK,SAACgB,QAdRtB,EAAI,UAAM/I,SAASQ,SAASwI,MAC1B,EACAhJ,SAASQ,SAASyI,YAAY,MAF5B,iBAGMgB,EAHN,iBAwBV,GALIH,IACFf,EAAOA,EAAKtI,WAAW,QAAS,IAAIA,WAAW,OAAQ,KAGzD0E,YAAY,OACZ,OAAIzC,eAAJ,IAAIA,UAAJ,UAAIA,SAAU+C,eAAd,OAAI,EAAmB6E,uBACrBzH,SACE4G,+CAAe,CACbxC,aAAY,OAAEvE,eAAF,IAAEA,UAAF,UAAEA,SAAU+C,eAAZ,aAAE,EAAmBwB,aACjC1H,UAAWA,UACXmJ,QAAO,OAAEhG,eAAF,IAAEA,UAAF,UAAEA,SAAU+C,eAAZ,aAAE,EAAmBiD,WAIlCrC,gBAAgB,OAEhBvG,SAASiJ,OAC2B,aAA3B5E,EAAImF,KAAKC,eAClBrF,WAAWC,MAGduF,OAAM,SAACpF,GACNJ,WAAWI,MAhEK,2CAAH,sDAoEbiG,mBAAqB,SAAC5J,GAC1BA,EAAI,2OAAQA,GAAS8H,gBACrB,IAAIM,EAAO/I,SAASQ,SAASwI,MAAM,EAAGhJ,SAASQ,SAASyI,YAAY,MACpE1F,eAAe,GAAD,OAAI3D,EAAE,YAAN,YAAqB8C,SAAS3D,YAC5CsE,mBAAkB,GAClBR,SAAS2H,+CAAc7J,IACpB0I,MAAK,SAAClF,GAEL,GADAd,mBAAkB,GACa,cAA3Bc,EAAImF,KAAKC,cAA+B,CAAC,IAAD,EA0BK,IAzB/C,GAAIhE,kBAAmB,CAAC,IAAD,IAGJ,EAFbyE,EAAa,OAAG7F,QAAH,IAAGA,GAAH,UAAGA,EAAKE,eAAR,iBAAG,EAAc1D,YAAjB,aAAG,EAAoBA,KACpCsJ,EAAW,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAe5K,GACjC,GAAI6K,EACE,OAACvH,eAAD,IAACA,UAAD,UAACA,SAAU+C,eAAX,OAAC,EAAmByE,gBAMtBnB,EAAI,UAAM/I,SAASQ,SAASwI,MAC1B,EACAhJ,SAASQ,SAASyI,YAAY,MAF5B,iBAGMgB,GACVpH,SACEsH,+CAAgB,CACdC,QAASJ,EACTzK,UAAWA,aAEb8J,MAAK,SAACgB,QAdRtB,EAAI,UAAM/I,SAASQ,SAASwI,MAC1B,EACAhJ,SAASQ,SAASyI,YAAY,MAF5B,iBAGMgB,EAHN,iBAoBV,GAFAnK,SAASiJ,GACT5D,YAAY,OACZ,OAAIzC,eAAJ,IAAIA,UAAJ,UAAIA,SAAU+C,eAAd,OAAI,EAAmB6E,uBACrBzH,SACE4G,+CAAe,CACbxC,aAAY,OAAEvE,eAAF,IAAEA,UAAF,UAAEA,SAAU+C,eAAZ,aAAE,EAAmBwB,aACjC1H,UAAWA,UACXmJ,QAAO,OAAEhG,eAAF,IAAEA,UAAF,UAAEA,SAAU+C,eAAZ,aAAE,EAAmBiD,WAKlCrC,gBAAgB,WACoB,aAA3BlC,EAAImF,KAAKC,eAClBrF,WAAWC,MAGduF,OAAM,SAACpF,GACNJ,WAAWI,OAIXmG,iBAAmB,SACvB9J,GAGI,IAFJ+J,EAEG,uDAFiB,KACpBZ,EACG,wDAGe,SAAbzK,UAAoC,SAAbA,UAAyByK,EAG9CA,EAUHF,cAAcjJ,EAAM+J,EAAmBZ,GATvC,OAAInJ,QAAJ,IAAIA,KAAMgK,SACRJ,mBAAmB5J,EAAM+J,GAEzBd,cAAcjJ,EAAM+J,GANxB5B,gBAAgBnI,EAAM+J,IAiB1B,SAASE,cAEP,GADA/H,SAASgI,+CAAkBtL,YACU,SAAjCkD,aAAaqI,IAAI,YACnB,OAAOhL,UAAU,GAEjB,GAAiB,SAAbT,UAAoC,SAAbA,SAAqB,CAC9C,IAAM0J,EAAO/I,SAASQ,SAASwI,MAC7B,EACAhJ,SAASQ,SAASyI,YAAY,MAE1BC,EAAOH,EAAKC,MAAM,EAAGD,EAAKE,YAAY,MAC5C,OAAIrF,eAIY,IAHHA,aAAamH,WACtB,SAACzK,GAAD,OAAUA,EAAK0K,UAAYhL,SAASQ,aAGpCqD,gBAAgB,KAAMqF,EAAM,MACrBpJ,SAASoJ,IAKXpJ,SAASoJ,GAGlB,GAAItF,aAAc,CAIhB,IAAc,IAHHA,aAAamH,WACtB,SAACzK,GAAD,OAAUA,EAAK0K,UAAYhL,SAASQ,YAErB,CACf,IAAMuI,EAAO/I,SAASQ,SAASwI,MAC7B,EACAhJ,SAASQ,SAASyI,YAAY,MAGhC,OADApF,gBAAgB,KAAMkF,EAAM,MACrBjJ,SAASiJ,GAEhB,OAAOjJ,UAAU,GAGnB,OAAOA,UAAU,GAMzB,SAASmL,iBACP,OAAOnL,SAAS,GAAD,OAAIE,SAASQ,SAASC,WAAlB,WAAiCvB,WAAa,KAAO,CACtEwB,SAAS,IAIb,IAAMwK,UAAYzL,qDAAY,SAACC,GAAD,OAAWA,EAAMyL,WACzCC,YAAW,0PAAG,WAAOC,GAAP,mIAAAxB,EAAA,6DAEdyB,EAAiB1C,OAAO5I,SAASQ,SAASE,QAC5C,4BACA,IAJgB,gBAOUwK,gBAPV,IAOUA,WAPV,UAOUA,UAAWK,kBAPrB,aAOU,EAAuBC,MACjD,SAAClL,GAAD,OAAc,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMmL,aAAcH,KARd,UAOdI,EAPc,gBAUAA,QAVA,IAUAA,OAVA,EAUAA,EAAiBC,OAVjB,wBAYVC,EAAWC,qDAAOC,oBAZR,SAaVF,EACHd,IADG,4BACsBY,EAAgBtM,KACzCiK,MAAK,SAAClF,GAAS,IAAD,EAGb,OADU,OAAGA,QAAH,IAAGA,GAAH,UAAGA,EAAKxD,YAAR,aAAG,EAAWA,QAGzB0I,MAAK,SAAC1I,GAELgC,YAAYhC,GAEZ,IAAMoL,EAAe9M,SAAQ,UAAMA,SAAN,YAAkBE,QAAlB,UAAgCA,QAG7D,OAFAyD,aAAamJ,GACblJ,SAASmJ,+CAAuB,CAAEzM,UAAWwM,EAAcpL,UACpDA,KAER0I,MAAK,SAAC4C,GACLC,eAAeD,MAEhBE,SAAQ,SAACC,GACRrI,iBAAgB,GAChBZ,YAAW,MAEZuG,OAAM,SAACpF,GACNtC,QAAQsC,MAAMA,GACdP,iBAAgB,GAChBZ,YAAW,MAvCC,0CA0CVkJ,GAAY,IAAInE,MAAOoE,UACzB9F,EA3CY,UA2CHoC,OAAO5I,SAASuM,OA3Cb,2BA2CsCpN,OA3CtC,2BA2C+DkN,IAC3EpN,SA5CY,oBA6CG,YAAbA,SA7CU,kCA8CN,yBAAO,YAA0BE,OAAjC,UACHkK,MAAK,SAAClF,GACL,IAAMxD,EAAOwD,EAAIqI,QACjB7J,YAAYhC,GAEZ,IAAMoL,EAAe9M,SAAQ,UACtBA,SADsB,YACVE,QADU,UAEtBA,QAKP,OAJAyD,aAAamJ,GACblJ,SACEmJ,+CAAuB,CAAEzM,UAAWwM,EAAcpL,UAE7CA,KAER0I,MAAK,SAAC4C,GACLC,eAAeD,MAEhBE,SAAQ,SAACC,GACRrI,iBAAgB,GAChBZ,YAAW,MAEZuG,OAAM,SAACpF,GACNtC,QAAQsC,MAAMA,GACdP,iBAAgB,GAChBZ,YAAW,MAtEH,eAyENkJ,GAAY,IAAInE,MAAOoE,UAC7B9F,EAAG,UAAMoC,OAAO5I,SAASuM,OAAtB,2BAA+CtN,SAA/C,YAA2DE,OAA3D,2BAAoFkN,GA1E3E,UA2ENV,MAAMnF,GACT6C,MAAK,SAAUlF,GACd,OAAOA,EAAIsI,UAEZpD,MAAK,SAAC1I,GAELgC,YAAYhC,GAEZ,IAAMoL,EAAe9M,SAAQ,UACtBA,SADsB,YACVE,QADU,UAEtBA,QAKP,OAJAyD,aAAamJ,GACblJ,SACEmJ,+CAAuB,CAAEzM,UAAWwM,EAAcpL,UAE7CA,KAER0I,MAAK,SAAC4C,GACLC,eAAeD,MAEhBE,SAAQ,SAACC,GACRrI,iBAAgB,GAChBZ,YAAW,MAEZuG,OAAM,SAACpF,GACNtC,QAAQsC,MAAMA,GACdP,iBAAgB,GAChBZ,YAAW,MAtGH,4CAAH,sDA6GX+I,eAAiB,SAACvL,GAAU,IAAD,QAE/B,GACgB,SAAbtB,UAAoC,SAAbA,UACxB,UAACG,MAAMkH,SAASnH,kBAAhB,OAAC,EAA2BmN,iBAC3B,UAAClN,MAAMkH,SAASnH,kBAAhB,OAAC,EAA2BuH,cACK,MAAhCrE,aAAaqI,IAAI,YACe,SAAhCrI,aAAaqI,IAAI,aACjB,UAAAtL,MAAMkH,SAASnH,kBAAf,mBAA2BuH,oBAA3B,eAAyC1H,MAAOuN,SAAQ,OAACrK,YAAD,IAACA,YAASlD,IAsBpE+D,YAAW,GACXY,iBAAgB,OAtBhB,CAAC,IAAD,UACAR,eAAe,GAAD,OACT3D,EAAE,WADO,YACOA,EAAE,UADT,YACsBA,EAAE,QADxB,YACmCA,EAAEe,EAAK5B,aAExD,IAAM6N,EAAK,OAAGtK,YAAH,IAAGA,YAASlD,GACvB+D,YAAW,GACXY,iBAAgB,GAChBlB,SACEmE,+CAAY,sHACV5H,GAAIwN,EACJrN,UAAWA,UACXmJ,QAAO,OAAE/H,QAAF,IAAEA,GAAF,UAAEA,EAAM8E,eAAR,aAAE,EAAeiD,QACxBzB,aAAY,iBACVtG,QADU,IACVA,GADU,UACVA,EAAM8E,eADI,aACV,EAAeoH,0BADL,eAC2BlM,QAD3B,IAC2BA,GAD3B,UAC2BA,EAAM8E,eADjC,aAC2B,EAAewB,cAL7C,iBAMAtG,QANA,IAMAA,GANA,UAMAA,EAAM8E,eANN,aAMA,EAAeiD,WAE1BW,MAAK,SAAClF,GACNhB,YAAW,GACXY,iBAAgB,QAQhB+I,cAAgB,WAAO,IAAD,IAC1B,aAAItN,MAAMyB,eAAe1B,kBAAzB,iBAAI,EAAiCkG,eAArC,OAAI,EAA0CsH,qBAAsB,CAAC,IAAD,MAC5DA,EAAoB,OAAGrK,eAAH,IAAGA,UAAH,UAAGA,SAAU+C,eAAb,aAAG,EAAmBsH,qBAC5C3F,EAAS,GACb,GAAI4F,MAAMC,QAAQF,GAAuB,CACvC,IAAIG,EAAc,GAClBH,EAAqBnL,KAAI,SAAC8F,EAAIyF,GAAO,IAAD,MAC9BC,EAAaC,+CAAgB,UAC/B7N,MAAMkH,SAASnH,kBADgB,aAC/B,EAA2BuH,aAC3BY,GAEFwF,EAAYI,KAAKF,GACjBhG,EAAS8F,EAAYK,KAAZ,iBACP7K,eADO,IACPA,UADO,UACPA,SAAU+C,eADH,aACP,EAAmB+H,qCADZ,QAC6C,aAGnD,aACLhO,MAAMkH,SAASnH,kBADV,iBACL,EAA2BuH,oBADtB,OACL,EAA0CiG,GAC1C,CAAC,IAAD,IACA3F,EAAM,UAAG5H,MAAMkH,SAASnH,kBAAlB,iBAAG,EAA2BuH,oBAA9B,aAAG,EAA0CiG,GAErD,OAAO3F,IAILqG,eAAiB,SAAC1F,GAAW,IAAD,IAC5BX,EAAS,GACb,GAAI4F,MAAMC,QAAQlF,GAAQ,CACxB,IAAI2F,EAAS,GACb3F,EAAMnG,KAAI,SAAC8F,EAAIyF,GAAO,IAAD,EACfC,EAAaC,+CAAgB,UAC/B7N,MAAMkH,SAASnH,kBADgB,aAC/B,EAA2BuH,aAC3BY,GAEFgG,EAAOJ,KAAKF,MAEdhG,EAASsG,EAAOH,KAAK,UAChB,aAAI/N,MAAMkH,SAASnH,kBAAnB,iBAAI,EAA2BuH,oBAA/B,OAAI,EAA0CiB,GAAQ,CAAC,IAAD,IAC3DX,EAAM,UAAG5H,MAAMkH,SAASnH,kBAAlB,iBAAG,EAA2BuH,oBAA9B,aAAG,EAA0CiB,GAErD,OAAOX,GAGHuG,wBAA0B,SAAChN,EAAMiN,GAAP,OAC9BjN,EAAKgF,MAAK,SAACC,GAAD,OAASiI,OAAOC,KAAKlI,GAAKiC,SAAS+F,OAEzCG,oBAAsB,WAC1B,GACe,SAAb1O,UACa,SAAbA,UACa,cAAbA,SACA,CAAC,IAAD,EACI2O,EAAYhO,SAASiO,OACrBjO,SAASiO,OACNjF,MAAM,GACNkF,MAAM,KACNtM,KAAI,SAACuM,GAAO,IAAD,MAENC,EADSD,EAAEzN,QAAQ,IAAK,IACRwN,MAAM,KACtBG,EAAW,OAAG3L,eAAH,IAAGA,UAAH,UAAGA,SAAU+C,eAAb,iBAAG,EAAmB9E,YAAtB,iBAAG,EAAyB+E,mBAA5B,aAAG,EAAsC8F,MACtD,SAAClL,GAAD,OAAc,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMgO,iBAAkBF,EAAO,MAK3C,OAHIC,IACFD,EAAO,GAAP,OAAYC,QAAZ,IAAYA,OAAZ,EAAYA,EAAa1G,WAEpByG,KAERG,QACC,SAAC3I,EAAD,kIAAOgI,EAAP,KAAY7F,EAAZ,gIAAC,uHACInC,GADL,2HAEGgI,GAEEY,MAAMzG,KAAc,OAAH6F,QAAG,IAAHA,KAAK/F,SAAS,OAAd,OAAuB+F,QAAvB,IAAuBA,KAAK/F,SAAS,QAClDE,EACDA,MAER,IAEJ,GAGA0G,EAAqB,GACzB,aAAIjP,MAAMkH,SAASnH,kBAAnB,OAAI,EAA2BW,OAAQ,CAAC,IAAD,UAC/BwO,EAAiBb,OAAOC,KAAP,UAAYtO,MAAMkH,SAASnH,kBAA3B,aAAY,EAA2BW,QAC3DU,OACCiN,OAAOC,KAAP,UAAYtO,MAAMkH,SAASnH,kBAA3B,aAAY,EAA2BW,QACvC,KAEI,OAARwC,eAAQ,IAARA,UAAA,UAAAA,SAAU+C,eAAV,mBAAmB9E,YAAnB,mBAAyB+E,mBAAzB,SAAsC9D,KAAI,SAACtB,EAAMuB,GAK1B,IAAD,EAUb,EAIH,EAdJ,OAAIvB,QAAJ,IAAIA,KAAMyF,SACJ,OAAJzF,QAAI,IAAJA,GAAA,UAAAA,EAAMyF,gBAAN,SAAgBnE,KAAI,SAAC+M,EAAUC,GAAe,IAAD,EAIzC,EAFAF,GAAc,UACdlP,MAAMkH,SAASnH,kBADD,OACd,EAA2BW,OAA3B,OAAkCyO,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAUhH,aAE5C8G,EAAkB,OAACE,QAAD,IAACA,OAAD,EAACA,EAAUhH,WAA7B,UACEnI,MAAMkH,SAASnH,kBADjB,aACE,EAA2BW,OAA3B,OAAkCyO,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAUhH,eAKhD+G,GAAc,UACdlP,MAAMkH,SAASnH,kBADD,OACd,EAA2BW,OAA3B,OAAkCI,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAMqH,aAExC8G,EAAkB,OAACnO,QAAD,IAACA,OAAD,EAACA,EAAMqH,WAAzB,UACEnI,MAAMkH,SAASnH,kBADjB,aACE,EAA2BW,OAA3B,OAAkCI,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAMqH,eAQlD,OAAO,2OAAKqG,GAAcS,GAE1B,MAAO,IAIXI,uDAAU,WAGJ1P,SACF4E,iBAAgB,GACXvE,MAAMyB,eAAe1B,YAKU,MAAhCkD,aAAaqI,IAAI,YACe,SAAhCrI,aAAaqI,IAAI,YAEjBoB,eAAe1M,MAAMyB,eAAe1B,YAkDtCoD,YAAYnD,MAAMyB,eAAe1B,YAEjCwE,iBAAgB,GAChBZ,YAAW,IA3DXiI,eAkEJ0D,gDAAMC,iBAEL,CAACrM,SAAUlD,MAAMyB,eAAe1B,aAEnC,IAAMyP,eAAiBvP,qDAAY,SAACC,GAAD,OAAWA,EAAMuP,aAC9CC,qBAAuB,SAAC7O,GAA0B,IAAvB8O,EAAsB,wDACrD9O,EAAEE,iBACFsC,SACEsM,EACIC,yDAAgB,CAAE7P,sBAClB6P,yDAAgB,CACd7P,oBACAmD,SAAU2M,KAAKC,UAAU5M,SAAU,KAAM,MAE/C2G,MAAK,gBAGT,YAAsC/J,sDAAS,GAA/C,+IAAOiQ,YAAP,eAAoBC,eAApB,eACA,YAAwClQ,qDAAS,IAAjD,+IAAOmQ,aAAP,eAAqBC,gBAArB,eAsCiD,+hBArCjD,SAASC,mBAAmB5H,EAAO6H,GACjCJ,gBAAe,GACfE,gBAAgB3H,GAChBlF,SACEgN,yDAAoB,CAClBtQ,oBACAmD,SAAUqF,KAEZsB,MAAK,SAAClF,OAKV,SAAS2L,uBAAuBC,GAC9BP,eAAmC,KAAb,OAAPO,QAAO,IAAPA,OAAA,EAAAA,EAASnP,SAG1B,SAASoP,SAAS3P,GAChB,IAAM4P,EAAcZ,KAAKa,MAAMT,cAC/B5M,SAASmJ,+CAAuB,CAAEzM,oBAAWoB,KAAM,MAAO0I,MAAK,SAAC8G,GAC9DtN,SAASmJ,+CAAuB,CAAEzM,oBAAWoB,KAAMsP,KAAgB5G,MACjE,SAACjC,GACCpF,QAAQC,IAAImF,GACZzE,YAAYsN,GAEZ1J,YAAW,WACT6J,eACC,IAEH7J,YAAW,WACT2I,qBAAqB7O,KACpB,WAMX,OAAIqC,UAAYlD,MAAMyB,eAAe1B,WAC3B2D,SAAW,gCAAC1D,MAAMkH,SAASnH,kBAAhB,6BAAC,wBAA2BmN,gBAmP7C,mEAAKvL,UAAU,gBAAf,SACE,4DAAC,2CAAD,CAAKkP,GAAG,KAAKC,GAAG,KAAKC,GAAI,CAAEC,MAAO,GAAKC,GAAI,CAAED,MAAO,EAAGE,KAAM,GAA7D,SACE,6DAAC,2CAAD,WACE,4DAAC,2CAAD,UACE,4DAAC,6CAAD,CACEC,GAAI,CAAEC,QAAS3N,OAAO4N,KAAKC,OAC3BC,UAAU,OACV5P,UAAU,GACV6P,MAAO,IACPC,OAAQ,OAGZ,4DAAC,2CAAD,UACE,4DAAC,6EAAD,CACEvL,YAAW,OAAEhD,eAAF,IAAEA,UAAF,4BAAEA,SAAU+C,eAAZ,uDAAE,oBAAmB9E,YAArB,iCAAE,sBAAyB+E,YACtCnG,UAAWA,qBAjQR,SAAbF,UAAoC,SAAbA,UAAoC,cAAbA,SAC5C,4DAAC,6CAAD,UAeG,gCAAAG,MAAMkH,SAASnH,kBAAf,qDAA2BuH,cAAgB5H,UAC1C,mEAAKiC,UAAU,gBAAf,SACE,4DAAC,2CAAD,UACE,4DAAC,2CAAD,CACEkP,GAAG,KACHC,GAAG,KACHC,GAAI,CAAEC,MAAO,GACbC,GAAI,CAAED,MAAO,EAAGE,KAAM,GAJxB,SAME,4DAAC,qDAAD,CACEQ,SAAU9N,eACV+N,aAAa,0BACbC,OAAQ,4DAAC,4DAAD,CAAQ9N,YAAaA,cAH/B,SAKE,6DAAC,2CAAD,WACE,4DAAC,2CAAD,CAAYnC,UAAU,OAAtB,SACE,6DAAC,2CAAD,CAAKA,UAAU,2BAAf,UACE,6DAAC,2CAAD,CAAKsP,GAAI,EAAGF,GAAI,GAAhB,UACW,OAAR7N,eAAQ,IAARA,UAAA,4BAAAA,SAAU+C,eAAV,8CAAmB4L,4BACN,SAAbhS,UAAoC,SAAbA,SAOtB,mEAAI8B,UAAU,2BAAd,UACyBvB,EAAT,SAAbP,SAAwB,OAAY,UAAW,IAC/CO,EAAE8C,SAAS3D,cARd,kEAAIoC,UAAU,2BAAd,SACGsM,eAAc,OACb/K,eADa,IACbA,UADa,4BACbA,SAAU+C,eADG,+BACb,oBAAmB4L,+BAUhB,OAAR3O,eAAQ,IAARA,UAAA,4BAAAA,SAAU+C,eAAV,mDAAmB6L,4BACJ,SAAbjS,UAAoC,SAAbA,WACtB,qEAAO8B,UAAU,yBAAjB,SACGsM,eAAc,OACb/K,eADa,IACbA,UADa,4BACbA,SAAU+C,eADG,+BACb,oBAAmB6L,+BAK7B,4DAAC,2CAAD,CACEnQ,UAAS,gBAAW2L,gBAAkB,OAAS,IAC/C2D,GAAI,EACJF,GAAI,EAHN,SAKE,oEAAKpP,UAAU,iDAAf,WACW,OAARuB,eAAQ,IAARA,UAAA,4BAAAA,SAAU+C,eAAV,2EAAmB9E,YAAnB,uDAAyBkF,iBAChB,OAARnD,eAAQ,IAARA,UAAA,4BAAAA,SAAU+C,eAAV,2EAAmB9E,YAAnB,gFAAyBkF,qBAAzB,kFAAwClF,YAAxC,yDACIC,QAAS,GACX,4DAAC,4EAAD,CACE9B,kBACE4D,SAAS+C,QAAQ9E,KAAKkF,cAExBtG,UAAWA,UACXR,UAAW2D,SAAS3D,cAGhB,OAAR2D,eAAQ,IAARA,UAAA,4BAAAA,SAAU+C,eAAV,2EAAmB9E,YAAnB,gFAAyBkF,qBAAzB,kFAAwClF,YAAxC,yDACEC,QAAS,IACV1B,YACsB,iBAAf,OAARwD,eAAQ,IAARA,cAAA,EAAAA,SAAUrD,WACR,6DAAC,6CAAD,WACE,4DAAC,2CAAO0C,OAAR,CACEZ,UAAU,yBACV/B,GAAG,kBACH0B,SAAO,EACPY,QAAS,SAACrB,GACPnB,UAEG+L,iBADAL,eAGN/J,MAAM,YATR,SAWGG,oFACC,sBAEA,eACA,MAMJ,4DAAC,2CAAD,CAAqBuQ,OAAO,kBAA5B,SACG3R,EAAE,mBAMd,gCAAAJ,MAAMkH,SAASnH,kBAAf,2DAA2BuH,eAC1BgG,iBACoB,KAApBA,iBACE,4DAAC,2CAAD,CAAK2D,GAAI,GAAT,SACE,iEAAGtP,UAAU,uDAAb,SACG2L,yBAMb,4DAAC,2CAAD,WACI5N,WAAcmD,aAAeC,MAC7B,4DAAC,qEAAD,CAEEI,SAAUA,SACVgD,YAAW,OAAEhD,eAAF,IAAEA,UAAF,4BAAEA,SAAU+C,eAAZ,uDAAE,oBAAmB9E,YAArB,iCAAE,sBAAyB+E,YACtCnG,UAAWA,UACXqL,YAAaA,YACbH,iBAAkBA,iBAClB+G,kBAAmBnC,KAAKa,MACtBb,KAAKC,UAAL,gCACE9P,MAAMkH,SAASnH,kBADjB,mCACE,wBAA2BuH,cAC3BpG,QAAQ,WAAY,QAExB+Q,UAAU,EACVpS,SAAUA,UAbZ,sBACsBE,YAgBtB,4DAAC2C,YAAD,CACEwP,cAAexS,UACfyS,gBAAe,+BACbjP,SAAS+C,QAAQ9E,KAAKkF,qBADT,kCACb,uBAAqClF,KAAKiR,QACxC,SAACtR,GAAD,OAAUA,EAAKnB,SAAWD,aAC1B,kBAoBpB,6DAAC,2CAAD,CAAO2B,MAAM,SAAb,UACE,mEAAIM,UAAU,gBAAd,UACGvB,EAAE8C,SAAS3D,WADd,IAC2Ba,EAAE,gBAE7B,oEAAKuB,UAAU,aAAf,UACGvB,EAAE,GAAD,OAAI8C,SAAS3D,UAAb,aADJ,YACyCuD,YADzC,IACyCA,YAASlD,GAAI,IACnDQ,EAAE,kBAFL,IAEyB,YAM/B,mEAAKuB,UAAU,gBAAf,SACE,4DAAC,2CAAD,UACE,4DAAC,2CAAD,CAAKkP,GAAG,KAAKC,GAAG,KAAKC,GAAI,CAAEC,MAAO,GAAKC,GAAI,CAAED,MAAO,EAAGE,KAAM,GAA7D,SACE,4DAAC,qDAAD,CACEQ,SAAU9N,eACV+N,aAAa,0BACbC,OAAQ,4DAAC,4DAAD,CAAQ9N,YAAaA,cAH/B,SAKE,6DAAC,2CAAD,WACE,4DAAC,2CAAD,UACE,6DAAC,2CAAD,CAAKnC,UAAU,gCAAf,UACE,4DAAC,2CAAD,CAAKsP,GAAI,EAAGF,GAAI,GAAIpP,UAAU,OAA9B,SACE,mEAAIA,UAAU,qBAAd,UACGvB,EAAE,OADL,IACcA,EAAE8C,SAAS3D,gBAG3B,4DAAC,2CAAD,CACEoC,UAAS,eAAU2L,gBAAkB,OAAS,IAC9C2D,GAAI,EACJF,GAAI,EAHN,SAKE,oEAAKpP,UAAU,iDAAf,UACE,4DAAC,2CAAOY,OAAR,CACEZ,UAAU,yBACV/B,GAAG,kBACH0B,SAAO,EACPY,QAAS,SAACrB,GACPnB,UAA4B+L,iBAAhBL,eAEf/J,MAAM,YAPR,SASGG,oFACC,sBAEA,eACA,MAMJ,4DAAC,2CAAD,CAAqBuQ,OAAO,kBAA5B,SACG3R,EAAE,oBAMb,4DAAC,2CAAD,UACE,4DAAC,qEAAD,CACE8F,YAAW,OAAEhD,eAAF,IAAEA,UAAF,4BAAEA,SAAU+C,eAAZ,uDAAE,oBAAmB9E,YAArB,iCAAE,sBAAyB+E,YACtChD,SAAUA,SACVnD,UAAWA,UACXqL,YAAaA,YACbH,iBAAkBA,iBAElB+G,kBAAmBzD,sBACnB0D,UAAU,EACVpS,SAAUA,wBAiCrB,MA2PI+C","file":"static/js/175.a49326b4.chunk.js","sourcesContent":["/* eslint-disable no-var */\nimport {\n  Fragment,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n  lazy,\n  Suspense\n} from \"react\"\nimport {\n  Row,\n  Col,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Button\n} from \"reactstrap\"\nimport { useNavigate, useLocation, useParams } from \"react-router-dom\"\nimport { useTranslation } from \"react-i18next\"\nimport { useSelector } from \"react-redux\"\nimport \"cleave.js/dist/addons/cleave-phone.us\"\nimport { renderIcon } from \"@src/views/apps/menu/store/my_menu\"\n\nconst RelationsCrudMenu = ({ relationsCrudData, pageTitle }) => {\n  const { moduleId, pageId, id, pageType, relPageId } = useParams()\n  const [storeName, setStoreName] = useState(\n    moduleId ? `${moduleId}_${relPageId}` : `${relPageId}`\n  )\n  const store = useSelector((state) => state.dynamicStore)\n  const { t } = useTranslation()\n  const [active, setActive] = useState(\"1\")\n\n  const toggle = (tab) => {\n    if (active !== tab) {\n      setActive(tab)\n    }\n  }\n  const navigate = useNavigate()\n  const location = useLocation()\n  const params = useParams()\n  const [sectionTitle, setSectionTitle] = useState()\n\n  const handleClick = (e, item) => {\n    e.preventDefault()\n    // console.log(item)\n    setSectionTitle(item.pageTitle)\n    navigate(\n      `${location.pathname.replaceAll(`/${params.relPageId}`, \"\")}/${\n        item.pageId\n      }`,\n      { replace: true }\n    )\n  }\n\n  const renderLinkMenu = (item) => {\n    return (\n      // <Link\n      //   to={`${location.pathname.replaceAll(`/${params.relPageId}`, \"\")}/${\n      //     item.pageId\n      //   }`}\n      // >\n      <DropdownItem\n        active={params.relPageId === item.pageId}\n        key={`menu_${item.pageId}`}\n        onClick={(e) => handleClick(e, item)}\n        // href={`${window.location.href}/${item.pageId}`}\n        tag=\"a\"\n      >\n        {renderIcon(item?.menuIcon, \"me-1 align-middle\", 16, {})}\n        <span className=\"align-middle\">{t(item.pageTitle)}</span>\n      </DropdownItem>\n      // </Link>\n    )\n  }\n\n  return (\n    <Fragment>\n      {relationsCrudData?.data?.length > 1 ? (\n        <UncontrolledButtonDropdown>\n          <DropdownToggle color=\"warning\" outline caret>\n            {renderIcon(\n              store.pageAttributes[storeName]?.menuIcon ?? \"material:info\",\n              \"me-1 align-middle\",\n              16\n            )}\n            <span className=\"d-none d-md-inline align-middle\">\n              {t(\n                store.pageAttributes[storeName]?.pageTitle ??\n                  relationsCrudData?.sectionTitle ??\n                  \"Other Info\"\n              )}\n            </span>\n          </DropdownToggle>\n\n          <DropdownMenu\n            style={{\n              overflowY: \"auto\",\n              maxHeight: \"70vh\"\n            }}\n            tag=\"div\"\n          >\n            {/* <Link\n            to={`${location.pathname.replaceAll(`/${params.relPageId}`, \"\")}`}\n          > */}\n            <DropdownItem\n              active={!params.relPageId}\n              tag=\"a\"\n              onClick={(e) => {\n                e.preventDefault()\n                setSectionTitle(pageTitle)\n                navigate(\n                  `${location.pathname.replaceAll(`/${params.relPageId}`, \"\")}`,\n                  { replace: true }\n                )\n              }}\n            >\n              {renderIcon(\"material:home\", \"me-1 me-1 align-middle\", 16, {})}\n              <span className=\"align-middle\">{t(pageTitle)}</span>\n            </DropdownItem>\n            <DropdownItem divider></DropdownItem>\n            {/* </Link> */}\n            {relationsCrudData?.data?.map((item, index) => {\n              return renderLinkMenu(item)\n            })}\n          </DropdownMenu>\n        </UncontrolledButtonDropdown>\n      ) : params.relPageId === relationsCrudData?.data[0].pageId ? (\n        <Button.Ripple\n          outline\n          onClick={(e) => {\n            e.preventDefault()\n            console.log(params.relPageId)\n            setSectionTitle(pageTitle)\n            navigate(\n              `${location.pathname.replaceAll(`/${params.relPageId}`, \"\")}`,\n              { replace: true }\n            )\n          }}\n          color=\"secondary\"\n        >\n          {renderIcon(\"material:arrow_back\", \"me-1 align-middle\", 16)}\n          <span className=\"align-middle ms-25\">{t(\"Back\")}</span>\n        </Button.Ripple>\n      ) : (\n        <Fragment>\n          <Button\n            onClick={(e) => handleClick(e, relationsCrudData?.data[0])}\n            color=\"relief-warning\"\n          >\n            {renderIcon(\n              relationsCrudData?.data[0].menuIcon ?? \"material:info\",\n              \"me-1 align-middle\",\n              16\n            )}\n            <span className=\"align-middle ms-25\">\n              {t(relationsCrudData?.data[0]?.pageTitle)}\n            </span>\n          </Button>\n        </Fragment>\n      )}\n    </Fragment>\n  )\n}\n\nexport default RelationsCrudMenu\n","/* eslint-disable multiline-ternary */\r\nimport UILoader from \"@components/ui-loader\"\r\nimport { Skeleton } from \"@mui/material\"\r\nimport { Loader } from \"@src/shared/CommonComponents\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport DynamicForm from \"@src/utility/generateForm/dynamicForm\"\r\nimport DynamicFormLoading from \"@src/utility/generateForm/dynamicFormLoading\"\r\nimport RelationsCrudMenu from \"@src/utility/generateForm/relationsCrudMenu\"\r\nimport { renderIcon } from \"@src/views/apps/menu/store/my_menu\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport \"@styles/react/libs/input-number/input-number.scss\"\r\nimport { getDepthValue, parseStrAndField, setLastMenuCached } from \"@utils\"\r\nimport \"moment/locale/id\"\r\nimport { Fragment, lazy, useContext, useEffect, useState } from \"react\"\r\nimport toast from \"react-hot-toast\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useLastMenuTabs } from \"@hooks/useLastMenuTabs\"\r\nimport useJwt from \"@src/auth/jwt/useJwt\"\r\nimport {\r\n  useLocation,\r\n  useNavigate,\r\n  useParams,\r\n  useSearchParams\r\n} from \"react-router-dom\"\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Row,\r\n  UncontrolledTooltip\r\n} from \"reactstrap\"\r\nimport {\r\n  getDataById,\r\n  getSummaryData,\r\n  postData,\r\n  postDataMulti,\r\n  putData,\r\n  putDataTree,\r\n  resetData,\r\n  resetSelectedData,\r\n  setSelectedData,\r\n  // extraCrud,\r\n  // dynamicForm\r\n  // storeName,\r\n  // pageAttr.pageTitle,\r\n  setStorePageAttributes\r\n} from \"../store\"\r\nimport Editor from \"@monaco-editor/react\"\r\nimport Prism from \"prismjs\"\r\nimport { setEditModeJson, setEditModeJsonAttr } from \"@store/developer\"\r\n\r\nconst DynamicPage = lazy(() => import(\"@src/shared/dynamic_pages\"))\r\n\r\nconst DetailPage = () => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    moduleId,\r\n    pageId,\r\n    id,\r\n    pageType,\r\n    relPageId,\r\n    relPageType,\r\n    relId,\r\n    isOrigin\r\n  } = useParams()\r\n  const [searchParams] = useSearchParams()\r\n  const [pageAttr, setPageAttr] = useState(null)\r\n  const [storeName, setStoreName] = useState(\r\n    moduleId ? `${moduleId}_${pageId}` : `${pageId}`\r\n  )\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state.dynamicStore)\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loading, setLoading] = useState(true)\r\n  const [loadingPostPut, setLoadingPostPut] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const [active, setActive] = useState(\"1\")\r\n  const toggleTab = (tab) => {\r\n    if (active !== tab) {\r\n      setActive(tab)\r\n    }\r\n  }\r\n\r\n  const { lastMenuTabs, setLastMenuTabs } = useLastMenuTabs()\r\n\r\n  const [loadingFirst, setLoadingFirst] = useState(true)\r\n  const [defValuesAdd, setDefValuesAdd] = useState({})\r\n  const errorToast = (res) => {\r\n    let errorFieldsMsg = \"\"\r\n    if (res?.payload?.error?.errors) {\r\n      const errorFields = res?.payload?.error?.errors\r\n      for (let errorx in res?.payload?.error?.errors) {\r\n        errorFieldsMsg = `${errorx} : ${errorFieldsMsg} - ${errorFields[errorx]}\\n`\r\n        // console.log(errorx, errorFields[errorx])\r\n      }\r\n    } else {\r\n      errorFieldsMsg =\r\n        res?.payload?.error?.response?.data?.message ?? \"Error response\"\r\n    }\r\n    return toast.error(\r\n      `${res.payload?.error?.message} \\n \\n ${errorFieldsMsg}`,\r\n      {\r\n        style: {\r\n          padding: \"16px\",\r\n          color: colors.danger.main,\r\n          border: `1px solid ${colors.danger.main}`\r\n        },\r\n        iconTheme: {\r\n          primary: colors.danger.main\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  const succesToast = (type = \"add\") => {\r\n    const text = type === \"add\" ? \"Created\" : \"Updated\"\r\n    return toast.success(\r\n      `${t(`Successfully ${text}`)} ${t(pageAttr.pageTitle)}`,\r\n      {\r\n        style: {\r\n          padding: \"16px\",\r\n          color: colors.success.main,\r\n          border: `1px solid ${colors.success.main}`\r\n        },\r\n        iconTheme: {\r\n          primary: colors.success.main\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  function hasRelationCrud() {\r\n    let hasRelationsCrud = pageAttr?.crudOpt?.data?.dynamicForm?.some(\r\n      (obj) => obj?.type === \"relationsCrud\" || obj?.relationsCrud\r\n    )\r\n\r\n    let hasRelationsCrud_onTabs = pageAttr?.crudOpt?.data?.dynamicForm?.some(\r\n      (item) => {\r\n        if (item.type === \"tabs\") {\r\n          if (item?.children && item?.children?.length > 0) {\r\n            // console.log(\"here\")\r\n            return item.children.map((childx) => {\r\n              if (childx?.tabContent && childx?.tabContent?.length > 0) {\r\n                // console.log(childx)\r\n                return childx.tabContent.some((childx2) => {\r\n                  // console.log(childx2)\r\n                  // console.log(\r\n                  //   childx2.type === \"relationsCrud\" || childx2?.relationsCrud\r\n                  // )\r\n                  return (\r\n                    childx2.type === \"relationsCrud\" || childx2?.relationsCrud\r\n                  )\r\n                })\r\n              }\r\n            })\r\n          }\r\n        }\r\n        return false\r\n      }\r\n    )\r\n\r\n    let hasRelationsCrud_onColumns = pageAttr?.crudOpt?.data?.dynamicForm?.some(\r\n      (item) => {\r\n        if (item.type === \"columns\") {\r\n          if (item?.children && item?.children?.length > 0) {\r\n            return item.children.some(\r\n              (child) => child.type === \"relationsCrud\" || child?.relationsCrud\r\n            )\r\n          }\r\n        }\r\n        return false\r\n      }\r\n    )\r\n\r\n    // console.log(\r\n    //   hasRelationsCrud,\r\n    //   hasRelationsCrud_onTabs,\r\n    //   hasRelationsCrud_onColumns\r\n    // )\r\n    return (\r\n      hasRelationsCrud || hasRelationsCrud_onTabs || hasRelationsCrud_onColumns\r\n    )\r\n  }\r\n\r\n  const reloadOtherPage = (type) => {\r\n    if (type === \"edit\") {\r\n      if (pageAttr?.crudOpt?.afterEditReloadOtherPage) {\r\n        setTimeout(() => {\r\n          pageAttr?.crudOpt?.afterEditReloadOtherPage?.map((url) => {\r\n            const store_to_reset = url.replaceAll(\"/\", \"_\")\r\n            if (store.pageData[store_to_reset]?.data) {\r\n              dispatch(resetData(store_to_reset))\r\n            }\r\n          })\r\n        }, 1000)\r\n      }\r\n    } else if (type === \"add\") {\r\n      if (pageAttr?.crudOpt?.afterAddReloadOtherPage) {\r\n        setTimeout(() => {\r\n          pageAttr?.crudOpt?.afterAddReloadOtherPage?.map((url) => {\r\n            const store_to_reset = url.replaceAll(\"/\", \"_\")\r\n            if (store.pageData[store_to_reset]?.data) {\r\n              dispatch(resetData(store_to_reset))\r\n            }\r\n          })\r\n        }, 1000)\r\n      }\r\n\r\n      if (pageAttr?.crudOpt?.afterAddReloadOtherDetailPage) {\r\n        pageAttr?.crudOpt?.afterAddReloadOtherDetailPage?.map((url) => {\r\n          const store_to_reset = url.replaceAll(\"/\", \"_\")\r\n          if (store.pageData[store_to_reset]?.selectedData) {\r\n            const current_id = store.pageData[store_to_reset].selectedData?.id\r\n            dispatch(\r\n              getDataById({\r\n                id: current_id,\r\n                storeName: store_to_reset,\r\n                endpointName:\r\n                  store.pageAttributes[store_to_reset]?.crudOpt?.endpointName\r\n              })\r\n            )\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  const redirectOtherPage = (type, payload, defaultUrl) => {\r\n    let result = false\r\n    let resultCount = 0\r\n    let operator = false\r\n\r\n    let redirectPageCondition =\r\n      type === \"edit\"\r\n        ? pageAttr?.crudOpt?.afterEditRedirectPageCondition\r\n        : pageAttr?.crudOpt?.afterAddRedirectPageCondition\r\n    if (redirectPageCondition) {\r\n      redirectPageCondition?.map((it) => {\r\n        ////fungsi ini seharusnya sama dengan check condition di dynamicForm\r\n        let fieldName = it?.fieldName\r\n        let fieldValue = fieldName.includes(\".\")\r\n          ? getDepthValue(payload, fieldName, null)\r\n          : payload[fieldName]\r\n\r\n        if (it?.operator && it?.value) {\r\n          operator = true\r\n          if (it?.valueType === \"datetime\" || it?.valueType === \"date\") {\r\n            const newfieldValue = new Date(fieldValue)\r\n\r\n            let newValue = null\r\n            if (it?.value === \"today\") {\r\n              newValue = new Date()\r\n            } else {\r\n              newValue = new Date(it?.value)\r\n            }\r\n\r\n            if (it?.operator === \">\") {\r\n              result = newfieldValue > newValue\r\n            } else if (it?.operator === \">=\") {\r\n              result = newfieldValue >= newValue\r\n            } else if (it?.operator === \"<\") {\r\n              result = newfieldValue < newValue\r\n            } else if (it?.operator === \"<=\") {\r\n              result = newfieldValue <= newValue\r\n            } else {\r\n              result = newfieldValue === newValue\r\n            }\r\n          } else if (it?.valueType === \"boolean\") {\r\n            if (it?.operator === \"===\") {\r\n              result = fieldValue === it?.value\r\n            } else if (it?.operator === \"!==\") {\r\n              result = fieldValue !== it?.value\r\n            }\r\n          } else {\r\n            result = eval(`\"${fieldValue}\"${it?.operator}\"${it?.value}\"`)\r\n          }\r\n        } else {\r\n          resultCount++\r\n          result =\r\n            result +\r\n            (fieldValue !== null &&\r\n              fieldValue !== undefined &&\r\n              fieldValue !== \"undefined\" &&\r\n              fieldValue !== \"\")\r\n        }\r\n      })\r\n    }\r\n\r\n    let redirectPageAttr =\r\n      type === \"edit\"\r\n        ? pageAttr?.crudOpt?.afterEditRedirectPage\r\n        : pageAttr?.crudOpt?.afterAddRedirectPage\r\n\r\n    if (!result) {\r\n      if (defaultUrl) {\r\n        return navigate(defaultUrl)\r\n      }\r\n    } else {\r\n      if (redirectPageAttr) {\r\n        return navigate(`/dyn_pages/${redirectPageAttr}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  const defaultPayload = {\r\n    storeName: storeName,\r\n    endpointName: pageAttr?.crudOpt?.endpointName,\r\n    baseUrl: pageAttr?.crudOpt?.baseUrl,\r\n    callback_page: window.location.href\r\n  }\r\n\r\n  const updateDataToApi = (data, postAfterPostData = null) => {\r\n    data = { ...data, ...defaultPayload }\r\n    const url1 = location.pathname.slice(0, location.pathname.lastIndexOf(\"/\"))\r\n    const url2 = url1.slice(0, url1.lastIndexOf(\"/\"))\r\n    // console.log(data)\r\n    setLoadingText(\r\n      `${t(\"Updating\")} ${t(pageAttr.pageTitle)} ${t(\"Detail\")} Data`\r\n    )\r\n    setLoadingPostPut(!loadingPostPut)\r\n    if (pageAttr?.crudOpt?.gridTheme === \"treeview\") {\r\n      dispatch(putDataTree(data))\r\n        .then((res) => {\r\n          setLoadingPostPut(!loadingPostPut)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            if (pageAttr?.crudOpt?.getApiSummaryAfterPut) {\r\n              dispatch(\r\n                getSummaryData({\r\n                  endpointName: pageAttr?.crudOpt?.endpointName,\r\n                  storeName: storeName,\r\n                  baseUrl: pageAttr?.crudOpt?.baseUrl\r\n                })\r\n              )\r\n            }\r\n            reloadOtherPage(\"edit\")\r\n\r\n            redirectOtherPage(\"edit\", data, url2)\r\n            // navigate(url2)\r\n            succesToast(\"edit\")\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            errorToast(res)\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error)\r\n          errorToast(error)\r\n        })\r\n    } else {\r\n      dispatch(putData(data))\r\n        .then((res) => {\r\n          // console.log(res)\r\n          setLoadingPostPut(false)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            // if (postAfterPostData) {\r\n            //   dispatch(postData(data))\r\n            //     .then((res) => {\r\n            //       setLoadingPostPut(false)\r\n            //       if (res.meta.requestStatus === \"fulfilled\") {\r\n            //         succesToast(\"add\")\r\n            //       } else if (res.meta.requestStatus === \"rejected\") {\r\n            //         errorToast(res)\r\n            //       }\r\n            //     })\r\n            //     .catch((error) => {\r\n            //       errorToast(error)\r\n            //     })\r\n            // }\r\n            if (pageAttr?.crudOpt?.getApiSummaryAfterPut) {\r\n              dispatch(\r\n                getSummaryData({\r\n                  endpointName: pageAttr?.crudOpt?.endpointName,\r\n                  storeName: storeName,\r\n                  baseUrl: pageAttr?.crudOpt?.baseUrl\r\n                })\r\n              )\r\n            }\r\n            reloadOtherPage(\"edit\")\r\n\r\n            redirectOtherPage(\"edit\", data, url2)\r\n            succesToast(\"edit\")\r\n            // navigate(url2)\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            errorToast(res)\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error)\r\n          errorToast(error)\r\n        })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = async (\r\n    data,\r\n    postAfterPostData = null,\r\n    saveAsState = false\r\n  ) => {\r\n    data = { ...data, ...defaultPayload }\r\n    let url1 = location.pathname.slice(0, location.pathname.lastIndexOf(\"/\"))\r\n    setLoadingText(`${t(`Creating`)} ${pageAttr.pageTitle}`)\r\n    setLoadingPostPut(true)\r\n    dispatch(postData(data))\r\n      .then((res) => {\r\n        setLoadingPostPut(false)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          // let hasRelationsCrud = pageAttr?.crudOpt?.data?.dynamicForm.some(\r\n          //   (obj) => obj?.type === \"relationsCrud\" || obj?.relationsCrud\r\n          // )\r\n\r\n          // console.log(hasRelationCrud(), saveAsState)\r\n          if (hasRelationCrud() && !saveAsState) {\r\n            let generatedData = res?.payload?.data?.data\r\n            let generatedId = generatedData?.id\r\n            if (generatedId) {\r\n              if (!pageAttr?.crudOpt?.detailFromGrid) {\r\n                url1 = `${location.pathname.slice(\r\n                  0,\r\n                  location.pathname.lastIndexOf(\"/\")\r\n                )}/edit/${generatedId}?refresh=true`\r\n              } else {\r\n                url1 = `${location.pathname.slice(\r\n                  0,\r\n                  location.pathname.lastIndexOf(\"/\")\r\n                )}/edit/${generatedId}`\r\n                dispatch(\r\n                  setSelectedData({\r\n                    rowData: generatedData,\r\n                    storeName: storeName\r\n                  })\r\n                ).then((resss) => {})\r\n              }\r\n            }\r\n          }\r\n\r\n          if (saveAsState) {\r\n            url1 = url1.replaceAll(\"/edit\", \"\").replaceAll(\"/add\", \"\")\r\n          }\r\n\r\n          succesToast(\"add\")\r\n          if (pageAttr?.crudOpt?.getApiSummaryAfterPost) {\r\n            dispatch(\r\n              getSummaryData({\r\n                endpointName: pageAttr?.crudOpt?.endpointName,\r\n                storeName: storeName,\r\n                baseUrl: pageAttr?.crudOpt?.baseUrl\r\n              })\r\n            )\r\n          }\r\n          reloadOtherPage(\"add\")\r\n          // console.log(url1)\r\n          navigate(url1)\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          errorToast(res)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        errorToast(error)\r\n      })\r\n  }\r\n\r\n  const postDataToApiMulti = (data) => {\r\n    data = { ...data, ...defaultPayload }\r\n    let url1 = location.pathname.slice(0, location.pathname.lastIndexOf(\"/\"))\r\n    setLoadingText(`${t(`Creating`)} ${pageAttr.pageTitle}`)\r\n    setLoadingPostPut(true)\r\n    dispatch(postDataMulti(data))\r\n      .then((res) => {\r\n        setLoadingPostPut(false)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          if (hasRelationCrud()) {\r\n            let generatedData = res?.payload?.data?.data\r\n            let generatedId = generatedData?.id\r\n            if (generatedId) {\r\n              if (!pageAttr?.crudOpt?.detailFromGrid) {\r\n                url1 = `${location.pathname.slice(\r\n                  0,\r\n                  location.pathname.lastIndexOf(\"/\")\r\n                )}/edit/${generatedId}?refresh=true`\r\n              } else {\r\n                url1 = `${location.pathname.slice(\r\n                  0,\r\n                  location.pathname.lastIndexOf(\"/\")\r\n                )}/edit/${generatedId}`\r\n                dispatch(\r\n                  setSelectedData({\r\n                    rowData: generatedData,\r\n                    storeName: storeName\r\n                  })\r\n                ).then((resss) => {})\r\n              }\r\n            }\r\n          }\r\n          navigate(url1)\r\n          succesToast(\"add\")\r\n          if (pageAttr?.crudOpt?.getApiSummaryAfterPost) {\r\n            dispatch(\r\n              getSummaryData({\r\n                endpointName: pageAttr?.crudOpt?.endpointName,\r\n                storeName: storeName,\r\n                baseUrl: pageAttr?.crudOpt?.baseUrl\r\n              })\r\n            )\r\n          }\r\n\r\n          reloadOtherPage(\"add\")\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          errorToast(res)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        errorToast(error)\r\n      })\r\n  }\r\n\r\n  const handleFormSubmit = (\r\n    data,\r\n    postAfterPostData = null,\r\n    saveAsState = false\r\n  ) => {\r\n    ///prevent duplicate event with modal because relationsCrud FORM on FOrm / nested form\r\n    // console.log(data)\r\n    if ((pageType === \"edit\" || pageType === \"view\") && !saveAsState) {\r\n      updateDataToApi(data, postAfterPostData)\r\n    } else {\r\n      if (!saveAsState) {\r\n        if (data?.repeater) {\r\n          postDataToApiMulti(data, postAfterPostData)\r\n        } else {\r\n          postDataToApi(data, postAfterPostData)\r\n        }\r\n      } else {\r\n        // console.log(saveAsState)\r\n        // console.log(data)\r\n        // console.log(postAfterPostData)\r\n        postDataToApi(data, postAfterPostData, saveAsState)\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleReset() {\r\n    dispatch(resetSelectedData(storeName))\r\n    if (searchParams.get(\"isOrigin\") === \"true\") {\r\n      return navigate(-1)\r\n    } else {\r\n      if (pageType === \"edit\" || pageType === \"view\") {\r\n        const url1 = location.pathname.slice(\r\n          0,\r\n          location.pathname.lastIndexOf(\"/\")\r\n        )\r\n        const url2 = url1.slice(0, url1.lastIndexOf(\"/\"))\r\n        if (lastMenuTabs) {\r\n          let find = lastMenuTabs.findIndex(\r\n            (item) => item.navLink === location.pathname\r\n          )\r\n          if (find !== -1) {\r\n            setLastMenuTabs(null, url2, null)\r\n            return navigate(url2)\r\n          } else {\r\n            return navigate(url2)\r\n          }\r\n        } else {\r\n          return navigate(url2)\r\n        }\r\n      } else {\r\n        if (lastMenuTabs) {\r\n          let find = lastMenuTabs.findIndex(\r\n            (item) => item.navLink === location.pathname\r\n          )\r\n          if (find !== -1) {\r\n            const url1 = location.pathname.slice(\r\n              0,\r\n              location.pathname.lastIndexOf(\"/\")\r\n            )\r\n            setLastMenuTabs(null, url1, null)\r\n            return navigate(url1)\r\n          } else {\r\n            return navigate(-1)\r\n          }\r\n        } else {\r\n          return navigate(-1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleResetRel() {\r\n    return navigate(`${location.pathname.replaceAll(`/${relPageId}`, \"\")}`, {\r\n      replace: true\r\n    })\r\n  }\r\n\r\n  const storeMenu = useSelector((state) => state.my_menu)\r\n  const getPageAttr = async (sourceType) => {\r\n    // console.log(window.location.pathname)\r\n    let dynamicPartUrl = window.location.pathname.replace(\r\n      /\\/(edit|view|add)(\\/.*)?$/,\r\n      \"\"\r\n    )\r\n    // console.log(dynamicPartUrl)\r\n    let currentMenuData = await storeMenu?.dataMyMenu?.find(\r\n      (item) => item?.routePath === dynamicPartUrl\r\n    )\r\n    const needFetch = currentMenuData?.fetch\r\n    if (needFetch) {\r\n      const axiosSso = useJwt.ssoAxiosInterceptor\r\n      await axiosSso\r\n        .get(`/api/my_info/menu/${currentMenuData.id}`)\r\n        .then((res) => {\r\n          // console.log(res)\r\n          const data = res?.data?.data\r\n          return data\r\n        })\r\n        .then((data) => {\r\n          // console.log(data)\r\n          setPageAttr(data)\r\n          // console.log(data)\r\n          const storeNameFix = moduleId ? `${moduleId}_${pageId}` : `${pageId}`\r\n          setStoreName(storeNameFix)\r\n          dispatch(setStorePageAttributes({ storeName: storeNameFix, data }))\r\n          return data\r\n        })\r\n        .then((ress) => {\r\n          initDetailData(ress)\r\n        })\r\n        .finally((_) => {\r\n          setLoadingFirst(false)\r\n          setLoading(false)\r\n        })\r\n        .catch((error) => {\r\n          console.error(error)\r\n          setLoadingFirst(false)\r\n          setLoading(false)\r\n        })\r\n    } else {\r\n      const timestamp = new Date().getTime()\r\n      let url = `${window.location.origin}/pageAttributes/${pageId}.json?timestamp=${timestamp}`\r\n      if (moduleId) {\r\n        if (moduleId === \"_admin_\") {\r\n          await import(`@src/views/admin_pages/${pageId}.json`)\r\n            .then((res) => {\r\n              const data = res.default\r\n              setPageAttr(data)\r\n              // console.log(data)\r\n              const storeNameFix = moduleId\r\n                ? `${moduleId}_${pageId}`\r\n                : `${pageId}`\r\n              setStoreName(storeNameFix)\r\n              dispatch(\r\n                setStorePageAttributes({ storeName: storeNameFix, data })\r\n              )\r\n              return data\r\n            })\r\n            .then((ress) => {\r\n              initDetailData(ress)\r\n            })\r\n            .finally((_) => {\r\n              setLoadingFirst(false)\r\n              setLoading(false)\r\n            })\r\n            .catch((error) => {\r\n              console.error(error)\r\n              setLoadingFirst(false)\r\n              setLoading(false)\r\n            })\r\n        } else {\r\n          const timestamp = new Date().getTime()\r\n          url = `${window.location.origin}/pageAttributes/${moduleId}/${pageId}.json?timestamp=${timestamp}`\r\n          await fetch(url)\r\n            .then(function (res) {\r\n              return res.json()\r\n            })\r\n            .then((data) => {\r\n              // console.log(data)\r\n              setPageAttr(data)\r\n              // console.log(data)\r\n              const storeNameFix = moduleId\r\n                ? `${moduleId}_${pageId}`\r\n                : `${pageId}`\r\n              setStoreName(storeNameFix)\r\n              dispatch(\r\n                setStorePageAttributes({ storeName: storeNameFix, data })\r\n              )\r\n              return data\r\n            })\r\n            .then((ress) => {\r\n              initDetailData(ress)\r\n            })\r\n            .finally((_) => {\r\n              setLoadingFirst(false)\r\n              setLoading(false)\r\n            })\r\n            .catch((error) => {\r\n              console.error(error)\r\n              setLoadingFirst(false)\r\n              setLoading(false)\r\n            })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const initDetailData = (data) => {\r\n    // console.log(\"initDetailData\")\r\n    if (\r\n      (pageType === \"edit\" || pageType === \"view\") &&\r\n      !store.pageData[storeName]?.isLoadingDetail &&\r\n      (!store.pageData[storeName]?.selectedData ||\r\n        searchParams.get(\"refresh\") === \"1\" ||\r\n        searchParams.get(\"refresh\") === \"true\" ||\r\n        store.pageData[storeName]?.selectedData?.id !== parseInt(relId ?? id))\r\n    ) {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(data.pageTitle)}`\r\n      )\r\n      const fixId = relId ?? id\r\n      setLoading(true)\r\n      setLoadingFirst(true)\r\n      dispatch(\r\n        getDataById({\r\n          id: fixId,\r\n          storeName: storeName,\r\n          baseUrl: data?.crudOpt?.baseUrl,\r\n          endpointName:\r\n            data?.crudOpt?.endpointNameDetail ?? data?.crudOpt?.endpointName,\r\n          baseUrl: data?.crudOpt?.baseUrl\r\n        })\r\n      ).then((res) => {\r\n        setLoading(false)\r\n        setLoadingFirst(false)\r\n      })\r\n    } else {\r\n      setLoading(false)\r\n      setLoadingFirst(false)\r\n    }\r\n  }\r\n\r\n  const getFieldTitle = () => {\r\n    if (store.pageAttributes[storeName]?.crudOpt?.detailPageFieldTitle) {\r\n      const detailPageFieldTitle = pageAttr?.crudOpt?.detailPageFieldTitle\r\n      let result = \"\"\r\n      if (Array.isArray(detailPageFieldTitle)) {\r\n        let titleFixArr = []\r\n        detailPageFieldTitle.map((it, i) => {\r\n          let paramValue = parseStrAndField(\r\n            store.pageData[storeName]?.selectedData,\r\n            it\r\n          )\r\n          titleFixArr.push(paramValue)\r\n          result = titleFixArr.join(\r\n            pageAttr?.crudOpt?.detailPageFieldTitleSeparator ?? \" \"\r\n          )\r\n        })\r\n      } else if (\r\n        store.pageData[storeName]?.selectedData?.[detailPageFieldTitle]\r\n      ) {\r\n        result = store.pageData[storeName]?.selectedData?.[detailPageFieldTitle]\r\n      }\r\n      return result\r\n    }\r\n  }\r\n\r\n  const getHeaderTitle = (value) => {\r\n    let result = \"\"\r\n    if (Array.isArray(value)) {\r\n      let values = []\r\n      value.map((it, i) => {\r\n        let paramValue = parseStrAndField(\r\n          store.pageData[storeName]?.selectedData,\r\n          it\r\n        )\r\n        values.push(paramValue)\r\n      })\r\n      result = values.join(\" \")\r\n    } else if (store.pageData[storeName]?.selectedData?.[value]) {\r\n      result = store.pageData[storeName]?.selectedData?.[value]\r\n    }\r\n    return result\r\n  }\r\n\r\n  const checkKeyPresenceInArray = (data, key) =>\r\n    data.some((obj) => Object.keys(obj).includes(key))\r\n\r\n  const getDefaultValuesAdd = () => {\r\n    if (\r\n      pageType !== \"edit\" &&\r\n      pageType !== \"view\" &&\r\n      pageType !== \"add-child\"\r\n    ) {\r\n      let defValues = location.search\r\n        ? location.search\r\n            .slice(1)\r\n            .split(\"&\")\r\n            .map((p) => {\r\n              let cleanP = p.replace(\"?\", \"\")\r\n              let pSplit = cleanP.split(\"=\")\r\n              let getParAlias = pageAttr?.crudOpt?.data?.dynamicForm?.find(\r\n                (item) => item?.queryStrAlias === pSplit[0]\r\n              )\r\n              if (getParAlias) {\r\n                pSplit[0] = getParAlias?.fieldName\r\n              }\r\n              return pSplit\r\n            })\r\n            .reduce(\r\n              (obj, [key, value]) => ({\r\n                ...obj,\r\n                [key]:\r\n                  ////CONVERT VALUE FROM QUERY STRING TO INTEGER IF POSSIBLE\r\n                  !isNaN(value) && (key?.includes(\"id\") || key?.includes(\"Id\"))\r\n                    ? +value\r\n                    : value\r\n              }),\r\n              {}\r\n            )\r\n        : {}\r\n\r\n      // FILL FORM WITH LAST GRID PARAMS IF PAGETYPE === ADD\r\n      let formFillWithFilter = {}\r\n      if (store.pageData[storeName]?.params) {\r\n        const lastParamsKeys = Object.keys(store.pageData[storeName]?.params)\r\n          .length\r\n          ? Object.keys(store.pageData[storeName]?.params)\r\n          : null\r\n\r\n        pageAttr?.crudOpt?.data?.dynamicForm?.map((item, index) => {\r\n          // console.log(\r\n          //   item?.fieldName,\r\n          //   store.pageData[storeName]?.params[item?.fieldName]\r\n          // )\r\n          if (item?.children) {\r\n            item?.children?.map((item_det, index_det) => {\r\n              if (\r\n                lastParamsKeys &&\r\n                store.pageData[storeName]?.params[item_det?.fieldName]\r\n              ) {\r\n                formFillWithFilter[item_det?.fieldName] =\r\n                  store.pageData[storeName]?.params[item_det?.fieldName]\r\n              }\r\n            })\r\n          } else {\r\n            if (\r\n              lastParamsKeys &&\r\n              store.pageData[storeName]?.params[item?.fieldName]\r\n            ) {\r\n              formFillWithFilter[item?.fieldName] =\r\n                store.pageData[storeName]?.params[item?.fieldName]\r\n            }\r\n          }\r\n        })\r\n      }\r\n\r\n      // console.log({ ...defValues, ...formFillWithFilter })\r\n      // setDefValuesAdd({ ...defValues, ...formFillWithFilter })\r\n      return { ...defValues, ...formFillWithFilter }\r\n    } else {\r\n      return {}\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // console.log(storeName, relPageId, store.pageAttributes[storeName])\r\n\r\n    if (pageId) {\r\n      setLoadingFirst(true)\r\n      if (!store.pageAttributes[storeName]) {\r\n        // getPageAttr(\"file\")\r\n        getPageAttr()\r\n      } else {\r\n        if (\r\n          searchParams.get(\"refresh\") === \"1\" ||\r\n          searchParams.get(\"refresh\") === \"true\"\r\n        ) {\r\n          initDetailData(store.pageAttributes[storeName])\r\n        }\r\n\r\n        // if (\r\n        //   pageType !== \"edit\" &&\r\n        //   pageType !== \"view\" &&\r\n        //   pageType !== \"add-child\"\r\n        // ) {\r\n        //   let defValues = location.search\r\n        //     ? location.search\r\n        //         .slice(1)\r\n        //         .split(\"&\")\r\n        //         .map((p) => p.split(\"=\"))\r\n        //         .reduce(\r\n        //           (obj, [key, value]) => ({\r\n        //             ...obj,\r\n        //             [key]: value\r\n        //           }),\r\n        //           {}\r\n        //         )\r\n        //     : {}\r\n\r\n        //   // FILL FORM WITH LAST GRID PARAMS IF PAGETYPE === ADD\r\n        //   let formFillWithFilter = {}\r\n        //   if (store.pageData[storeName]?.params) {\r\n        //     const lastParamsKeys = Object.keys(\r\n        //       store.pageData[storeName]?.params\r\n        //     ).length\r\n        //       ? Object.keys(store.pageData[storeName]?.params)\r\n        //       : null\r\n\r\n        //     pageAttr?.crudOpt?.data?.dynamicForm.map((item, index) => {\r\n        //       // console.log(\r\n        //       //   item?.fieldName,\r\n        //       //   store.pageData[storeName]?.params[item?.fieldName]\r\n        //       // )\r\n        //       if (\r\n        //         lastParamsKeys &&\r\n        //         store.pageData[storeName]?.params[item?.fieldName]\r\n        //       ) {\r\n        //         formFillWithFilter[item?.fieldName] =\r\n        //           store.pageData[storeName]?.params[item?.fieldName]\r\n        //       }\r\n        //     })\r\n        //   }\r\n\r\n        //   // console.log({ ...defValues, ...formFillWithFilter })\r\n        //   setDefValuesAdd({ ...defValues, ...formFillWithFilter })\r\n        // }\r\n\r\n        setPageAttr(store.pageAttributes[storeName])\r\n        // console.log(`get getPageAttr from cache`)\r\n        setLoadingFirst(false)\r\n        setLoading(false)\r\n      }\r\n      // if (!relPageId && pageAttr) {\r\n      //   initDetailData(pageAttr)\r\n      // }\r\n    }\r\n\r\n    Prism.highlightAll()\r\n    // setLastMenuTabs(null, window.location)\r\n  }, [pageAttr, store.pageAttributes[storeName]])\r\n\r\n  const storeDeveloper = useSelector((state) => state.developer)\r\n  const setEditModeJsonState = (e, isDiscard = false) => {\r\n    e.preventDefault()\r\n    dispatch(\r\n      isDiscard\r\n        ? setEditModeJson({ storeName })\r\n        : setEditModeJson({\r\n            storeName,\r\n            pageAttr: JSON.stringify(pageAttr, null, 2)\r\n          })\r\n    ).then(() => {})\r\n  }\r\n\r\n  const [editorValid, setEditorValid] = useState(true)\r\n  const [tempJsonAttr, setTempJsonAttr] = useState(\"\")\r\n  function handleEditorChange(value, event) {\r\n    setEditorValid(true)\r\n    setTempJsonAttr(value)\r\n    dispatch(\r\n      setEditModeJsonAttr({\r\n        storeName,\r\n        pageAttr: value\r\n      })\r\n    ).then((res) => {\r\n      // console.log(res)\r\n    })\r\n  }\r\n\r\n  function handleEditorValidation(markers) {\r\n    setEditorValid(markers?.length === 0)\r\n  }\r\n\r\n  function saveJson(e) {\r\n    const changedJson = JSON.parse(tempJsonAttr)\r\n    dispatch(setStorePageAttributes({ storeName, data: {} })).then((x) => {\r\n      dispatch(setStorePageAttributes({ storeName, data: changedJson })).then(\r\n        (result) => {\r\n          console.log(result)\r\n          setPageAttr(changedJson)\r\n\r\n          setTimeout(() => {\r\n            renderPage()\r\n          }, 50)\r\n\r\n          setTimeout(() => {\r\n            setEditModeJsonState(e)\r\n          }, 100)\r\n        }\r\n      )\r\n    })\r\n  }\r\n\r\n  if (pageAttr && store.pageAttributes[storeName]) {\r\n    return !loading && !store.pageData[storeName]?.isLoadingDetail ? (\r\n      pageType === \"edit\" || pageType === \"view\" || pageType === \"add-child\" ? (\r\n        <Fragment>\r\n          {\r\n            // storeDeveloper.editMode && (\r\n            //   <div className=\"d-none d-md-flex mb-1 justify-content-end\">\r\n            //     <Button\r\n            //       onClick={(e) => setEditModeJsonState(e)}\r\n            //       color=\"relief-dark\"\r\n            //       className=\"btn-sm\"\r\n            //     >\r\n            //       {renderIcon(\"material:data_object\", \"align-middle\", 12)}\r\n            //       <span className=\"align-middle ms-25\">{t(\"JSON\")}</span>\r\n            //     </Button>\r\n            //   </div>\r\n            // )\r\n          }\r\n          {store.pageData[storeName]?.selectedData || relPageId ? (\r\n            <div className=\"app-user-view\">\r\n              <Row>\r\n                <Col\r\n                  xl=\"12\"\r\n                  lg=\"12\"\r\n                  xs={{ order: 1 }}\r\n                  md={{ order: 0, size: 6 }}\r\n                >\r\n                  <UILoader\r\n                    blocking={loadingPostPut}\r\n                    overlayColor=\"rgba(115, 103, 240, .1)\"\r\n                    loader={<Loader loadingText={loadingText} />}\r\n                  >\r\n                    <Card>\r\n                      <CardHeader className=\"pe-0\">\r\n                        <Row className=\"w-100 align-items-center\">\r\n                          <Col md={8} xs={10}>\r\n                            {pageAttr?.crudOpt?.detailPageFieldTitleHeader &&\r\n                            (pageType === \"edit\" || pageType === \"view\") ? (\r\n                              <h2 className=\"saba-detail-header mb-25\">\r\n                                {getHeaderTitle(\r\n                                  pageAttr?.crudOpt?.detailPageFieldTitleHeader\r\n                                )}\r\n                              </h2>\r\n                            ) : (\r\n                              <h2 className=\"saba-detail-header mb-25\">\r\n                                {pageType === \"edit\" ? t(\"Edit\") : t(\"Detail\")}{\" \"}\r\n                                {t(pageAttr.pageTitle)}\r\n                              </h2>\r\n                            )}\r\n\r\n                            {pageAttr?.crudOpt?.detailPageFieldSubHeader &&\r\n                              (pageType === \"edit\" || pageType === \"view\") && (\r\n                                <small className=\"saba-detail-sub-header\">\r\n                                  {getHeaderTitle(\r\n                                    pageAttr?.crudOpt?.detailPageFieldSubHeader\r\n                                  )}\r\n                                </small>\r\n                              )}\r\n                          </Col>\r\n                          <Col\r\n                            className={`pe-50 ${getFieldTitle() ? \"mb-1\" : \"\"}`}\r\n                            md={4}\r\n                            xs={2}\r\n                          >\r\n                            <div className=\"d-flex align-items-center  justify-content-end\">\r\n                              {pageAttr?.crudOpt?.data?.relationsCrud &&\r\n                                pageAttr?.crudOpt?.data?.relationsCrud?.data\r\n                                  ?.length > 0 && (\r\n                                  <RelationsCrudMenu\r\n                                    relationsCrudData={\r\n                                      pageAttr.crudOpt.data.relationsCrud\r\n                                    }\r\n                                    storeName={storeName}\r\n                                    pageTitle={pageAttr.pageTitle}\r\n                                  />\r\n                                )}\r\n                              {(pageAttr?.crudOpt?.data?.relationsCrud?.data\r\n                                ?.length > 1 ||\r\n                                !relPageId) &&\r\n                                pageAttr?.pageType !== \"detail-page\" && (\r\n                                  <Fragment>\r\n                                    <Button.Ripple\r\n                                      className=\"ms-1 d-none d-md-block\"\r\n                                      id=\"btn-detail-back\"\r\n                                      outline\r\n                                      onClick={(e) => {\r\n                                        !relPageId\r\n                                          ? handleReset()\r\n                                          : handleResetRel()\r\n                                      }}\r\n                                      color=\"secondary\"\r\n                                    >\r\n                                      {renderIcon(\r\n                                        \"material:arrow_back\",\r\n                                        // \"me-1 align-middle\",\r\n                                        \"align-middle\",\r\n                                        16\r\n                                      )}\r\n                                      {/* <span className=\"align-middle ms-25\">\r\n                                    {t(\"Back\")}\r\n                                  </span> */}\r\n                                    </Button.Ripple>\r\n                                    <UncontrolledTooltip target=\"btn-detail-back\">\r\n                                      {t(\"Back\")}\r\n                                    </UncontrolledTooltip>\r\n                                  </Fragment>\r\n                                )}\r\n                            </div>\r\n                          </Col>\r\n                          {store.pageData[storeName]?.selectedData &&\r\n                            getFieldTitle() &&\r\n                            getFieldTitle() !== \"\" && (\r\n                              <Col md={12}>\r\n                                <p className=\"font-small-3 fw-bolder mb-0 saba-detail-header-title\">\r\n                                  {getFieldTitle()}\r\n                                </p>\r\n                              </Col>\r\n                            )}\r\n                        </Row>\r\n                      </CardHeader>\r\n                      <CardBody>\r\n                        {!relPageId || (relPageType && relId) ? (\r\n                          <DynamicForm\r\n                            key={`dynamicForm_${storeName}`}\r\n                            pageAttr={pageAttr}\r\n                            dynamicForm={pageAttr?.crudOpt?.data?.dynamicForm}\r\n                            storeName={storeName}\r\n                            handleReset={handleReset}\r\n                            handleFormSubmit={handleFormSubmit}\r\n                            defaultFormValues={JSON.parse(\r\n                              JSON.stringify(\r\n                                store.pageData[storeName]?.selectedData\r\n                              ).replace(/\\:null/gi, ':\"\"')\r\n                            )}\r\n                            editForm={true}\r\n                            pageType={pageType}\r\n                          />\r\n                        ) : (\r\n                          // <RelationsCrud />\r\n                          <DynamicPage\r\n                            initialPageId={relPageId}\r\n                            initialPageAttr={\r\n                              pageAttr.crudOpt.data.relationsCrud?.data.filter(\r\n                                (item) => item.pageId === relPageId\r\n                              )[0]\r\n                            }\r\n                          />\r\n                        )}\r\n                      </CardBody>\r\n                    </Card>\r\n                  </UILoader>\r\n                </Col>\r\n                {/* <Col xl=\"12\" lg=\"12\" xs={{ order: 0 }} md={{ order: 1, size: 7 }}>\r\n                  {(pageType) === \"edit\" && (\r\n                    <ExtraCrud\r\n                      extraCrud={pageAttr?.crudOpt?.data?.extraCrud}\r\n                      storeName={storeName}\r\n                      id={relId ?? id}\r\n                    />\r\n                  )}\r\n                </Col> */}\r\n              </Row>\r\n            </div>\r\n          ) : (\r\n            <Alert color=\"danger\">\r\n              <h4 className=\"alert-heading\">\r\n                {t(pageAttr.pageTitle)} {t(\"not found\")}\r\n              </h4>\r\n              <div className=\"alert-body\">\r\n                {t(`${pageAttr.pageTitle} with id`)}: {relId ?? id}{\" \"}\r\n                {t(\"doesn't exist.\")}:{\" \"}\r\n              </div>\r\n            </Alert>\r\n          )}\r\n        </Fragment>\r\n      ) : (\r\n        <div className=\"app-user-view\">\r\n          <Row>\r\n            <Col xl=\"12\" lg=\"12\" xs={{ order: 1 }} md={{ order: 0, size: 5 }}>\r\n              <UILoader\r\n                blocking={loadingPostPut}\r\n                overlayColor=\"rgba(115, 103, 240, .1)\"\r\n                loader={<Loader loadingText={loadingText} />}\r\n              >\r\n                <Card>\r\n                  <CardHeader>\r\n                    <Row className=\"w-100 align-items-center mx-0\">\r\n                      <Col md={8} xs={10} className=\"ps-0\">\r\n                        <h2 className=\"saba-detail-header\">\r\n                          {t(\"Add\")} {t(pageAttr.pageTitle)}\r\n                        </h2>\r\n                      </Col>\r\n                      <Col\r\n                        className={`pe-0 ${getFieldTitle() ? \"mb-1\" : \"\"}`}\r\n                        md={4}\r\n                        xs={2}\r\n                      >\r\n                        <div className=\"d-flex align-items-center  justify-content-end\">\r\n                          <Button.Ripple\r\n                            className=\"ms-1 d-none d-md-block\"\r\n                            id=\"btn-detail-back\"\r\n                            outline\r\n                            onClick={(e) => {\r\n                              !relPageId ? handleReset() : handleResetRel()\r\n                            }}\r\n                            color=\"secondary\"\r\n                          >\r\n                            {renderIcon(\r\n                              \"material:arrow_back\",\r\n                              // \"me-1 align-middle\",\r\n                              \"align-middle\",\r\n                              16\r\n                            )}\r\n                            {/* <span className=\"align-middle ms-25\">\r\n                                    {t(\"Back\")}\r\n                                  </span> */}\r\n                          </Button.Ripple>\r\n                          <UncontrolledTooltip target=\"btn-detail-back\">\r\n                            {t(\"Back\")}\r\n                          </UncontrolledTooltip>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </CardHeader>\r\n                  <CardBody>\r\n                    <DynamicForm\r\n                      dynamicForm={pageAttr?.crudOpt?.data?.dynamicForm}\r\n                      pageAttr={pageAttr}\r\n                      storeName={storeName}\r\n                      handleReset={handleReset}\r\n                      handleFormSubmit={handleFormSubmit}\r\n                      // defaultFormValues={defValuesAdd}\r\n                      defaultFormValues={getDefaultValuesAdd()}\r\n                      editForm={false}\r\n                      pageType={pageType}\r\n                    />\r\n                  </CardBody>\r\n                </Card>\r\n              </UILoader>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      )\r\n    ) : (\r\n      <div className=\"app-user-view\">\r\n        <Col xl=\"12\" lg=\"12\" xs={{ order: 1 }} md={{ order: 0, size: 5 }}>\r\n          <Card>\r\n            <CardHeader>\r\n              <Skeleton\r\n                sx={{ bgcolor: colors.dark.light }}\r\n                animation=\"wave\"\r\n                className=\"\"\r\n                width={420}\r\n                height={40}\r\n              />\r\n            </CardHeader>\r\n            <CardBody>\r\n              <DynamicFormLoading\r\n                dynamicForm={pageAttr?.crudOpt?.data?.dynamicForm}\r\n                storeName={storeName}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </div>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n\r\n  // return pageAttr && store.pageAttributes[storeName] ? (\r\n  //   !loading && !store.pageData[storeName]?.isLoadingDetail ? (\r\n  //     pageType === \"edit\" || pageType === \"view\" || pageType === \"add-child\" ? (\r\n  //       store.pageData[storeName]?.selectedData || relPageId ? (\r\n  //         <div className=\"app-user-view\">\r\n  //           <Row>\r\n  //             <Col xl=\"12\" lg=\"12\" xs={{ order: 1 }} md={{ order: 0, size: 6 }}>\r\n  //               <UILoader\r\n  //                 blocking={loadingPostPut}\r\n  //                 overlayColor=\"rgba(115, 103, 240, .1)\"\r\n  //                 loader={<Loader loadingText={loadingText} />}\r\n  //               >\r\n  //                 <Card>\r\n  //                   <CardHeader className=\"pe-0\">\r\n  //                     <Row className=\"w-100 align-items-center\">\r\n  //                       <Col md={8} xs={10}>\r\n  //                         {pageAttr?.crudOpt?.detailPageFieldTitleHeader &&\r\n  //                         (pageType === \"edit\" || pageType === \"view\") ? (\r\n  //                           <h2 className=\"saba-detail-header mb-25\">\r\n  //                             {getHeaderTitle(\r\n  //                               pageAttr?.crudOpt?.detailPageFieldTitleHeader\r\n  //                             )}\r\n  //                           </h2>\r\n  //                         ) : (\r\n  //                           <h2 className=\"saba-detail-header mb-25\">\r\n  //                             {pageType === \"edit\" ? t(\"Edit\") : t(\"Detail\")}{\" \"}\r\n  //                             {t(pageAttr.pageTitle)}\r\n  //                           </h2>\r\n  //                         )}\r\n\r\n  //                         {pageAttr?.crudOpt?.detailPageFieldSubHeader &&\r\n  //                           (pageType === \"edit\" || pageType === \"view\") && (\r\n  //                             <small className=\"saba-detail-sub-header\">\r\n  //                               {getHeaderTitle(\r\n  //                                 pageAttr?.crudOpt?.detailPageFieldSubHeader\r\n  //                               )}\r\n  //                             </small>\r\n  //                           )}\r\n  //                       </Col>\r\n  //                       <Col\r\n  //                         className={`pe-50 ${getFieldTitle() ? \"mb-1\" : \"\"}`}\r\n  //                         md={4}\r\n  //                         xs={2}\r\n  //                       >\r\n  //                         <div className=\"d-flex align-items-center  justify-content-end\">\r\n  //                           {pageAttr?.crudOpt?.data?.relationsCrud &&\r\n  //                             pageAttr?.crudOpt?.data?.relationsCrud?.data\r\n  //                               ?.length > 0 && (\r\n  //                               <RelationsCrudMenu\r\n  //                                 relationsCrudData={\r\n  //                                   pageAttr.crudOpt.data.relationsCrud\r\n  //                                 }\r\n  //                                 storeName={storeName}\r\n  //                                 pageTitle={pageAttr.pageTitle}\r\n  //                               />\r\n  //                             )}\r\n  //                           {(pageAttr?.crudOpt?.data?.relationsCrud?.data\r\n  //                             ?.length > 1 ||\r\n  //                             !relPageId) &&\r\n  //                             pageAttr?.pageType !== \"detail-page\" && (\r\n  //                               <Fragment>\r\n  //                                 <Button.Ripple\r\n  //                                   className=\"ms-1 d-none d-md-block\"\r\n  //                                   id=\"btn-detail-back\"\r\n  //                                   outline\r\n  //                                   onClick={(e) => {\r\n  //                                     !relPageId\r\n  //                                       ? handleReset()\r\n  //                                       : handleResetRel()\r\n  //                                   }}\r\n  //                                   color=\"secondary\"\r\n  //                                 >\r\n  //                                   {renderIcon(\r\n  //                                     \"material:arrow_back\",\r\n  //                                     // \"me-1 align-middle\",\r\n  //                                     \"align-middle\",\r\n  //                                     16\r\n  //                                   )}\r\n  //                                   {/* <span className=\"align-middle ms-25\">\r\n  //                                 {t(\"Back\")}\r\n  //                               </span> */}\r\n  //                                 </Button.Ripple>\r\n  //                                 <UncontrolledTooltip target=\"btn-detail-back\">\r\n  //                                   {t(\"Back\")}\r\n  //                                 </UncontrolledTooltip>\r\n  //                               </Fragment>\r\n  //                             )}\r\n  //                         </div>\r\n  //                       </Col>\r\n  //                       {store.pageData[storeName]?.selectedData &&\r\n  //                         getFieldTitle() &&\r\n  //                         getFieldTitle() !== \"\" && (\r\n  //                           <Col md={12}>\r\n  //                             <p className=\"font-small-3 fw-bolder mb-0 saba-detail-header-title\">\r\n  //                               {getFieldTitle()}\r\n  //                             </p>\r\n  //                           </Col>\r\n  //                         )}\r\n  //                     </Row>\r\n  //                   </CardHeader>\r\n  //                   <CardBody>\r\n  //                     {!relPageId || (relPageType && relId) ? (\r\n  //                       <DynamicForm\r\n  //                         key={`dynamicForm_${storeName}`}\r\n  //                         pageAttr={pageAttr}\r\n  //                         dynamicForm={pageAttr?.crudOpt?.data?.dynamicForm}\r\n  //                         storeName={storeName}\r\n  //                         handleReset={handleReset}\r\n  //                         handleFormSubmit={handleFormSubmit}\r\n  //                         defaultFormValues={JSON.parse(\r\n  //                           JSON.stringify(\r\n  //                             store.pageData[storeName]?.selectedData\r\n  //                           ).replace(/\\:null/gi, ':\"\"')\r\n  //                         )}\r\n  //                         editForm={true}\r\n  //                         pageType={pageType}\r\n  //                       />\r\n  //                     ) : (\r\n  //                       // <RelationsCrud />\r\n  //                       <DynamicPage\r\n  //                         initialPageId={relPageId}\r\n  //                         initialPageAttr={\r\n  //                           pageAttr.crudOpt.data.relationsCrud?.data.filter(\r\n  //                             (item) => item.pageId === relPageId\r\n  //                           )[0]\r\n  //                         }\r\n  //                       />\r\n  //                     )}\r\n  //                   </CardBody>\r\n  //                 </Card>\r\n  //               </UILoader>\r\n  //             </Col>\r\n  //             {/* <Col xl=\"12\" lg=\"12\" xs={{ order: 0 }} md={{ order: 1, size: 7 }}>\r\n  //               {(pageType) === \"edit\" && (\r\n  //                 <ExtraCrud\r\n  //                   extraCrud={pageAttr?.crudOpt?.data?.extraCrud}\r\n  //                   storeName={storeName}\r\n  //                   id={relId ?? id}\r\n  //                 />\r\n  //               )}\r\n  //             </Col> */}\r\n  //           </Row>\r\n  //         </div>\r\n  //       ) : (\r\n  //         <Alert color=\"danger\">\r\n  //           <h4 className=\"alert-heading\">\r\n  //             {t(pageAttr.pageTitle)} {t(\"not found\")}\r\n  //           </h4>\r\n  //           <div className=\"alert-body\">\r\n  //             {t(`${pageAttr.pageTitle} with id`)}: {relId ?? id}{\" \"}\r\n  //             {t(\"doesn't exist.\")}:{\" \"}\r\n  //           </div>\r\n  //         </Alert>\r\n  //       )\r\n  //     ) : (\r\n  //       <div className=\"app-user-view\">\r\n  //         <Row>\r\n  //           <Col xl=\"12\" lg=\"12\" xs={{ order: 1 }} md={{ order: 0, size: 5 }}>\r\n  //             <UILoader\r\n  //               blocking={loadingPostPut}\r\n  //               overlayColor=\"rgba(115, 103, 240, .1)\"\r\n  //               loader={<Loader loadingText={loadingText} />}\r\n  //             >\r\n  //               <Card>\r\n  //                 <CardHeader>\r\n  //                   <Row className=\"w-100 align-items-center mx-0\">\r\n  //                     <Col md={8} xs={10} className=\"ps-0\">\r\n  //                       <h2 className=\"saba-detail-header\">\r\n  //                         {t(\"Add\")} {t(pageAttr.pageTitle)}\r\n  //                       </h2>\r\n  //                     </Col>\r\n  //                     <Col\r\n  //                       className={`pe-0 ${getFieldTitle() ? \"mb-1\" : \"\"}`}\r\n  //                       md={4}\r\n  //                       xs={2}\r\n  //                     >\r\n  //                       <div className=\"d-flex align-items-center  justify-content-end\">\r\n  //                         <Button.Ripple\r\n  //                           className=\"ms-1 d-none d-md-block\"\r\n  //                           id=\"btn-detail-back\"\r\n  //                           outline\r\n  //                           onClick={(e) => {\r\n  //                             !relPageId ? handleReset() : handleResetRel()\r\n  //                           }}\r\n  //                           color=\"secondary\"\r\n  //                         >\r\n  //                           {renderIcon(\r\n  //                             \"material:arrow_back\",\r\n  //                             // \"me-1 align-middle\",\r\n  //                             \"align-middle\",\r\n  //                             16\r\n  //                           )}\r\n  //                           {/* <span className=\"align-middle ms-25\">\r\n  //                                 {t(\"Back\")}\r\n  //                               </span> */}\r\n  //                         </Button.Ripple>\r\n  //                         <UncontrolledTooltip target=\"btn-detail-back\">\r\n  //                           {t(\"Back\")}\r\n  //                         </UncontrolledTooltip>\r\n  //                       </div>\r\n  //                     </Col>\r\n  //                   </Row>\r\n  //                 </CardHeader>\r\n  //                 <CardBody>\r\n  //                   <DynamicForm\r\n  //                     dynamicForm={pageAttr?.crudOpt?.data?.dynamicForm}\r\n  //                     pageAttr={pageAttr}\r\n  //                     storeName={storeName}\r\n  //                     handleReset={handleReset}\r\n  //                     handleFormSubmit={handleFormSubmit}\r\n  //                     // defaultFormValues={defValuesAdd}\r\n  //                     defaultFormValues={getDefaultValuesAdd()}\r\n  //                     editForm={false}\r\n  //                     pageType={pageType}\r\n  //                   />\r\n  //                 </CardBody>\r\n  //               </Card>\r\n  //             </UILoader>\r\n  //           </Col>\r\n  //         </Row>\r\n  //       </div>\r\n  //     )\r\n  //   ) : (\r\n  //     <div className=\"app-user-view\">\r\n  //       <Col xl=\"12\" lg=\"12\" xs={{ order: 1 }} md={{ order: 0, size: 5 }}>\r\n  //         <Card>\r\n  //           <CardHeader>\r\n  //             <Skeleton\r\n  //               sx={{ bgcolor: colors.dark.light }}\r\n  //               animation=\"wave\"\r\n  //               className=\"\"\r\n  //               width={420}\r\n  //               height={40}\r\n  //             />\r\n  //           </CardHeader>\r\n  //           <CardBody>\r\n  //             <DynamicFormLoading\r\n  //               dynamicForm={pageAttr?.crudOpt?.data?.dynamicForm}\r\n  //               storeName={storeName}\r\n  //             />\r\n  //           </CardBody>\r\n  //         </Card>\r\n  //       </Col>\r\n  //     </div>\r\n  //   )\r\n  // ) : null\r\n}\r\n\r\nexport default DetailPage\r\n"],"sourceRoot":""}