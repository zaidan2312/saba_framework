{"version":3,"sources":["views/apps/role/modal/index.js","@core/components/ui-loader/index.js"],"names":["ModalAddEdit","_ref","_store$selectedData$n","_store$selectedData","_store$selectedData$d","_store$selectedData2","show","setShow","detailPage","formState","setFormState","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","loadingText","setLoadingText","_useForm","useForm","control","setError","handleSubmit","errors","Loader","_jsxs","Fragment","children","_jsx","Spinner","CardText","className","sortedObject","unordered","Object","keys","sort","reduce","obj","key","handleReset","resetSelectedData","Modal","isOpen","toggle","UILoader","blocking","isLoadingAddEdit","isLoadingDetail","loader","ModalHeader","ModalBody","pageTitle","Form","onSubmit","data","storeData","_objectSpread","selectedData","JSON","stringify","countChanges","values","every","field","concat","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","_data$key","length","type","icon","postData","_data$key2","Row","Col","md","xs","Label","for","Controller","defaultValue","name","render","_ref2","Input","invalid","description","_ref3","Button","outline","onClick","props","_classnames","tag","overlayColor","Tag","classnames","_defineProperty","backgroundColor","defaultProps"],"mappings":"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","file":"static/js/54.239867f2.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport \"moment/locale/id\"\r\nimport { Fragment, useContext, useState } from \"react\"\r\nimport { Controller, useForm } from \"react-hook-form\"\r\nimport toast from \"react-hot-toast\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport {\r\n  Button,\r\n  CardText,\r\n  Col,\r\n  Form,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Row\r\n} from \"reactstrap\"\r\nimport {\r\n  getDataById,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  storeName\r\n} from \"../store\"\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nconst ModalAddEdit = ({\r\n  show,\r\n  setShow,\r\n  detailPage,\r\n  formState,\r\n  setFormState\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  const [tgl1, setTgl1] = useState(null)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n  const Loader = () => {\r\n    return (\r\n      <Fragment>\r\n        <Spinner />\r\n        <CardText className=\"mb-0 mt-1\">{t(loadingText)}...</CardText>\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  function sortedObject(unordered) {\r\n    return Object.keys(unordered)\r\n      .sort()\r\n      .reduce((obj, key) => {\r\n        obj[key] = unordered[key]\r\n        return obj\r\n      }, {})\r\n  }\r\n\r\n  const countChanges = (data) => {\r\n    if (formState === \"edit\") {\r\n      const storeData = { ...sortedObject(store.selectedData) }\r\n      delete storeData[\"id\"]\r\n      for (let key in storeData) {\r\n        if (!(key in data)) delete storeData[key]\r\n      }\r\n      // console.log(JSON.stringify(sortedObject(storeData)))\r\n      // console.log(JSON.stringify(sortedObject(data)))\r\n      return (\r\n        JSON.stringify(sortedObject(storeData)) !==\r\n        JSON.stringify(sortedObject(data))\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  const onChangeTgl1 = (event) => {\r\n    setTgl1(event)\r\n  }\r\n\r\n  const updateDataToApi = (data) => {\r\n    if (countChanges(data)) {\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field !== null && field !== \"\"\r\n        })\r\n      ) {\r\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\r\n        dispatch(putData(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            setShow(!show)\r\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n            if (detailPage) {\r\n              dispatch(getDataById(id))\r\n            }\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = (data) => {\r\n    if (\r\n      Object.values(data).every((field) => {\r\n        return field !== null && field !== \"\"\r\n      })\r\n    ) {\r\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\r\n      dispatch(postData(data)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setShow(!show)\r\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n          if (detailPage) {\r\n            dispatch(getDataById(id))\r\n          }\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key] !== null && data[key]?.length === 0) {\r\n          setError(key, {\r\n            type: \"manual\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    dispatch(resetSelectedData())\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={show}\r\n      toggle={() => {\r\n        handleReset()\r\n        setShow(!show)\r\n      }}\r\n      className=\"modal-dialog-centered modal-lg\"\r\n    >\r\n      <UILoader\r\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\r\n        loader={<Loader />}\r\n      >\r\n        <ModalHeader\r\n          className=\"bg-transparent\"\r\n          toggle={() => {\r\n            handleReset()\r\n            setShow(!show)\r\n          }}\r\n        ></ModalHeader>\r\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\r\n          <div className=\"text-center mb-2\">\r\n            <h2 className=\"mb-1\">\r\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\r\n            </h2>\r\n          </div>\r\n          <Form\r\n            onSubmit={\r\n              formState === \"edit\"\r\n                ? handleSubmit(updateDataToApi)\r\n                : handleSubmit(postDataToApi)\r\n            }\r\n          >\r\n            <Row className=\"gy-1 pt-75\">\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"name\">\r\n                  {t(\"Name\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.name ?? \"\"}\r\n                  control={control}\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.name ? \"form-control is-invalid\" : \"form-control\"\r\n                      }\r\n                      id=\"name\"\r\n                      invalid={errors.name && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"description\">\r\n                  {t(\"Description\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.description ?? \"\"}\r\n                  control={control}\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.description\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"description\"\r\n                      invalid={errors.description && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n                <Button\r\n                  type=\"reset\"\r\n                  color=\"secondary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    setFormState(\"add\")\r\n                    setShow(false)\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </ModalBody>\r\n      </UILoader>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ModalAddEdit\r\n","// ** React Imports\r\nimport { Fragment } from \"react\"\r\n\r\n// ** Third Party Components\r\nimport Proptypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\n\r\n// ** Reactstrap Imports\r\nimport { Spinner } from \"reactstrap\"\r\n\r\n// ** Styles\r\nimport \"./ui-loader.scss\"\r\n\r\nconst UILoader = (props) => {\r\n  const { children, blocking, loader, className, tag, overlayColor } = props\r\n\r\n  const Tag = tag\r\n\r\n  return (\r\n    <Tag\r\n      className={classnames(\"ui-loader\", {\r\n        [className]: className,\r\n        show: blocking\r\n      })}\r\n    >\r\n      {children}\r\n      {blocking ? (\r\n        <Fragment>\r\n          <div\r\n            className=\"overlay\" /*eslint-disable */\r\n            {...(blocking && overlayColor\r\n              ? { style: { backgroundColor: overlayColor } }\r\n              : {})}\r\n            /*eslint-enable */\r\n          ></div>\r\n          <div className=\"loader\">{loader}</div>\r\n        </Fragment>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default UILoader\r\n\r\nUILoader.defaultProps = {\r\n  tag: \"div\",\r\n  blocking: false,\r\n  loader: <Spinner color=\"primary\" />\r\n}\r\n\r\nUILoader.propTypes = {\r\n  tag: Proptypes.string,\r\n  loader: Proptypes.any,\r\n  className: Proptypes.string,\r\n  overlayColor: Proptypes.string,\r\n  blocking: Proptypes.bool.isRequired\r\n}\r\n"],"sourceRoot":""}