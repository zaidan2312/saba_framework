{"version":3,"sources":["views/apps/user/modal/index.js","../../src/mounts.js","../../src/index.js"],"names":["withReactContent","Swal","ModalAddEdit","_ref","_selectedUser$phone","_store$data_employee$","_store$selectedUser","_store$selectedUser2","show","setShow","detailPage","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","unitOptionsSelected","setUnitOptionsSelected","_useState5","_useState6","idRole","setIdRole","_useState7","_useState8","employeeOptionsSelected","setEmployeeOptionsSelected","_useState9","_useState10","setFormEdited","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","users","storeUnit","units","storeRole","roles","colors","useContext","ThemeColors","_useState11","selectedUser","_useState12","setSelectedUser","_useForm","useForm","defaultValues","username","name","phone","reset","control","setError","handleSubmit","errors","formState","Loader","_jsxs","Fragment","children","_jsx","Spinner","CardText","className","useEffect","data","length","isLoading","getUnits","getData","data_employee","isLoading_employee","getDataEmployee","id_employee","filter","el","map","item","_item$LastName","value","label","concat","FirstName","LastName","id_role","Modal","isOpen","toggle","UILoader","blocking","isLoadingAddEdit","isLoadingDetail","loader","ModalHeader","ModalBody","Form","onSubmit","_selectedUser$phone2","unitOptionsSelect","member_of","formEdited","JSON","stringify","countChanges","Object","values","every","field","updateUser","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getUser","error","payload","danger","key","_data$key","type","icon","Row","Col","md","xs","Label","for","Controller","defaultValue","render","_ref2","Input","_objectSpread","placeholder","invalid","_ref3","disabled","email","_ref4","Select","theme","selectThemeColors","onChange","options","classnames","classNamePrefix","isClearable","_item$LastName2","e","Array","isArray","x","_item$LastName3","closeMenuOnSelect","isMulti","Button","outline","onClick","mounts","getter","swal","getTitle","getHtmlContainer","getConfirmButton","getDenyButton","getCancelButton","getFooter","getCloseButton","getIcon","querySelector","getLoader","noop","ParentSwal","extractReactParams","params","reactParams","otherParams","mountKeys","mount","entries","forEach","includes","React__default","isValidElement","domElement","find","ReactDOM__default","__mountedDomElements","push","unrender","unmountComponentAtNode","_ParentSwal","_inherits","_class","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","mixinParams","_this","this","__params","assign","_extractReactParams","_extractReactParams2","superDidOpen","didOpen","superDidDestroy","didDestroy","_get","_getPrototypeOf","prototype","call","popup","_extractReactParams3","_extractReactParams4","args","index","undefined","argsToParams"],"mappings":"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","file":"static/js/75.4da54a4a.chunk.js","sourcesContent":["import { useState, Fragment, useContext, useEffect } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Form,\r\n  CardBody,\r\n  Button,\r\n  Badge,\r\n  Modal,\r\n  Input,\r\n  Label,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport Moment from \"moment\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport classnames from \"classnames\"\r\n\r\nimport Swal from \"sweetalert2\"\r\nimport Select from \"react-select\"\r\nimport withReactContent from \"sweetalert2-react-content\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport { updateUser, getUser, getDataEmployee } from \"../store\"\r\nimport { getUnits } from \"../../unit/store\"\r\nimport { getData } from \"../../roles-permissions/store/role\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nconst MySwal = withReactContent(Swal)\r\n\r\nconst ModalAddEdit = ({ show, setShow, detailPage }) => {\r\n  const [unitOptions, setUnitOptions] = useState([])\r\n  const [unitOptionsSelected, setUnitOptionsSelected] = useState([])\r\n  const [idRole, setIdRole] = useState(null)\r\n  const [employeeOptionsSelected, setEmployeeOptionsSelected] = useState([])\r\n  const [formEdited, setFormEdited] = useState(false)\r\n  const { t } = useTranslation()\r\n  // const [id, setId] = useState(null)\r\n  let { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state.users)\r\n  const storeUnit = useSelector((state) => state.units)\r\n  const storeRole = useSelector((state) => state.roles)\r\n  const { colors } = useContext(ThemeColors)\r\n  const [selectedUser, setSelectedUser] = useState(store.selectedUser)\r\n  const {\r\n    reset,\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({\r\n    defaultValues: {\r\n      username: selectedUser?.username,\r\n      name: selectedUser?.name,\r\n      phone: selectedUser?.phone ?? \"\"\r\n    }\r\n  })\r\n\r\n  const Loader = () => {\r\n    return (\r\n      <Fragment>\r\n        <Spinner />\r\n        <CardText className=\"mb-0 mt-1 text-white\">\r\n          {t(\"Please Wait\")}...\r\n        </CardText>\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  const handleChangeUnit = (e) => {\r\n    // console.log(e)\r\n    setUnitOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\r\n    // console.log(unitOptionsSelected)\r\n  }\r\n\r\n  const handleChangeEmployee = (e) => {\r\n    // console.log(e)\r\n    setEmployeeOptionsSelected(Array.isArray(e) ? e.map((x) => x.value) : [])\r\n    // console.log(unitOptionsSelected)\r\n  }\r\n\r\n  const countChanges = (data) => {\r\n    // console.log(data)\r\n\r\n    const unitOptionsSelect =\r\n      selectedUser.member_of !== null\r\n        ? selectedUser?.member_of.map((item) => ({\r\n            value: item.id,\r\n            label: item.name\r\n          }))\r\n        : []\r\n\r\n    // console.log(unitOptionsSelect)\r\n    // console.log(unitOptionsSelected)\r\n    const formEdited =\r\n      selectedUser.name !== data.name ||\r\n      selectedUser.username !== data.username ||\r\n      (selectedUser.phone ?? \"\") !== data.phone ||\r\n      JSON.stringify(unitOptionsSelect) !==\r\n        JSON.stringify(unitOptionsSelected) ||\r\n      idRole !== selectedUser.id_role\r\n    setFormEdited(true)\r\n    return formEdited\r\n  }\r\n\r\n  const onSubmit = (data) => {\r\n    if (countChanges(data)) {\r\n      // console.log(countChanges(data))\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field.length > 0 || field === \"\"\r\n        })\r\n      ) {\r\n        if (data.phone === \"\") {\r\n          delete data.phone\r\n        }\r\n\r\n        data[\"id\"] = id ?? selectedUser.id\r\n        data[\"id_role\"] = idRole\r\n        data[\"id_employee\"] = employeeOptionsSelected?.id\r\n        data[\"member_of\"] = unitOptionsSelected\r\n        dispatch(updateUser(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            setShow(!show)\r\n            toast.success(`${t(\"Successfully Updated Data\")}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n            if (detailPage) {\r\n              dispatch(getUser(id))\r\n            }\r\n\r\n            // setUnitOptionsSelected(\r\n            //   selectedUser.member_of.map((item) => ({\r\n            //     value: item.id,\r\n            //     label: item.name\r\n            //   }))\r\n            // )\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(JSON.stringify(res.payload), {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    reset({\r\n      username: selectedUser?.username,\r\n      name: selectedUser?.name\r\n    })\r\n  }\r\n\r\n  // ** Get data on mount\r\n  useEffect(() => {\r\n    // const { id } = useParams()\r\n    // console.log(this.props.match.params.id)\r\n    // if (!id) {\r\n    //   id = idRow\r\n    // }\r\n    setSelectedUser(store.selectedUser)\r\n    if (storeUnit.data.length === 0 && !storeUnit.isLoading) {\r\n      dispatch(getUnits())\r\n      setSelectedUser(store.selectedUser)\r\n    }\r\n\r\n    if (storeRole?.data.length === 0 && !storeRole.isLoading) {\r\n      dispatch(getData())\r\n    }\r\n\r\n    if (store?.data_employee.length === 0 && !store.isLoading_employee) {\r\n      dispatch(\r\n        getDataEmployee({\r\n          length: 200\r\n        })\r\n      )\r\n      if (store.data_employee && selectedUser?.id_employee) {\r\n        setEmployeeOptionsSelected(\r\n          store.data_employee\r\n            .filter((el) => el.id === selectedUser?.id_employee)\r\n            .map((item) => ({\r\n              value: item.id,\r\n              label: `${item.FirstName} ${item?.LastName ?? \"\"}`\r\n            }))\r\n        )\r\n      }\r\n    }\r\n\r\n    // console.log(storeUnit.data)\r\n    // console.log(unitOptions)\r\n    // console.log(unitOptionsSelected)\r\n\r\n    setIdRole(selectedUser?.id_role)\r\n  }, [])\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={show}\r\n      toggle={() => setShow(!show)}\r\n      className=\"modal-dialog-centered modal-lg\"\r\n    >\r\n      <UILoader\r\n        blocking={\r\n          (store.isLoadingAddEdit || store.isLoadingDetail) &&\r\n          !store.selectedUser\r\n        }\r\n        loader={<Loader />}\r\n      >\r\n        <ModalHeader\r\n          className=\"bg-transparent\"\r\n          toggle={() => setShow(!show)}\r\n        ></ModalHeader>\r\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\r\n          <div className=\"text-center mb-2\">\r\n            <h1 className=\"mb-1\">\r\n              {t(\"Edit\")} {t(\"User Information\")}\r\n            </h1>\r\n            <p>{t(\"Updating user details will receive a privacy audit.\")}</p>\r\n          </div>\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Row className=\"gy-1 pt-75\">\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"name\">\r\n                  {t(\"Full Name\")}\r\n                </Label>\r\n                <Controller\r\n                  defaultValue=\"\"\r\n                  control={control}\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      id=\"name\"\r\n                      placeholder=\"John\"\r\n                      invalid={errors.name && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={6} xs={12}>\r\n                <Label className=\"form-label\" for=\"username\">\r\n                  {t(\"Username\")}:\r\n                </Label>\r\n                <Controller\r\n                  defaultValue=\"\"\r\n                  control={control}\r\n                  id=\"username\"\r\n                  name=\"username\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      id=\"username\"\r\n                      placeholder=\"john.doe.007\"\r\n                      invalid={errors.username && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={6} xs={12}>\r\n                <Label className=\"form-label\" for=\"email\">\r\n                  {t(\"Email\")}:\r\n                </Label>\r\n                <Input\r\n                  type=\"email\"\r\n                  id=\"email\"\r\n                  disabled\r\n                  defaultValue={selectedUser?.email}\r\n                  placeholder=\"example@domain.com\"\r\n                />\r\n              </Col>\r\n\r\n              <Col md={6} xs={12}>\r\n                <Label className=\"form-label\" for=\"phone\">\r\n                  {t(\"Contact\")}\r\n                </Label>\r\n                <Controller\r\n                  defaultValue=\"\"\r\n                  control={control}\r\n                  id=\"phone\"\r\n                  name=\"phone\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      value={selectedUser?.phone || \"\"}\r\n                      id=\"phone\"\r\n                      placeholder=\"+62 813 940 10XX X\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className=\"form-label\" for=\"id_role\">\r\n                  {t(\"Role\")}\r\n                </Label>\r\n                <Select\r\n                  id=\"id_role\"\r\n                  theme={selectThemeColors}\r\n                  defaultValue={storeRole.data\r\n                    .filter((el) => el.id === selectedUser?.id_role)\r\n                    .map((item) => ({\r\n                      value: item.id,\r\n                      label: item.name\r\n                    }))}\r\n                  onChange={(data) => {\r\n                    setIdRole(data.value)\r\n                  }}\r\n                  options={storeRole.data.map((item) => ({\r\n                    value: item.id,\r\n                    label: item.name\r\n                  }))}\r\n                  className={classnames(\"react-select\", {\r\n                    \"is-invalid\": idRole === null\r\n                  })}\r\n                  classNamePrefix=\"select\"\r\n                />\r\n              </Col>\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"id_employee\">\r\n                  {t(\"Employee\")}\r\n                </Label>\r\n                <Select\r\n                  id=\"id_employee\"\r\n                  isClearable={true}\r\n                  isLoading={store.isLoading_employee}\r\n                  theme={selectThemeColors}\r\n                  defaultValue={\r\n                    store.data_employee\r\n                      .filter((el) => el.id === selectedUser?.id_employee)\r\n                      .map((item) => ({\r\n                        value: item.id,\r\n                        label: `${item.FirstName} ${item?.LastName ?? \"\"}`\r\n                      })) ?? \"\"\r\n                  }\r\n                  onChange={(data) => {\r\n                    handleChangeEmployee(data)\r\n                  }}\r\n                  options={store.data_employee.map((item) => ({\r\n                    value: item.id,\r\n                    label: `${item.FirstName} ${item?.LastName ?? \"\"}`\r\n                  }))}\r\n                  className=\"react-select\"\r\n                  classNamePrefix=\"select\"\r\n                />\r\n              </Col>\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"member_of\">\r\n                  {t(\"Unit\")}\r\n                </Label>\r\n                <Select\r\n                  id=\"member_of\"\r\n                  isClearable={false}\r\n                  theme={selectThemeColors}\r\n                  closeMenuOnSelect={false}\r\n                  defaultValue={\r\n                    store.selectedUser?.member_of\r\n                      ? store.selectedUser?.member_of.map((item) => ({\r\n                          value: item.id,\r\n                          label: item.name\r\n                        }))\r\n                      : []\r\n                  }\r\n                  onChange={(data) => {\r\n                    handleChangeUnit(data)\r\n                  }}\r\n                  isMulti\r\n                  options={storeUnit.data\r\n                    .map((item) => ({\r\n                      value: item.id,\r\n                      label: item.name\r\n                    }))\r\n                    .filter((x) => x.value !== \"\")}\r\n                  className=\"react-select\"\r\n                  classNamePrefix=\"select\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n                <Button\r\n                  type=\"reset\"\r\n                  color=\"secondary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    setShow(false)\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </ModalBody>\r\n      </UILoader>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ModalAddEdit\r\n","export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n"],"sourceRoot":""}